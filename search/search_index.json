{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GEF - GDB Enhanced Features GEF (pronounced \u02a4\u025bf - \"Jeff\") is a kick-ass set of commands for X86, ARM, MIPS, PowerPC and SPARC to make GDB cool again for exploit dev. It is aimed to be used mostly by exploit developers and reverse-engineers, to provide additional features to GDB using the Python API to assist during the process of dynamic analysis and exploit development. It has full support for both Python2 and Python3 indifferently (as more and more distros start pushing gdb compiled with Python3 support). GDB Made Easy One single GDB script Entirely OS Agnostic , NO dependencies: GEF is battery-included and is installable instantly Fast limiting the number of dependencies and optimizing code to makethe commands as fast as possible Provides a great variety of commands to drastically change your debugging experience in GDB. Easily extensible to create other commands by providing more comprehensible layout to GDB Python API. Full Python3 support ( Python2 support was dropped in 2020.03 ) - check out gef-legacy for a Python2 compatible version, and the compatibility matrix for a complete rundown of version support. Built around an architecture abstraction layer, so all commands work in any GDB-supported architecture such as x86-32/64, ARMv5/6/7, AARCH64, SPARC, MIPS, PowerPC, etc. Suited for real-life debugging, exploit development, just as much as for CTFs Check out the showroom page for more | or try it online yourself! (user: gef /password: gef-demo ) Quick start Automated installation GEF has no dependencies, is fully battery-included and works out of the box. You can get started with GEF in a matter of seconds, by simply running: bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" For more details and other ways to install GEF please see installation page . Run Then just start playing (for local files): $ gdb -q /path/to/my/bin gef\u27a4 gef help Or (for remote debugging): remote:~ $ gdbserver 0.0.0.0:1234 /path/to/file Running as PID: 666 And: local:~ $ gdb -q gef\u27a4 gef-remote -t your.ip.address:1234 -p 666 Bugs & Feedbacks To discuss gef , gdb , exploitation or other topics, feel free to join our Discord channel . For bugs or feature requests, just go here and provide a thorough description if you want help. Side Note : GEF fully relies on the GDB API and other Linux-specific sources of information (such as /proc/<pid> ). As a consequence, some of the features might not work on custom or hardened systems such as GrSec. Contribution gef was created and maintained by myself, @_hugsy_ , but kept fresh thanks to all the contributors . Or if you just like the tool, feel free to drop a simple \"thanks\" on Discord, Twitter or other, it is always very appreciated. Sponsors We would like to thank in particular the following people who've been sponsoring GEF allowing us to dedicate more time and resources to the project: Extra Credits The GEF logo was designed by TheZakMan \ud83c\udf7a Happy hacking !","title":"Home"},{"location":"#gef-gdb-enhanced-features","text":"GEF (pronounced \u02a4\u025bf - \"Jeff\") is a kick-ass set of commands for X86, ARM, MIPS, PowerPC and SPARC to make GDB cool again for exploit dev. It is aimed to be used mostly by exploit developers and reverse-engineers, to provide additional features to GDB using the Python API to assist during the process of dynamic analysis and exploit development. It has full support for both Python2 and Python3 indifferently (as more and more distros start pushing gdb compiled with Python3 support).","title":"GEF - GDB Enhanced Features"},{"location":"#gdb-made-easy","text":"One single GDB script Entirely OS Agnostic , NO dependencies: GEF is battery-included and is installable instantly Fast limiting the number of dependencies and optimizing code to makethe commands as fast as possible Provides a great variety of commands to drastically change your debugging experience in GDB. Easily extensible to create other commands by providing more comprehensible layout to GDB Python API. Full Python3 support ( Python2 support was dropped in 2020.03 ) - check out gef-legacy for a Python2 compatible version, and the compatibility matrix for a complete rundown of version support. Built around an architecture abstraction layer, so all commands work in any GDB-supported architecture such as x86-32/64, ARMv5/6/7, AARCH64, SPARC, MIPS, PowerPC, etc. Suited for real-life debugging, exploit development, just as much as for CTFs Check out the showroom page for more | or try it online yourself! (user: gef /password: gef-demo )","title":"GDB Made Easy"},{"location":"#quick-start","text":"","title":"Quick start"},{"location":"#automated-installation","text":"GEF has no dependencies, is fully battery-included and works out of the box. You can get started with GEF in a matter of seconds, by simply running: bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" For more details and other ways to install GEF please see installation page .","title":"Automated installation"},{"location":"#run","text":"Then just start playing (for local files): $ gdb -q /path/to/my/bin gef\u27a4 gef help Or (for remote debugging): remote:~ $ gdbserver 0.0.0.0:1234 /path/to/file Running as PID: 666 And: local:~ $ gdb -q gef\u27a4 gef-remote -t your.ip.address:1234 -p 666","title":"Run"},{"location":"#bugs-feedbacks","text":"To discuss gef , gdb , exploitation or other topics, feel free to join our Discord channel . For bugs or feature requests, just go here and provide a thorough description if you want help. Side Note : GEF fully relies on the GDB API and other Linux-specific sources of information (such as /proc/<pid> ). As a consequence, some of the features might not work on custom or hardened systems such as GrSec.","title":"Bugs &amp; Feedbacks"},{"location":"#contribution","text":"gef was created and maintained by myself, @_hugsy_ , but kept fresh thanks to all the contributors . Or if you just like the tool, feel free to drop a simple \"thanks\" on Discord, Twitter or other, it is always very appreciated.","title":"Contribution"},{"location":"#sponsors","text":"We would like to thank in particular the following people who've been sponsoring GEF allowing us to dedicate more time and resources to the project:","title":"Sponsors"},{"location":"#extra-credits","text":"The GEF logo was designed by TheZakMan","title":"Extra Credits"},{"location":"#happy-hacking","text":"","title":"\ud83c\udf7a Happy hacking !"},{"location":"api/","text":"Extending GEF GEF intends to provide a battery-included, quickly installable and crazy fast debugging environment sitting on top of GDB. But it most importantly provides all the primitives required to allow hackers to quickly create their own commands. This page intends to summarize how to create advanced GDB commands in moments using GEF as a library. A dedicated repository was born to host external scripts . This repo is open to all for contributions, no restrictions and the most valuable ones will be integrated into gef.py . Quick start Here is the most basic skeleton for creating a new GEF command named newcmd : class NewCommand(GenericCommand): \"\"\"Dummy new command.\"\"\" _cmdline_ = \"newcmd\" _syntax_ = f\"{_cmdline_}\" @only_if_gdb_running # not required, ensures that the debug session is started def do_invoke(self, argv): # let's say we want to print some info about the architecture of the current binary print(f\"gef.arch={gef.arch}\") # or showing the current $pc print(f\"gef.arch.pc={gef.arch.pc:#x}\") return register_external_command(NewCommand()) Loading it in GEF is as easy as gef\u27a4 source /path/to/newcmd.py [+] Loading 'NewCommand' We can call it: gef\u27a4 newcmd gef.arch=<__main__.X86_64 object at 0x7fd5583571c0> gef.arch.pc=0x55555555a7d0 Yes, that's it! Check out the complete API to see what else GEF offers. Detailed explanation Our new command must be a class that inherits from GEF's GenericCommand . The only requirements are: a _cmdline_ attribute (the command to type on the GDB prompt). a _syntax_ attribute, which GEF will use to auto-generate the help menu. a method do_invoke(self, args) which will be executed when the command is invoked. args is a list of the command line args provided when invoked. We make GEF aware of this new command by registering it in the __main__ section of the script, by invoking the global function register_external_command() . Now you have a new GEF command which you can load, either from cli: gef\u27a4 source /path/to/newcmd.py or add to your ~/.gdbinit : $ echo source /path/to/newcmd.py >> ~/.gdbinit Customizing context panes Sometimes you want something similar to a command to run on each break-like event and display itself as a part of the GEF context. Here is a simple example of how to make a custom context pane: __start_time__ = int(time.time()) def wasted_time_debugging(): gef_print(\"You have wasted {} seconds!\".format(int(time.time()) - __start_time__)) def wasted_time_debugging_title(): return \"wasted:time:debugging:{}\".format(int(time.time()) - __start_time__) register_external_context_pane(\"wasted_time_debugging\", wasted_time_debugging, wasted_time_debugging_title) Loading it in GEF is as easy as loading a command gef\u27a4 source /path/to/custom_context_pane.py It can even be included in the same file as a Command. Now on each break you will notice a new pane near the bottom of the context. The order can be modified in the GEF context config. Context Pane API The API demonstrated above requires very specific argument types: register_external_context_pane(pane_name, display_pane_function, pane_title_function) - pane_name : a string that will be used as the panes setting name - display_pane_function : a function that uses gef_print() to print content in the pane - pane_title_function : a function that returns the title string or None to hide the title API Some of the most important parts of the API for creating new commands are mentioned (but not limited to) below. To see the full help of a function, open GDB and GEF, and use the embedded Python interpreter's help command. For example: gef\u27a4 pi help(Architecture) or even from outside GDB: $ gdb -q -ex 'pi help(hexdump)' -ex quit The GEF API aims to provide a simpler and more Pythonic approach to GDB's. Some basic examples: - read the memory gef \u27a4 pi print(hexdump( gef.memory.read(parse_address(\"$pc\"), length=0x20 ))) 0x0000000000000000 f3 0f 1e fa 31 ed 49 89 d1 5e 48 89 e2 48 83 e4 ....1.I..^H..H.. 0x0000000000000010 f0 50 54 4c 8d 05 66 0d 01 00 48 8d 0d ef 0c 01 .PTL..f...H..... get access to the memory layout gef \u27a4 pi print('\\n'.join([ f\"{x.page_start:#x} -> {x.page_end:#x}\" for x in gef.memory.maps])) 0x555555554000 -> 0x555555558000 0x555555558000 -> 0x55555556c000 0x55555556c000 -> 0x555555575000 0x555555576000 -> 0x555555577000 0x555555577000 -> 0x555555578000 0x555555578000 -> 0x55555559a000 0x7ffff7cd8000 -> 0x7ffff7cda000 0x7ffff7cda000 -> 0x7ffff7ce1000 0x7ffff7ce1000 -> 0x7ffff7cf2000 0x7ffff7cf2000 -> 0x7ffff7cf7000 [...] The API also offers a number of decorators to simplify the creation of new/existing commands, such as: - @only_if_gdb_running to execute only if a GDB session is running. - @only_if_gdb_target_local to check if the target is local i.e. not debugging using GDB remote . - and many more... Reference For a complete reference of the API offered by GEF, visit docs/api/gef.md . Parsing command arguments @parse_arguments( {\"required_argument_1\": DefaultValue1, ...}, {\"--optional-argument-1\": DefaultValue1, ...} ) This decorator aims to facilitate the argument passing to a command. If added, it will use the argparse module to parse arguments, and will store them in the kwargs[\"arguments\"] of the calling function (therefore the function must have *args, **kwargs added to its signature). Argument type is inferred directly from the default value except for boolean, where a value of True corresponds to argparse 's store_true action. For more details on argparse , refer to its Python documentation. Values given for the parameters also allow list of arguments being past. This can be useful in the case where the number of exact option values is known in advance. This can be achieved simply by using a type of tuple or list for the default value. parse_arguments will determine the type of what to expect based on the first default value of the iterable, so make sure it's not empty. For instance: @parse_arguments( {\"instructions\": [\"nop\", \"int3\", \"hlt\"], }, {\"--arch\": \"x64\", } ) Argument flags are also supported, allowing to write simpler version of the flag such as @parse_arguments( {}, {(\"--long-argument\", \"-l\"): value, } ) A basic example would be as follow: class MyCommand(GenericCommand): [...] @parse_arguments({\"foo\": [1,]}, {\"--bleh\": \"\", (\"--blah\", \"-l): True}) def do_invoke(self, argv, *args, **kwargs): args = kwargs[\"arguments\"] if args.foo == 1: ... if args.blah == True: ... When the user enters the following command: gef\u27a4 mycommand --blah 3 14 159 2653 The function MyCommand!do_invoke() can use the command line argument value args.foo --> [3, 14, 159, 2653] # a List(int) from user input args.bleh --> \"\" # the default value args.blah --> True # set to True because user input declared the option (would have been False otherwise) Adding new architectures Support for new architectures can be added by inheriting from the Architecture class. To register the new architecture with gef, the decorator @register_architecture has to be added to the class. Examples can be found in gef-extras . Sometimes architectures can more precisely determine whether they apply to the current target by looking at the architecture determined by gdb. For these cases the custom architecture may implement the supports_gdb_arch() static function to signal that they should be used instead of the default. The function receives only one argument: - gdb_str (of type str ) which is the architecture name as reported by GDB. The function must return: - True if the current Architecture class supports the target binary; False otherwise. - None to simply ignore this check and let GEF try to determine the architecture. One example is the ARM Cortex-M architecture which in some cases should rather be used than the generic ARM one: @staticmethod def supports_gdb_arch(gdb_arch: str) -> Optional[bool]: return bool(re.search(\"^armv.*-m$\", gdb_arch))","title":"Write extensions"},{"location":"api/#extending-gef","text":"GEF intends to provide a battery-included, quickly installable and crazy fast debugging environment sitting on top of GDB. But it most importantly provides all the primitives required to allow hackers to quickly create their own commands. This page intends to summarize how to create advanced GDB commands in moments using GEF as a library. A dedicated repository was born to host external scripts . This repo is open to all for contributions, no restrictions and the most valuable ones will be integrated into gef.py .","title":"Extending GEF"},{"location":"api/#quick-start","text":"Here is the most basic skeleton for creating a new GEF command named newcmd : class NewCommand(GenericCommand): \"\"\"Dummy new command.\"\"\" _cmdline_ = \"newcmd\" _syntax_ = f\"{_cmdline_}\" @only_if_gdb_running # not required, ensures that the debug session is started def do_invoke(self, argv): # let's say we want to print some info about the architecture of the current binary print(f\"gef.arch={gef.arch}\") # or showing the current $pc print(f\"gef.arch.pc={gef.arch.pc:#x}\") return register_external_command(NewCommand()) Loading it in GEF is as easy as gef\u27a4 source /path/to/newcmd.py [+] Loading 'NewCommand' We can call it: gef\u27a4 newcmd gef.arch=<__main__.X86_64 object at 0x7fd5583571c0> gef.arch.pc=0x55555555a7d0 Yes, that's it! Check out the complete API to see what else GEF offers.","title":"Quick start"},{"location":"api/#detailed-explanation","text":"Our new command must be a class that inherits from GEF's GenericCommand . The only requirements are: a _cmdline_ attribute (the command to type on the GDB prompt). a _syntax_ attribute, which GEF will use to auto-generate the help menu. a method do_invoke(self, args) which will be executed when the command is invoked. args is a list of the command line args provided when invoked. We make GEF aware of this new command by registering it in the __main__ section of the script, by invoking the global function register_external_command() . Now you have a new GEF command which you can load, either from cli: gef\u27a4 source /path/to/newcmd.py or add to your ~/.gdbinit : $ echo source /path/to/newcmd.py >> ~/.gdbinit","title":"Detailed explanation"},{"location":"api/#customizing-context-panes","text":"Sometimes you want something similar to a command to run on each break-like event and display itself as a part of the GEF context. Here is a simple example of how to make a custom context pane: __start_time__ = int(time.time()) def wasted_time_debugging(): gef_print(\"You have wasted {} seconds!\".format(int(time.time()) - __start_time__)) def wasted_time_debugging_title(): return \"wasted:time:debugging:{}\".format(int(time.time()) - __start_time__) register_external_context_pane(\"wasted_time_debugging\", wasted_time_debugging, wasted_time_debugging_title) Loading it in GEF is as easy as loading a command gef\u27a4 source /path/to/custom_context_pane.py It can even be included in the same file as a Command. Now on each break you will notice a new pane near the bottom of the context. The order can be modified in the GEF context config.","title":"Customizing context panes"},{"location":"api/#context-pane-api","text":"The API demonstrated above requires very specific argument types: register_external_context_pane(pane_name, display_pane_function, pane_title_function) - pane_name : a string that will be used as the panes setting name - display_pane_function : a function that uses gef_print() to print content in the pane - pane_title_function : a function that returns the title string or None to hide the title","title":"Context Pane API"},{"location":"api/#api","text":"Some of the most important parts of the API for creating new commands are mentioned (but not limited to) below. To see the full help of a function, open GDB and GEF, and use the embedded Python interpreter's help command. For example: gef\u27a4 pi help(Architecture) or even from outside GDB: $ gdb -q -ex 'pi help(hexdump)' -ex quit The GEF API aims to provide a simpler and more Pythonic approach to GDB's. Some basic examples: - read the memory gef \u27a4 pi print(hexdump( gef.memory.read(parse_address(\"$pc\"), length=0x20 ))) 0x0000000000000000 f3 0f 1e fa 31 ed 49 89 d1 5e 48 89 e2 48 83 e4 ....1.I..^H..H.. 0x0000000000000010 f0 50 54 4c 8d 05 66 0d 01 00 48 8d 0d ef 0c 01 .PTL..f...H..... get access to the memory layout gef \u27a4 pi print('\\n'.join([ f\"{x.page_start:#x} -> {x.page_end:#x}\" for x in gef.memory.maps])) 0x555555554000 -> 0x555555558000 0x555555558000 -> 0x55555556c000 0x55555556c000 -> 0x555555575000 0x555555576000 -> 0x555555577000 0x555555577000 -> 0x555555578000 0x555555578000 -> 0x55555559a000 0x7ffff7cd8000 -> 0x7ffff7cda000 0x7ffff7cda000 -> 0x7ffff7ce1000 0x7ffff7ce1000 -> 0x7ffff7cf2000 0x7ffff7cf2000 -> 0x7ffff7cf7000 [...] The API also offers a number of decorators to simplify the creation of new/existing commands, such as: - @only_if_gdb_running to execute only if a GDB session is running. - @only_if_gdb_target_local to check if the target is local i.e. not debugging using GDB remote . - and many more...","title":"API"},{"location":"api/#reference","text":"For a complete reference of the API offered by GEF, visit docs/api/gef.md .","title":"Reference"},{"location":"api/#parsing-command-arguments","text":"@parse_arguments( {\"required_argument_1\": DefaultValue1, ...}, {\"--optional-argument-1\": DefaultValue1, ...} ) This decorator aims to facilitate the argument passing to a command. If added, it will use the argparse module to parse arguments, and will store them in the kwargs[\"arguments\"] of the calling function (therefore the function must have *args, **kwargs added to its signature). Argument type is inferred directly from the default value except for boolean, where a value of True corresponds to argparse 's store_true action. For more details on argparse , refer to its Python documentation. Values given for the parameters also allow list of arguments being past. This can be useful in the case where the number of exact option values is known in advance. This can be achieved simply by using a type of tuple or list for the default value. parse_arguments will determine the type of what to expect based on the first default value of the iterable, so make sure it's not empty. For instance: @parse_arguments( {\"instructions\": [\"nop\", \"int3\", \"hlt\"], }, {\"--arch\": \"x64\", } ) Argument flags are also supported, allowing to write simpler version of the flag such as @parse_arguments( {}, {(\"--long-argument\", \"-l\"): value, } ) A basic example would be as follow: class MyCommand(GenericCommand): [...] @parse_arguments({\"foo\": [1,]}, {\"--bleh\": \"\", (\"--blah\", \"-l): True}) def do_invoke(self, argv, *args, **kwargs): args = kwargs[\"arguments\"] if args.foo == 1: ... if args.blah == True: ... When the user enters the following command: gef\u27a4 mycommand --blah 3 14 159 2653 The function MyCommand!do_invoke() can use the command line argument value args.foo --> [3, 14, 159, 2653] # a List(int) from user input args.bleh --> \"\" # the default value args.blah --> True # set to True because user input declared the option (would have been False otherwise)","title":"Parsing command arguments"},{"location":"api/#adding-new-architectures","text":"Support for new architectures can be added by inheriting from the Architecture class. To register the new architecture with gef, the decorator @register_architecture has to be added to the class. Examples can be found in gef-extras . Sometimes architectures can more precisely determine whether they apply to the current target by looking at the architecture determined by gdb. For these cases the custom architecture may implement the supports_gdb_arch() static function to signal that they should be used instead of the default. The function receives only one argument: - gdb_str (of type str ) which is the architecture name as reported by GDB. The function must return: - True if the current Architecture class supports the target binary; False otherwise. - None to simply ignore this check and let GEF try to determine the architecture. One example is the ARM Cortex-M architecture which in some cases should rather be used than the generic ARM one: @staticmethod def supports_gdb_arch(gdb_arch: str) -> Optional[bool]: return bool(re.search(\"^armv.*-m$\", gdb_arch))","title":"Adding new architectures"},{"location":"compat/","text":"GEF Compatibility This matrix indicates the version of Python and/or GDB GEF version GDB Python compatibility* Python compatibility* 2018.02 7.2 Python 2.7, Python 3.4+ 2020.03 7.4 Python 2.7, Python 3.4+ 2022.01 7.7 Python 3.4+ Current 8.0+ Python 3.6+ Up to - included","title":"Compatibility"},{"location":"compat/#gef-compatibility","text":"This matrix indicates the version of Python and/or GDB GEF version GDB Python compatibility* Python compatibility* 2018.02 7.2 Python 2.7, Python 3.4+ 2020.03 7.4 Python 2.7, Python 3.4+ 2022.01 7.7 Python 3.4+ Current 8.0+ Python 3.6+ Up to - included","title":"GEF Compatibility"},{"location":"config/","text":"Configuring GEF GEF comes with its own configuration and customization system, allowing fine tweaking. The configuration file is located under ~/.gef.rc by default, and is automatically loaded when GEF is loaded by GDB. If not configuration file is found, GEF will simply use the default settings. The configuration file is a Python configparser . To create a basic file with all settings and their default values, simply run gdb -ex 'gef save' -ex quit You can now explore the configuration file under ~/.gef.rc . Once in GEF, the configuration settings can be set/unset/modified by the command gef config . Without argument the command will simply dump all known settings: To update, follow the syntax gef\u27a4 gef config <Module>.<ModuleSetting> <Value> Any setting updated this way will be specific to the current GDB session. To make permanent, use the following command gef\u27a4 gef save Refer to the gef config command documentation for complete explanation.","title":"Configuration"},{"location":"config/#configuring-gef","text":"GEF comes with its own configuration and customization system, allowing fine tweaking. The configuration file is located under ~/.gef.rc by default, and is automatically loaded when GEF is loaded by GDB. If not configuration file is found, GEF will simply use the default settings. The configuration file is a Python configparser . To create a basic file with all settings and their default values, simply run gdb -ex 'gef save' -ex quit You can now explore the configuration file under ~/.gef.rc . Once in GEF, the configuration settings can be set/unset/modified by the command gef config . Without argument the command will simply dump all known settings: To update, follow the syntax gef\u27a4 gef config <Module>.<ModuleSetting> <Value> Any setting updated this way will be specific to the current GDB session. To make permanent, use the following command gef\u27a4 gef save Refer to the gef config command documentation for complete explanation.","title":"Configuring GEF"},{"location":"deprecated/","text":"Deprecated commands GEF is in itself a large file, but to avoid it to be out of control some commands once part of GEF were either moved to GEF-Extras or even simply removed. This page aims to track those changes. Command Status Since Link (if Applicable) Notes cs-disassemble Moved 2022.06 Link Depends on capstone assemble Moved 2022.06 Link Depends on keystone emulate Moved 2022.06 Link Depends on unicorn and capstone set-permission Moved 2022.06 Link Depends on keystone ropper Moved 2022.06 Link Depends on ropper ida-interact Moved 2022.06 Link Depends on rpyc exploit-template Moved c402900 Link windbg Moved a933a5a Link is-syscall Moved 3f79fb38 Link syscall-args Moved 3f79fb38 Link","title":"Deprecated"},{"location":"deprecated/#deprecated-commands","text":"GEF is in itself a large file, but to avoid it to be out of control some commands once part of GEF were either moved to GEF-Extras or even simply removed. This page aims to track those changes. Command Status Since Link (if Applicable) Notes cs-disassemble Moved 2022.06 Link Depends on capstone assemble Moved 2022.06 Link Depends on keystone emulate Moved 2022.06 Link Depends on unicorn and capstone set-permission Moved 2022.06 Link Depends on keystone ropper Moved 2022.06 Link Depends on ropper ida-interact Moved 2022.06 Link Depends on rpyc exploit-template Moved c402900 Link windbg Moved a933a5a Link is-syscall Moved 3f79fb38 Link syscall-args Moved 3f79fb38 Link","title":"Deprecated commands"},{"location":"faq/","text":"Frequently Asked Questions Why use GEF over PEDA? PEDA is a fantastic tool that provides similar commands to make the exploitation development process smoother. However, PEDA suffers from a major drawbacks, which the code is too fundamentally linked to Intel architectures (x86-32 and x86-64). On the other hand, GEF not only supports all the architecture supported by GDB (currently x86, ARM, AARCH64, MIPS, PowerPC, SPARC) but is designed to integrate new architectures very easily as well! Also, PEDA development has been quite idle for a few years now, and many new interesting features a debugger can provide simply do not exist. What if my GDB is < 8.0 ? GDB was introduced with its Python support early 2011 with the release of GDB 7. A (very) long way has gone since and the Python API has been massively improved, and GEF is taking advantage of them to provide the coolest features with as little performance impact as possible. Currently, GEF is optimized for running against GDB version 8.0+, and Python 3.6+. This allows for a best performance and best use of the GDB Python API. However, GEF can run on older versions too, check out the version compatibility matrix . For really older versions of GDB, you can use gef-legacy which supports a lot of older GDB, and a Python 2/3 compatibility layer. Therefore, it is highly recommended to run GEF with the latest version of GDB. However, all functions should work on a GDB 8.0 and up. If not, send a bug report and provide as much details as possible. If you are running an obsolete version, GEF will show a error and message and exit. Some pre-compiled static binaries for both recent GDB and GDBServer can be downloaded from the gdb-static repository. I cannot get GEF setup!! GEF will work on any GDB 8+ compiled with Python 3.6+ support. You can view that commands that failed to load using gef missing , but this will not affect GEF generally. If you experience problems setting it up on your host, first go to the Discord channel for that. You will find great people there willing to help. Note that the GitHub issue section is to be used to report bugs and GEF issues (like unexpected crash, improper error handling, weird edge case, etc.), not a place to ask for help. All recent distributions ship packaged GDB that should be ready-to-go, with a GDB >= 8.0 and Python 3.6+. Any version higher or equal will work just fine. So you might actually only need to run apt install gdb to get the full-force of GEF. I get a SegFault when starting GDB with GEF A long standing bug in the readline library can make gef crash GDB when displaying certain characters (SOH/ETX). As a result, this would SIGSEGV GDB as gef is loading, a bit like this: root@debian-aarch64:~# gdb -q ./test-bin-aarch64 GEF ready, type `gef' to start, `gef config' to configure 53 commands loaded, using Python engine 3.4 [*] 5 commands could not be loaded, run `gef missing` to know why. [+] Configuration from '/root/.gef.rc' restored Reading symbols from ./bof-aarch64...(no debugging symbols found)...done. Segmentation fault (core dumped) If so, this can be fixed easily by setting the gef.readline_compat variable to True in the ~/.gef.rc file. Something like this: root@debian-aarch64:~# nano ~/.gef.rc [...] [gef] readline_compat = True You can now use all features of gef even on versions of GDB compiled against old readline library. Does GEF prevent the use of other GDB plugins? Definitely not! You can use any other GDB plugin on top of it for an even better debugging experience. Some interesting plugins highly recommended too: !exploitable Voltron Src: @rick2600: terminator + gdb + gef + voltron cc: @snare @ hugsy I want to contribute, where should I head first? I would suggest thoroughly reading this documentation, just having a look to the CONTRIBUTE file of the project to give you pointers. Also a good thing would be to join our Discord channel to get in touch with the people involved/using it. I think I've found a bug, how can I help fixing it? gef is only getting better through people (like you!) using it, but most importantly reporting unexpected behavior. In most locations, Python exceptions will be properly intercepted. If not, gef wraps all commands with a generic exception handler, to disturb as little as possible your debugging session. If it happens, you'll only get to see a message like this: By switching to debug mode, gef will give much more information: gef\u27a4 gef config gef.debug 1 If you think fixing it is in your skills, then send a Pull Request with your patched version, explaining your bug, and what was your solution for it. Otherwise, you can open an issue , give a thorough description of your bug and copy/paste the content from above. This will greatly help for solving the issue. I get weird issues/characters using GDB + Python3, what's up? Chances are you are not using UTF-8. Python3 is highly relying on UTF-8 to display correctly characters of any alphabet and also some cool emojis . When GDB is compiled with Python3, GEF will assume that your current charset is UTF-8 (for instance, en_US.UTF-8 ). Use your $LANG environment variable to tweak this setting. In addition, some unexpected results were observed when your local is not set to English. If you aren't sure, simply run gdb like this: $ LC_ALL=en_US.UTF-8 gdb /path/to/your/binary GDB crashes on ARM memory corruption with gdb_exception_RETURN_MASK_ERROR This issue is NOT GEF related, but GDB's, or more precisely some versions of GDB packaged with Debian/Kali for ARM Original Issue and Mitigation gdb version 7.12, as distributed w/ Raspbian/Kali rolling (only distro's tested,) throws an exception while disassembling ARM binaries when using gef. This is not a gef problem, this is a gdb problem. gef is just the tool that revealed the gdb dain bramage! (The issue was not observed using vanilla gdb/peda/pwndbg) This issue was first noted when using si to step through a simple ARM assembly program (noted above) when instead of exiting cleanly, gdb's disassembly failed with a SIGABRT and threw an exception: gdb_exception_RETURN_MASK_ERROR This turns out to be a known problem (regression) with gdb, and affects gef users running the ARM platform (Raspberry Pi). The mitigation is for ARM users to compile gdb from source and run the latest version, 8.1 as of this writing. Do not file an issue , again it is NOT a bug from GEF, or neither from GDB Python API. Therefore, there is nothing GEF's developers can do about that. The correct solution as mentioned above is to recompile your GDB with a newer (better) version. The whole topic was already internally discussed, so please refer to the issue #206 for the whole story. I still don't have my answer... Where can I go? Discord is your answer: join and talk to us by clicking here If you cannot find the answer to your problem here or on the Discord, then go to the project Issues page and fill up the forms with as much information as you can! How can I use GEF to debug a process in a container? GEF can attach to a process running in a container using gdb --pid=$PID , where $PID is the ID of the running process on the host . To find this, you can use docker top <container ID> -o pid | awk '!/PID/' | xargs -I'{}' pstree -psa {} to view the process tree for the container. sudo may be required to attach to the process, which will depend on your system's security settings. Please note that cross-container debugging may have unexpected issues. Installing gdb and GEF inside the container, or using the official GEF docker image may improve results.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#why-use-gef-over-peda","text":"PEDA is a fantastic tool that provides similar commands to make the exploitation development process smoother. However, PEDA suffers from a major drawbacks, which the code is too fundamentally linked to Intel architectures (x86-32 and x86-64). On the other hand, GEF not only supports all the architecture supported by GDB (currently x86, ARM, AARCH64, MIPS, PowerPC, SPARC) but is designed to integrate new architectures very easily as well! Also, PEDA development has been quite idle for a few years now, and many new interesting features a debugger can provide simply do not exist.","title":"Why use GEF over PEDA?"},{"location":"faq/#what-if-my-gdb-is-80","text":"GDB was introduced with its Python support early 2011 with the release of GDB 7. A (very) long way has gone since and the Python API has been massively improved, and GEF is taking advantage of them to provide the coolest features with as little performance impact as possible. Currently, GEF is optimized for running against GDB version 8.0+, and Python 3.6+. This allows for a best performance and best use of the GDB Python API. However, GEF can run on older versions too, check out the version compatibility matrix . For really older versions of GDB, you can use gef-legacy which supports a lot of older GDB, and a Python 2/3 compatibility layer. Therefore, it is highly recommended to run GEF with the latest version of GDB. However, all functions should work on a GDB 8.0 and up. If not, send a bug report and provide as much details as possible. If you are running an obsolete version, GEF will show a error and message and exit. Some pre-compiled static binaries for both recent GDB and GDBServer can be downloaded from the gdb-static repository.","title":"What if my GDB is &lt; 8.0 ?"},{"location":"faq/#i-cannot-get-gef-setup","text":"GEF will work on any GDB 8+ compiled with Python 3.6+ support. You can view that commands that failed to load using gef missing , but this will not affect GEF generally. If you experience problems setting it up on your host, first go to the Discord channel for that. You will find great people there willing to help. Note that the GitHub issue section is to be used to report bugs and GEF issues (like unexpected crash, improper error handling, weird edge case, etc.), not a place to ask for help. All recent distributions ship packaged GDB that should be ready-to-go, with a GDB >= 8.0 and Python 3.6+. Any version higher or equal will work just fine. So you might actually only need to run apt install gdb to get the full-force of GEF.","title":"I cannot get GEF setup!!"},{"location":"faq/#i-get-a-segfault-when-starting-gdb-with-gef","text":"A long standing bug in the readline library can make gef crash GDB when displaying certain characters (SOH/ETX). As a result, this would SIGSEGV GDB as gef is loading, a bit like this: root@debian-aarch64:~# gdb -q ./test-bin-aarch64 GEF ready, type `gef' to start, `gef config' to configure 53 commands loaded, using Python engine 3.4 [*] 5 commands could not be loaded, run `gef missing` to know why. [+] Configuration from '/root/.gef.rc' restored Reading symbols from ./bof-aarch64...(no debugging symbols found)...done. Segmentation fault (core dumped) If so, this can be fixed easily by setting the gef.readline_compat variable to True in the ~/.gef.rc file. Something like this: root@debian-aarch64:~# nano ~/.gef.rc [...] [gef] readline_compat = True You can now use all features of gef even on versions of GDB compiled against old readline library.","title":"I get a SegFault when starting GDB with GEF"},{"location":"faq/#does-gef-prevent-the-use-of-other-gdb-plugins","text":"Definitely not! You can use any other GDB plugin on top of it for an even better debugging experience. Some interesting plugins highly recommended too: !exploitable Voltron Src: @rick2600: terminator + gdb + gef + voltron cc: @snare @ hugsy","title":"Does GEF prevent the use of other GDB plugins?"},{"location":"faq/#i-want-to-contribute-where-should-i-head-first","text":"I would suggest thoroughly reading this documentation, just having a look to the CONTRIBUTE file of the project to give you pointers. Also a good thing would be to join our Discord channel to get in touch with the people involved/using it.","title":"I want to contribute, where should I head first?"},{"location":"faq/#i-think-ive-found-a-bug-how-can-i-help-fixing-it","text":"gef is only getting better through people (like you!) using it, but most importantly reporting unexpected behavior. In most locations, Python exceptions will be properly intercepted. If not, gef wraps all commands with a generic exception handler, to disturb as little as possible your debugging session. If it happens, you'll only get to see a message like this: By switching to debug mode, gef will give much more information: gef\u27a4 gef config gef.debug 1 If you think fixing it is in your skills, then send a Pull Request with your patched version, explaining your bug, and what was your solution for it. Otherwise, you can open an issue , give a thorough description of your bug and copy/paste the content from above. This will greatly help for solving the issue.","title":"I think I've found a bug, how can I help fixing it?"},{"location":"faq/#i-get-weird-issuescharacters-using-gdb-python3-whats-up","text":"Chances are you are not using UTF-8. Python3 is highly relying on UTF-8 to display correctly characters of any alphabet and also some cool emojis . When GDB is compiled with Python3, GEF will assume that your current charset is UTF-8 (for instance, en_US.UTF-8 ). Use your $LANG environment variable to tweak this setting. In addition, some unexpected results were observed when your local is not set to English. If you aren't sure, simply run gdb like this: $ LC_ALL=en_US.UTF-8 gdb /path/to/your/binary","title":"I get weird issues/characters using GDB + Python3, what's up?"},{"location":"faq/#gdb-crashes-on-arm-memory-corruption-with-gdb_exception_return_mask_error","text":"This issue is NOT GEF related, but GDB's, or more precisely some versions of GDB packaged with Debian/Kali for ARM Original Issue and Mitigation gdb version 7.12, as distributed w/ Raspbian/Kali rolling (only distro's tested,) throws an exception while disassembling ARM binaries when using gef. This is not a gef problem, this is a gdb problem. gef is just the tool that revealed the gdb dain bramage! (The issue was not observed using vanilla gdb/peda/pwndbg) This issue was first noted when using si to step through a simple ARM assembly program (noted above) when instead of exiting cleanly, gdb's disassembly failed with a SIGABRT and threw an exception: gdb_exception_RETURN_MASK_ERROR This turns out to be a known problem (regression) with gdb, and affects gef users running the ARM platform (Raspberry Pi). The mitigation is for ARM users to compile gdb from source and run the latest version, 8.1 as of this writing. Do not file an issue , again it is NOT a bug from GEF, or neither from GDB Python API. Therefore, there is nothing GEF's developers can do about that. The correct solution as mentioned above is to recompile your GDB with a newer (better) version. The whole topic was already internally discussed, so please refer to the issue #206 for the whole story.","title":"GDB crashes on ARM memory corruption with gdb_exception_RETURN_MASK_ERROR"},{"location":"faq/#i-still-dont-have-my-answer-where-can-i-go","text":"Discord is your answer: join and talk to us by clicking here If you cannot find the answer to your problem here or on the Discord, then go to the project Issues page and fill up the forms with as much information as you can!","title":"I still don't have my answer... Where can I go?"},{"location":"faq/#how-can-i-use-gef-to-debug-a-process-in-a-container","text":"GEF can attach to a process running in a container using gdb --pid=$PID , where $PID is the ID of the running process on the host . To find this, you can use docker top <container ID> -o pid | awk '!/PID/' | xargs -I'{}' pstree -psa {} to view the process tree for the container. sudo may be required to attach to the process, which will depend on your system's security settings. Please note that cross-container debugging may have unexpected issues. Installing gdb and GEF inside the container, or using the official GEF docker image may improve results.","title":"How can I use GEF to debug a process in a container?"},{"location":"install/","text":"Installing GEF Prerequisites GDB Only GDB 8 and higher is required. It must be compiled with Python 3.6 or higher support. For most people, simply using your distribution package manager should be enough. As of January 2020, GEF officially doesn't support Python 2 any longer, due to Python 2 becoming officially deprecated. GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that gef-legacy won't provide new features, and only functional bugs will be handled. You can verify it with the following command: $ gdb -nx -ex 'pi print(sys.version)' -ex quit This should display your version of Python compiled with gdb . $ gdb -nx -ex 'pi print(sys.version)' -ex quit 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] Python dependencies There are none : GEF works out of the box! GEF itself provides most (if not all \ud83e\udd2f) features required for typical sessions. However, GEF can be easily extended via - community-built scripts, functions and architectures in the repo gef-extras (see below) - your own script which can leverage the GEF API for the heavy lifting Standalone Quick install The quickest way to get started with GEF is through the installation script available. Simply make sure you have GDB 8.0 or higher , compiled with Python 3.6 or higher, and run bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" Or if you prefer wget bash -c \"$(wget https://gef.blah.cat/sh -O -)\" Alternatively from inside gdb directly: $ gdb -q (gdb) pi import urllib.request as u, tempfile as t; g=t.NamedTemporaryFile(suffix='-gef.py'); open(g.name, 'wb+').write(u.urlopen('https://tinyurl.com/gef-main').read()); gdb.execute('source %s' % g.name) That's it! GEF is installed and correctly set up. You can confirm it by checking the ~/.gdbinit file and see a line that sources (i.e. loads) GEF. $ cat ~/.gdbinit source ~/.gdbinit-gef.py Update If your host/VM is connected to the Internet, you can update gef easily to the latest version (even without git installed). with python /path/to/gef.py --update $ python ~/.gdbinit-gef.py --update Updated This will deploy the latest version of gef 's main branch from Github. If no updates are available, gef will respond No update instead. Using git To contribute to GEF, you might prefer using git directly. $ git clone --branch dev https://github.com/hugsy/gef.git $ echo source `pwd`/gef/gef.py >> ~/.gdbinit GEF is in very active development, so the default branch is dev . This is the branch you must use if you intend to submit pull requests. However if you prefer a more stable life, you can then switch to the main branch: $ git checkout main The main branch gets only updated for new releases, or also when critical fixes occur and need to be patched urgently. Community repository: GEF-Extras GEF was built to also provide a solid base for external scripts. The repository gef-extras is an open repository where anyone can freely submit their own commands to extend GDB via GEF's API. To benefit from it: # using the automated way ## via the install script $ bash -c \"$(wget https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh -O -)\" # or manually ## clone the repo $ git clone --branch main https://github.com/hugsy/gef-extras.git ## then specify gef to load this directory $ gdb -ex 'gef config gef.extra_plugins_dir \"/path/to/gef-extras/scripts\"' -ex 'gef save' -ex quit [+] Configuration saved You can also use the structures defined from this repository: $ gdb -ex 'gef config pcustom.struct_path \"/path/to/gef-extras/structs\"' -ex 'gef save' -ex quit [+] Configuration saved There, you're now fully equipped epic pwnage with all GEF's goodness!! Uninstalling GEF Prevent script loading GDB provides the -nx command line flag to disable the commands from the ~/.gdbinit to be executed. gdb -nx Disable GEF To disable GEF without removing it, go to editing ~/.gdbinit , spot the line that sources GEF, and comment / delete that line: So: $ cat ~/.gdbinit source /my/path/to/gef.py Will become: $ cat ~/.gdbinit # source /my/path/to/gef.py Restart GDB, GEF is gone. Note that you can also load GEF at any moment during your GDB session as such: $ gdb (gdb) source /my/path/to/gef.py Remove GEF GEF is a one-file GDB script. Therefore, to remove GEF simply spot the location it was installed (for example, by using ~/.gdbinit ) and delete the file. If a configuration file was created, it will be located as ~/.gef.rc and can also be deleted: $ cat ~/.gdbinit # source /my/path/to/gef.py $ rm /my/path/to/gef.py ~/.gef.rc GEF is totally removed from your system.","title":"Installation"},{"location":"install/#installing-gef","text":"","title":"Installing GEF"},{"location":"install/#prerequisites","text":"","title":"Prerequisites"},{"location":"install/#gdb","text":"Only GDB 8 and higher is required. It must be compiled with Python 3.6 or higher support. For most people, simply using your distribution package manager should be enough. As of January 2020, GEF officially doesn't support Python 2 any longer, due to Python 2 becoming officially deprecated. GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that gef-legacy won't provide new features, and only functional bugs will be handled. You can verify it with the following command: $ gdb -nx -ex 'pi print(sys.version)' -ex quit This should display your version of Python compiled with gdb . $ gdb -nx -ex 'pi print(sys.version)' -ex quit 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0]","title":"GDB"},{"location":"install/#python-dependencies","text":"There are none : GEF works out of the box! GEF itself provides most (if not all \ud83e\udd2f) features required for typical sessions. However, GEF can be easily extended via - community-built scripts, functions and architectures in the repo gef-extras (see below) - your own script which can leverage the GEF API for the heavy lifting","title":"Python dependencies"},{"location":"install/#standalone","text":"","title":"Standalone"},{"location":"install/#quick-install","text":"The quickest way to get started with GEF is through the installation script available. Simply make sure you have GDB 8.0 or higher , compiled with Python 3.6 or higher, and run bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" Or if you prefer wget bash -c \"$(wget https://gef.blah.cat/sh -O -)\" Alternatively from inside gdb directly: $ gdb -q (gdb) pi import urllib.request as u, tempfile as t; g=t.NamedTemporaryFile(suffix='-gef.py'); open(g.name, 'wb+').write(u.urlopen('https://tinyurl.com/gef-main').read()); gdb.execute('source %s' % g.name) That's it! GEF is installed and correctly set up. You can confirm it by checking the ~/.gdbinit file and see a line that sources (i.e. loads) GEF. $ cat ~/.gdbinit source ~/.gdbinit-gef.py","title":"Quick install"},{"location":"install/#update","text":"If your host/VM is connected to the Internet, you can update gef easily to the latest version (even without git installed). with python /path/to/gef.py --update $ python ~/.gdbinit-gef.py --update Updated This will deploy the latest version of gef 's main branch from Github. If no updates are available, gef will respond No update instead.","title":"Update"},{"location":"install/#using-git","text":"To contribute to GEF, you might prefer using git directly. $ git clone --branch dev https://github.com/hugsy/gef.git $ echo source `pwd`/gef/gef.py >> ~/.gdbinit GEF is in very active development, so the default branch is dev . This is the branch you must use if you intend to submit pull requests. However if you prefer a more stable life, you can then switch to the main branch: $ git checkout main The main branch gets only updated for new releases, or also when critical fixes occur and need to be patched urgently.","title":"Using git"},{"location":"install/#community-repository-gef-extras","text":"GEF was built to also provide a solid base for external scripts. The repository gef-extras is an open repository where anyone can freely submit their own commands to extend GDB via GEF's API. To benefit from it: # using the automated way ## via the install script $ bash -c \"$(wget https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh -O -)\" # or manually ## clone the repo $ git clone --branch main https://github.com/hugsy/gef-extras.git ## then specify gef to load this directory $ gdb -ex 'gef config gef.extra_plugins_dir \"/path/to/gef-extras/scripts\"' -ex 'gef save' -ex quit [+] Configuration saved You can also use the structures defined from this repository: $ gdb -ex 'gef config pcustom.struct_path \"/path/to/gef-extras/structs\"' -ex 'gef save' -ex quit [+] Configuration saved There, you're now fully equipped epic pwnage with all GEF's goodness!!","title":"Community repository: GEF-Extras"},{"location":"install/#uninstalling-gef","text":"","title":"Uninstalling GEF"},{"location":"install/#prevent-script-loading","text":"GDB provides the -nx command line flag to disable the commands from the ~/.gdbinit to be executed. gdb -nx","title":"Prevent script loading"},{"location":"install/#disable-gef","text":"To disable GEF without removing it, go to editing ~/.gdbinit , spot the line that sources GEF, and comment / delete that line: So: $ cat ~/.gdbinit source /my/path/to/gef.py Will become: $ cat ~/.gdbinit # source /my/path/to/gef.py Restart GDB, GEF is gone. Note that you can also load GEF at any moment during your GDB session as such: $ gdb (gdb) source /my/path/to/gef.py","title":"Disable GEF"},{"location":"install/#remove-gef","text":"GEF is a one-file GDB script. Therefore, to remove GEF simply spot the location it was installed (for example, by using ~/.gdbinit ) and delete the file. If a configuration file was created, it will be located as ~/.gef.rc and can also be deleted: $ cat ~/.gdbinit # source /my/path/to/gef.py $ rm /my/path/to/gef.py ~/.gef.rc GEF is totally removed from your system.","title":"Remove GEF"},{"location":"screenshots/","text":"Screenshots This page illustrates a few of the possibilities available to you when using GEF . Multi-architecture support GEF was designed to support any architecture supported by GDB via an easily extensible architecture API. Currently GEF supports the following architectures: Intel x86 (32b & 64b) ARM (v6/v7) AARCH64 MIPS/MIPS64 PowerPC SPARC/SPARCv9 Features Embedded hexdump view To this day, GDB doesn't come with a hexdump-like view. Well GEF fixes that for you via the hexdump command: Dereferencing data or registers No more endless manual pointer dereferencing x/x style. Just use dereference for that. Or for a comprehensive view of the registers, registers might become your best friend: Heap analysis Detailed view of Glibc Chunks Automatic detection of UaF during runtime Display ELF information ELF structure Security settings Automatic vulnerable string detection Code emulation with Unicorn-Engine (x86-64) Comprehensive address space layout display Defining arbitrary custom structures Highlight custom strings","title":"Showroom"},{"location":"screenshots/#screenshots","text":"This page illustrates a few of the possibilities available to you when using GEF .","title":"Screenshots"},{"location":"screenshots/#multi-architecture-support","text":"GEF was designed to support any architecture supported by GDB via an easily extensible architecture API. Currently GEF supports the following architectures: Intel x86 (32b & 64b) ARM (v6/v7) AARCH64 MIPS/MIPS64 PowerPC SPARC/SPARCv9","title":"Multi-architecture support"},{"location":"screenshots/#features","text":"","title":"Features"},{"location":"screenshots/#embedded-hexdump-view","text":"To this day, GDB doesn't come with a hexdump-like view. Well GEF fixes that for you via the hexdump command:","title":"Embedded hexdump view"},{"location":"screenshots/#dereferencing-data-or-registers","text":"No more endless manual pointer dereferencing x/x style. Just use dereference for that. Or for a comprehensive view of the registers, registers might become your best friend:","title":"Dereferencing data or registers"},{"location":"screenshots/#heap-analysis","text":"","title":"Heap analysis"},{"location":"screenshots/#detailed-view-of-glibc-chunks","text":"","title":"Detailed view of Glibc Chunks"},{"location":"screenshots/#automatic-detection-of-uaf-during-runtime","text":"","title":"Automatic detection of UaF during runtime"},{"location":"screenshots/#display-elf-information","text":"","title":"Display ELF information"},{"location":"screenshots/#elf-structure","text":"","title":"ELF structure"},{"location":"screenshots/#security-settings","text":"","title":"Security settings"},{"location":"screenshots/#automatic-vulnerable-string-detection","text":"","title":"Automatic vulnerable string detection"},{"location":"screenshots/#code-emulation-with-unicorn-engine-x86-64","text":"","title":"Code emulation with Unicorn-Engine (x86-64)"},{"location":"screenshots/#comprehensive-address-space-layout-display","text":"","title":"Comprehensive address space layout display"},{"location":"screenshots/#defining-arbitrary-custom-structures","text":"","title":"Defining arbitrary custom structures"},{"location":"screenshots/#highlight-custom-strings","text":"","title":"Highlight custom strings"},{"location":"testing/","text":"Testing GEF This page describes how GEF testing is done. Any new command/functionality must receive adequate testing to be merged. Also PR failing CI (test + linting) won't be merged either. Prerequisites All the prerequisite packages are in requirements.txt file at the root of the project. So running python -m pip install -r tests/requirements.txt --user -U is enough to get started. Running tests Basic pytest For testing GEF on the architecture on the host running the tests (most cases), simply run cd /root/of/gef python3 -m pytest -v -k not benchmark Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command: gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit At the end, a summary of explanation will be shown, clearly indicating the tests that have failed, for instance: =================================== short test summary info ================================== FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_large - AssertionError: 'siz... FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_small - AssertionError: 'siz... FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_unsorted - AssertionError: '... ======================== 3 failed, 4 passed, 113 deselected in 385.77s (0:06:25)============== You can then use pytest directly to help you fix each error specifically. Using pytest GEF entirely relies on pytest for its testing. Refer to the project documentation for details. Adding a new command requires for extensive testing in a new dedicated test module that should be located in /root/of/gef/tests/commands/my_new_command.py A skeleton of a test module would look something like: \"\"\" `my-command` command test module \"\"\" from tests.utils import GefUnitTestGeneric, gdb_run_cmd, gdb_start_silent_cmd class MyCommandCommand(GefUnitTestGeneric): \"\"\"`my-command` command test module\"\"\" def test_cmd_my_command(self): # `my-command` is expected to fail if the session is not active self.assertFailIfInactiveSession(gdb_run_cmd(\"my-command\")) # `my-command` should never throw an exception in GDB when running res = gdb_start_silent_cmd(\"my-command\") self.assertNoException(res) # it also must print out a \"Hello World\" message self.assertIn(\"Hello World\", res) When running your test, you can summon pytest with the --pdb flag to enter the python testing environment to help you get more information about the reason of failure. One of the most convenient ways to test gef properly is using the pytest integration of modern editors such as VisualStudio Code or PyCharm. Without proper tests, new code will not be integrated. Linting GEF You can use the Makefile at the root of the project to get the proper linting settings. For most cases, the following command is enough: cd /root/of/gef python3 -m pylint --rcfile .pylintrc Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command: gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit Benchmarking GEF Benchmarking relies on pytest-benchmark and is experimental for now. You can run all benchmark test cases as such: cd /root/of/gef pytest -k benchmark which will return (after some time) an execution summary tests/perf/benchmark.py .. [100%] ---------------------------------------- benchmark: 3 tests ----------------------------------- Name (time in ms) Min Max Mean StdDev Median IQR Outliers OPS Rounds Iterations ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- time_baseline 612.2325 (1.0) 630.3416 (1.01) 623.7984 (1.01) 7.2848 (1.64) 626.1485 (1.01) 9.9971 (1.81) 1;0 1.6031 (0.99) 5 1 time_cmd_context 613.8124 (1.00) 625.8964 (1.0) 620.1908 (1.0) 4.4532 (1.0) 619.8831 (1.0) 5.5109 (1.0) 2;0 1.6124 (1.0) 5 1 time_elf_parsing 616.5053 (1.01) 638.6965 (1.02) 628.1588 (1.01) 8.2465 (1.85) 629.0099 (1.01) 10.7885 (1.96) 2;0 1.5920 (0.99) 5 1 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Legend: Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile. OPS: Operations Per Second, computed as 1 / Mean ============================================== 3 passed, 117 deselected in 14.78s =============================================","title":"Testing"},{"location":"testing/#testing-gef","text":"This page describes how GEF testing is done. Any new command/functionality must receive adequate testing to be merged. Also PR failing CI (test + linting) won't be merged either.","title":"Testing GEF"},{"location":"testing/#prerequisites","text":"All the prerequisite packages are in requirements.txt file at the root of the project. So running python -m pip install -r tests/requirements.txt --user -U is enough to get started.","title":"Prerequisites"},{"location":"testing/#running-tests","text":"","title":"Running tests"},{"location":"testing/#basic-pytest","text":"For testing GEF on the architecture on the host running the tests (most cases), simply run cd /root/of/gef python3 -m pytest -v -k not benchmark Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command: gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit At the end, a summary of explanation will be shown, clearly indicating the tests that have failed, for instance: =================================== short test summary info ================================== FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_large - AssertionError: 'siz... FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_small - AssertionError: 'siz... FAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_unsorted - AssertionError: '... ======================== 3 failed, 4 passed, 113 deselected in 385.77s (0:06:25)============== You can then use pytest directly to help you fix each error specifically.","title":"Basic pytest"},{"location":"testing/#using-pytest","text":"GEF entirely relies on pytest for its testing. Refer to the project documentation for details. Adding a new command requires for extensive testing in a new dedicated test module that should be located in /root/of/gef/tests/commands/my_new_command.py A skeleton of a test module would look something like: \"\"\" `my-command` command test module \"\"\" from tests.utils import GefUnitTestGeneric, gdb_run_cmd, gdb_start_silent_cmd class MyCommandCommand(GefUnitTestGeneric): \"\"\"`my-command` command test module\"\"\" def test_cmd_my_command(self): # `my-command` is expected to fail if the session is not active self.assertFailIfInactiveSession(gdb_run_cmd(\"my-command\")) # `my-command` should never throw an exception in GDB when running res = gdb_start_silent_cmd(\"my-command\") self.assertNoException(res) # it also must print out a \"Hello World\" message self.assertIn(\"Hello World\", res) When running your test, you can summon pytest with the --pdb flag to enter the python testing environment to help you get more information about the reason of failure. One of the most convenient ways to test gef properly is using the pytest integration of modern editors such as VisualStudio Code or PyCharm. Without proper tests, new code will not be integrated.","title":"Using pytest"},{"location":"testing/#linting-gef","text":"You can use the Makefile at the root of the project to get the proper linting settings. For most cases, the following command is enough: cd /root/of/gef python3 -m pylint --rcfile .pylintrc Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command: gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit","title":"Linting GEF"},{"location":"testing/#benchmarking-gef","text":"Benchmarking relies on pytest-benchmark and is experimental for now. You can run all benchmark test cases as such: cd /root/of/gef pytest -k benchmark which will return (after some time) an execution summary tests/perf/benchmark.py .. [100%] ---------------------------------------- benchmark: 3 tests ----------------------------------- Name (time in ms) Min Max Mean StdDev Median IQR Outliers OPS Rounds Iterations ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- time_baseline 612.2325 (1.0) 630.3416 (1.01) 623.7984 (1.01) 7.2848 (1.64) 626.1485 (1.01) 9.9971 (1.81) 1;0 1.6031 (0.99) 5 1 time_cmd_context 613.8124 (1.00) 625.8964 (1.0) 620.1908 (1.0) 4.4532 (1.0) 619.8831 (1.0) 5.5109 (1.0) 2;0 1.6124 (1.0) 5 1 time_elf_parsing 616.5053 (1.01) 638.6965 (1.02) 628.1588 (1.01) 8.2465 (1.85) 629.0099 (1.01) 10.7885 (1.96) 2;0 1.5920 (0.99) 5 1 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Legend: Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile. OPS: Operations Per Second, computed as 1 / Mean ============================================== 3 passed, 117 deselected in 14.78s =============================================","title":"Benchmarking GEF"},{"location":"api/gef/","text":"module GEF Global Variables GEF_DEFAULT_BRANCH GEF_EXTRAS_DEFAULT_BRANCH GDB_MIN_VERSION GDB_VERSION PYTHON_MIN_VERSION PYTHON_VERSION DEFAULT_PAGE_ALIGN_SHIFT DEFAULT_PAGE_SIZE GEF_TEMP_DIR GEF_MAX_STRING_LENGTH LIBC_HEAP_MAIN_ARENA_DEFAULT_NAME ANSI_SPLIT_RE LEFT_ARROW RIGHT_ARROW DOWN_ARROW HORIZONTAL_LINE VERTICAL_LINE CROSS TICK BP_GLYPH GEF_PROMPT GEF_PROMPT_ON GEF_PROMPT_OFF PATTERN_LIBC_VERSION PREFIX gdb_initial_settings cmd gef errmsg function http_get http_get(url: str) \u2192 Union[bytes, NoneType] Basic HTTP wrapper for GET request. Return the body of the page if HTTP code is OK, otherwise return None. function update_gef update_gef(argv: List[str]) \u2192 int Try to update gef to the latest version pushed on GitHub main branch. Return 0 on success, 1 on failure. function reset_all_caches reset_all_caches() \u2192 None Free all caches. If an object is cached, it will have a callable attribute cache_clear which will be invoked to purge the function cache. function reset reset() \u2192 None function highlight_text highlight_text(text: str) \u2192 str Highlight text using gef.ui.highlight_table { match -> color } settings. If RegEx is enabled it will create a match group around all items in the gef.ui.highlight_table and wrap the specified color in the gef.ui.highlight_table around those matches. If RegEx is disabled, split by ANSI codes and 'colorify' each match found within the specified string. function gef_print gef_print(*args: str, end='\\n', sep=' ', **kwargs: Any) \u2192 None Wrapper around print(), using string buffering feature. function bufferize bufferize(f: Callable) \u2192 Callable Store the content to be printed for a function in memory, and flush it on function exit. function p8 p8( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one byte respecting the current architecture endianness. function p16 p16( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one word respecting the current architecture endianness. function p32 p32( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one dword respecting the current architecture endianness. function p64 p64( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one qword respecting the current architecture endianness. function u8 u8( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one byte respecting the current architecture endianness. function u16 u16( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one word respecting the current architecture endianness. function u32 u32( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one dword respecting the current architecture endianness. function u64 u64( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one qword respecting the current architecture endianness. function is_ascii_string is_ascii_string(address: int) \u2192 bool Helper function to determine if the buffer pointed by address is an ASCII string (in GDB) function is_alive is_alive() \u2192 bool Check if GDB is running. function calling_function calling_function() \u2192 Union[str, NoneType] Return the name of the calling function function only_if_gdb_running only_if_gdb_running(f: Callable) \u2192 Callable Decorator wrapper to check if GDB is running. function only_if_gdb_target_local only_if_gdb_target_local(f: Callable) \u2192 Callable Decorator wrapper to check if GDB is running locally (target not remote). function deprecated deprecated(solution: str = '') \u2192 Callable Decorator to add a warning when a command is obsolete and will be removed. function experimental_feature experimental_feature(f: Callable) \u2192 Callable Decorator to add a warning when a feature is experimental. function only_if_events_supported only_if_events_supported(event_type: str) \u2192 Callable Checks if GDB supports events without crashing. function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function wrapped_f wrapped_f(*args: Any, **kwargs: Any) \u2192 Any function FakeExit FakeExit(*args: Any, **kwargs: Any) \u2192 NoReturn function parse_arguments parse_arguments( required_arguments: Dict[Union[str, Tuple[str, str]], Any], optional_arguments: Dict[Union[str, Tuple[str, str]], Any] ) \u2192 Callable Argument parsing decorator. function titlify titlify( text: str, color: Optional[str] = None, msg_color: Optional[str] = None ) \u2192 str Print a centered title. function dbg dbg(msg: str) \u2192 None function err err(msg: str) \u2192 None function warn warn(msg: str) \u2192 None function ok ok(msg: str) \u2192 None function info info(msg: str) \u2192 None function push_context_message push_context_message(level: str, message: str) \u2192 None Push the message to be displayed the next time the context is invoked. function show_last_exception show_last_exception() \u2192 None Display the last Python exception. function gef_pystring gef_pystring(x: bytes) \u2192 str Returns a sanitized version as string of the bytes list given in input. function gef_pybytes gef_pybytes(x: str) \u2192 bytes Returns an immutable bytes list from the string given as input. function style_byte style_byte(b: int, color: bool = True) \u2192 str function hexdump hexdump( source: ByteString, length: int = 16, separator: str = '.', show_raw: bool = False, show_symbol: bool = True, base: int = 0 ) \u2192 str Return the hexdump of src argument. @param source MUST be of type bytes or bytearray @param length is the length of items per line @param separator is the default character to use if one byte is not printable @param show_raw if True, do not add the line nor the text translation @param base is the start address of the block being hexdump @return a string with the hexdump function is_debug is_debug() \u2192 bool Check if debug mode is enabled. function hide_context hide_context() \u2192 bool Helper function to hide the context pane. function unhide_context unhide_context() \u2192 bool Helper function to unhide the context pane. function enable_redirect_output enable_redirect_output(to_file: str = '/dev/null') \u2192 None Redirect all GDB output to to_file parameter. By default, to_file redirects to /dev/null . function disable_redirect_output disable_redirect_output() \u2192 None Disable the output redirection, if any. function gef_makedirs gef_makedirs(path: str, mode: int = 493) \u2192 Path Recursive mkdir() creation. If successful, return the absolute path of the directory created. function gdb_disassemble gdb_disassemble( start_pc: int, **kwargs: int ) \u2192 Generator[__main__.Instruction, NoneType, NoneType] Disassemble instructions from start_pc (Integer). Accepts the following named parameters: - end_pc (Integer) only instructions whose start address fall in the interval from start_pc to end_pc are returned. - count (Integer) list at most this many disassembled instructions If end_pc and count are not provided, the function will behave as if count=1 . Return an iterator of Instruction objects function gdb_get_nth_previous_instruction_address gdb_get_nth_previous_instruction_address( addr: int, n: int ) \u2192 Union[int, NoneType] Return the address (Integer) of the n -th instruction before addr . function gdb_get_nth_next_instruction_address gdb_get_nth_next_instruction_address(addr: int, n: int) \u2192 int Return the address (Integer) of the n -th instruction after addr . function gef_instruction_n gef_instruction_n(addr: int, n: int) \u2192 Instruction Return the n -th instruction after addr as an Instruction object. function gef_get_instruction_at gef_get_instruction_at(addr: int) \u2192 Instruction Return the full Instruction found at the specified address. function gef_current_instruction gef_current_instruction(addr: int) \u2192 Instruction Return the current instruction as an Instruction object. function gef_next_instruction gef_next_instruction(addr: int) \u2192 Instruction Return the next instruction as an Instruction object. function gef_disassemble gef_disassemble( addr: int, nb_insn: int, nb_prev: int = 0 ) \u2192 Generator[__main__.Instruction, NoneType, NoneType] Disassemble nb_insn instructions after addr and nb_prev before addr . Return an iterator of Instruction objects. function gef_execute_external gef_execute_external( command: Sequence[str], as_list: bool = False, **kwargs: Any ) \u2192 Union[str, List[str]] Execute an external command and return the result. function gef_execute_gdb_script gef_execute_gdb_script(commands: str) \u2192 None Execute the parameter source as GDB command. This is done by writing commands to a temporary file, which is then executed via GDB source command. The tempfile is then deleted. function checksec checksec(filename: str) \u2192 Dict[str, bool] checksec is DEPRECATED and will be removed in the future. Use Elf(fname).checksec() function get_entry_point get_entry_point() \u2192 Union[int, NoneType] Return the binary entry point. get_entry_point is DEPRECATED and will be removed in the future. Use gef.binary.entry_point instead function is_pie is_pie(fpath: str) \u2192 bool function is_big_endian is_big_endian() \u2192 bool is_big_endian is DEPRECATED and will be removed in the future. Prefer gef.arch.endianness == Endianness.BIG_ENDIAN function is_little_endian is_little_endian() \u2192 bool is_little_endian is DEPRECATED and will be removed in the future. gef.arch.endianness == Endianness.LITTLE_ENDIAN function flags_to_human flags_to_human(reg_value: int, value_table: Dict[int, str]) \u2192 str Return a human readable string showing the flag states. function register_architecture register_architecture( cls: Type[ForwardRef('Architecture')] ) \u2192 Type[ForwardRef('Architecture')] register_architecture is DEPRECATED and will be removed in the future. Using the decorator register_architecture is unecessary function copy_to_clipboard copy_to_clipboard(data: bytes) \u2192 None Helper function to submit data to the clipboard function use_stdtype use_stdtype() \u2192 str function use_default_type use_default_type() \u2192 str function use_golang_type use_golang_type() \u2192 str function use_rust_type use_rust_type() \u2192 str function to_unsigned_long to_unsigned_long(v: gdb.Value) \u2192 int Cast a gdb.Value to unsigned long. function get_path_from_info_proc get_path_from_info_proc() \u2192 Union[str, NoneType] function get_os get_os() \u2192 str get_os is DEPRECATED and will be removed in the future. Use gef.session.os function get_filepath get_filepath() \u2192 Union[str, NoneType] Return the local absolute path of the file currently debugged. function get_function_length get_function_length(sym: str) \u2192 int Attempt to get the length of the raw bytes of a function. function process_lookup_address process_lookup_address(address: int) \u2192 Union[__main__.Section, NoneType] Look up for an address in memory. Return an Address object if found, None otherwise. function xor xor(data: ByteString, key: str) \u2192 bytearray Return data xor-ed with key . function is_hex is_hex(pattern: str) \u2192 bool Return whether provided string is a hexadecimal value. function continue_handler continue_handler(_: 'gdb.Event') \u2192 None GDB event handler for new object continue cases. function hook_stop_handler hook_stop_handler(_: 'gdb.StopEvent') \u2192 None GDB event handler for stop cases. function new_objfile_handler new_objfile_handler(evt: Optional[ForwardRef('gdb.NewObjFileEvent')]) \u2192 None GDB event handler for new object file cases. function exit_handler exit_handler(_: 'gdb.ExitedEvent') \u2192 None GDB event handler for exit cases. function memchanged_handler memchanged_handler(_: 'gdb.MemoryChangedEvent') \u2192 None GDB event handler for mem changes cases. function regchanged_handler regchanged_handler(_: 'gdb.RegisterChangedEvent') \u2192 None GDB event handler for reg changes cases. function get_terminal_size get_terminal_size() \u2192 Tuple[int, int] Return the current terminal size. function reset_architecture reset_architecture(arch: Optional[str] = None) \u2192 None Sets the current architecture. If an architecture is explicitly specified by parameter, try to use that one. If this fails, an OSError exception will occur. If no architecture is specified, then GEF will attempt to determine automatically based on the current ELF target. If this fails, an OSError exception will occur. function get_memory_alignment get_memory_alignment(in_bits: bool = False) \u2192 int Try to determine the size of a pointer on this system. First, try to parse it out of the ELF header. Next, use the size of size_t . Finally, try the size of $pc. If in_bits is set to True, the result is returned in bits, otherwise in bytes. get_memory_alignment is DEPRECATED and will be removed in the future. Use gef.arch.ptrsize instead function clear_screen clear_screen(tty: str = '') \u2192 None Clear the screen. function format_address format_address(addr: int) \u2192 str Format the address according to its size. function format_address_spaces format_address_spaces(addr: int, left: bool = True) \u2192 str Format the address according to its size, but with spaces instead of zeroes. function align_address align_address(address: int) \u2192 int Align the provided address to the process's native length. function align_address_to_size align_address_to_size(address: int, align: int) \u2192 int Align the address to the given size. function align_address_to_page align_address_to_page(address: int) \u2192 int Align the address to a page. function parse_address parse_address(address: str) \u2192 int Parse an address and return it as an Integer. function is_in_x86_kernel is_in_x86_kernel(address: int) \u2192 bool function is_remote_debug is_remote_debug() \u2192 bool \"Return True is the current debugging session is running through GDB remote session. function de_bruijn de_bruijn(alphabet: bytes, n: int) \u2192 Generator[str, NoneType, NoneType] De Bruijn sequence for alphabet and subsequences of length n (for compat. w/ pwnlib). function generate_cyclic_pattern generate_cyclic_pattern(length: int, cycle: int = 4) \u2192 bytearray Create a length byte bytearray of a de Bruijn cyclic pattern. function safe_parse_and_eval safe_parse_and_eval(value: str) \u2192 Union[ForwardRef('gdb.Value'), NoneType] GEF wrapper for gdb.parse_and_eval(): this function returns None instead of raising gdb.error if the eval failed. function gef_convenience gef_convenience(value: Union[str, bytes]) \u2192 str Defines a new convenience value. function parse_string_range parse_string_range(s: str) \u2192 Iterator[int] Parses an address range (e.g. 0x400000-0x401000) function gef_get_pie_breakpoint gef_get_pie_breakpoint(num: int) \u2192 PieVirtualBreakpoint gef_get_pie_breakpoint is DEPRECATED and will be removed in the future. Use gef.session.pie_breakpoints[num] function endian_str endian_str() \u2192 str endian_str is DEPRECATED and will be removed in the future. Use str(gef.arch.endianness) instead function get_gef_setting get_gef_setting(name: str) \u2192 Any get_gef_setting is DEPRECATED and will be removed in the future. Use gef.config[key] function set_gef_setting set_gef_setting(name: str, value: Any) \u2192 None set_gef_setting is DEPRECATED and will be removed in the future. Use gef.config[key] = value function gef_getpagesize gef_getpagesize() \u2192 int gef_getpagesize is DEPRECATED and will be removed in the future. Use gef.session.pagesize function gef_read_canary gef_read_canary() \u2192 Union[Tuple[int, int], NoneType] gef_read_canary is DEPRECATED and will be removed in the future. Use gef.session.canary function get_pid get_pid() \u2192 int get_pid is DEPRECATED and will be removed in the future. Use gef.session.pid function get_filename get_filename() \u2192 str get_filename is DEPRECATED and will be removed in the future. Use gef.session.file.name function get_glibc_arena get_glibc_arena() \u2192 Union[__main__.GlibcArena, NoneType] get_glibc_arena is DEPRECATED and will be removed in the future. Use gef.heap.main_arena function get_register get_register(regname) \u2192 Union[int, NoneType] get_register is DEPRECATED and will be removed in the future. Use gef.arch.register(regname) function get_process_maps get_process_maps() \u2192 List[__main__.Section] get_process_maps is DEPRECATED and will be removed in the future. Use gef.memory.maps function set_arch set_arch(arch: Optional[str] = None, _: Optional[str] = None) \u2192 None set_arch is DEPRECATED and will be removed in the future. Use reset_architecture function register_external_context_pane register_external_context_pane( pane_name: str, display_pane_function: Callable[[], NoneType], pane_title_function: Callable[[], Optional[str]], condition: Optional[Callable[[], bool]] = None ) \u2192 None Registering function for new GEF Context View. pane_name: a string that has no spaces (used in settings) display_pane_function: a function that uses gef_print() to print strings pane_title_function: a function that returns a string or None, which will be displayed as the title. If None, no title line is displayed. condition: an optional callback: if not None, the callback will be executed first. If it returns true, then only the pane title and content will displayed. Otherwise, it's simply skipped. Example usage for a simple text to show when we hit a syscall: def only_syscall(): return gef_current_instruction(gef.arch.pc).is_syscall() def display_pane(): gef_print(\"Wow, I am a context pane!\") def pane_title(): return \"example:pane\" register_external_context_pane(\"example_pane\", display_pane, pane_title, only_syscall) function register_external_command register_external_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Registering function for new GEF (sub-)command to GDB. register_external_command is DEPRECATED and will be removed in the future. Use register() , and inherit from GenericCommand instead function register_command register_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Decorator for registering new GEF (sub-)command to GDB. register_command is DEPRECATED and will be removed in the future. Use register() , and inherit from GenericCommand instead function register_priority_command register_priority_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Decorator for registering new command with priority, meaning that it must loaded before the other generic commands. register_priority_command is DEPRECATED and will be removed in the future. function register register( cls: Union[Type[ForwardRef('GenericCommand')], Type[ForwardRef('GenericFunction')]] ) \u2192 Union[Type[ForwardRef('GenericCommand')], Type[ForwardRef('GenericFunction')]] function register_function register_function( cls: Type[ForwardRef('GenericFunction')] ) \u2192 Type[ForwardRef('GenericFunction')] Decorator for registering a new convenience function to GDB. register_function is DEPRECATED and will be removed in the future. class AARCH64 property AARCH64.cpsr property AARCH64.endianness property AARCH64.fp property AARCH64.instruction_length property AARCH64.pc property AARCH64.ptrsize Determine the size of pointer from the current CPU mode property AARCH64.registers property AARCH64.sp function AARCH64.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function AARCH64.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function AARCH64.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int function AARCH64.is_aarch32 is_aarch32() \u2192 bool Determine if the CPU is currently in AARCH32 mode from runtime. function AARCH64.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function AARCH64.is_call is_call(insn: __main__.Instruction) \u2192 bool function AARCH64.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function AARCH64.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function AARCH64.is_thumb is_thumb() \u2192 bool Determine if the machine is currently in THUMB mode. function AARCH64.is_thumb32 is_thumb32() \u2192 bool Determine if the CPU is currently in THUMB32 mode from runtime. function AARCH64.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function AARCH64.register register(name: str) \u2192 int function AARCH64.reset_caches reset_caches() \u2192 None function AARCH64.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class ARM property ARM.cpsr property ARM.endianness property ARM.fp property ARM.instruction_length property ARM.mode property ARM.pc property ARM.ptrsize property ARM.registers property ARM.sp function ARM.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function ARM.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function ARM.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int function ARM.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function ARM.is_call is_call(insn: __main__.Instruction) \u2192 bool function ARM.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function ARM.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function ARM.is_thumb is_thumb() \u2192 bool Determine if the machine is currently in THUMB mode. function ARM.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function ARM.register register(name: str) \u2192 int function ARM.reset_caches reset_caches() \u2192 None function ARM.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class ASLRCommand View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not attached). This command allows to change that setting. function ASLRCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ASLRCommand.settings Return the list of settings for this command. function ASLRCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ASLRCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ASLRCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ASLRCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ASLRCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ASLRCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ASLRCommand.post_load post_load() \u2192 None function ASLRCommand.pre_load pre_load() \u2192 None function ASLRCommand.usage usage() \u2192 None class Address GEF representation of memory addresses. function Address.__init__ __init__(**kwargs: Any) \u2192 None property Address.valid function Address.dereference dereference() \u2192 Union[int, NoneType] function Address.is_in_heap_segment is_in_heap_segment() \u2192 bool function Address.is_in_stack_segment is_in_stack_segment() \u2192 bool function Address.is_in_text_segment is_in_text_segment() \u2192 bool class AliasesAddCommand Command to add aliases. function AliasesAddCommand.__init__ __init__() \u2192 None property AliasesAddCommand.settings Return the list of settings for this command. function AliasesAddCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function AliasesAddCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function AliasesAddCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function AliasesAddCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function AliasesAddCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function AliasesAddCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function AliasesAddCommand.post_load post_load() \u2192 None function AliasesAddCommand.pre_load pre_load() \u2192 None function AliasesAddCommand.usage usage() \u2192 None class AliasesCommand Base command to add, remove, or list aliases. function AliasesCommand.__init__ __init__() \u2192 None property AliasesCommand.settings Return the list of settings for this command. function AliasesCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function AliasesCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function AliasesCommand.do_invoke do_invoke(_: List[str]) \u2192 None function AliasesCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function AliasesCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function AliasesCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function AliasesCommand.post_load post_load() \u2192 None function AliasesCommand.pre_load pre_load() \u2192 None function AliasesCommand.usage usage() \u2192 None class AliasesListCommand Command to list aliases. function AliasesListCommand.__init__ __init__() \u2192 None property AliasesListCommand.settings Return the list of settings for this command. function AliasesListCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function AliasesListCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function AliasesListCommand.do_invoke do_invoke(_: List[str]) \u2192 None function AliasesListCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function AliasesListCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function AliasesListCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function AliasesListCommand.post_load post_load() \u2192 None function AliasesListCommand.pre_load pre_load() \u2192 None function AliasesListCommand.usage usage() \u2192 None class AliasesRmCommand Command to remove aliases. function AliasesRmCommand.__init__ __init__() \u2192 None property AliasesRmCommand.settings Return the list of settings for this command. function AliasesRmCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function AliasesRmCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function AliasesRmCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function AliasesRmCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function AliasesRmCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function AliasesRmCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function AliasesRmCommand.post_load post_load() \u2192 None function AliasesRmCommand.pre_load pre_load() \u2192 None function AliasesRmCommand.usage usage() \u2192 None class Architecture Generic metaclass for the architecture supported by GEF. property Architecture.endianness property Architecture.fp property Architecture.pc property Architecture.ptrsize property Architecture.registers property Architecture.sp function Architecture.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function Architecture.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function Architecture.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function Architecture.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function Architecture.is_call is_call(insn: __main__.Instruction) \u2192 bool function Architecture.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function Architecture.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function Architecture.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function Architecture.register register(name: str) \u2192 int function Architecture.reset_caches reset_caches() \u2192 None function Architecture.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class ArchitectureBase Class decorator for declaring an architecture to GEF. class BssBaseFunction Return the current bss base address plus the given offset. function BssBaseFunction.__init__ __init__() \u2192 None function BssBaseFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function BssBaseFunction.do_invoke do_invoke(args: List) \u2192 int function BssBaseFunction.invoke invoke(*args: Any) \u2192 int class CanaryCommand Shows the canary value of the current process. function CanaryCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property CanaryCommand.settings Return the list of settings for this command. function CanaryCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function CanaryCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function CanaryCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function CanaryCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function CanaryCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function CanaryCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function CanaryCommand.post_load post_load() \u2192 None function CanaryCommand.pre_load pre_load() \u2192 None function CanaryCommand.usage usage() \u2192 None class ChangeFdCommand ChangeFdCommand: redirect file descriptor during runtime. function ChangeFdCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ChangeFdCommand.settings Return the list of settings for this command. function ChangeFdCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ChangeFdCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ChangeFdCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ChangeFdCommand.get_fd_from_result get_fd_from_result(res: str) \u2192 int function ChangeFdCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ChangeFdCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ChangeFdCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ChangeFdCommand.post_load post_load() \u2192 None function ChangeFdCommand.pre_load pre_load() \u2192 None function ChangeFdCommand.usage usage() \u2192 None class ChangePermissionBreakpoint When hit, this temporary breakpoint will restore the original code, and position $pc correctly. function ChangePermissionBreakpoint.__init__ __init__(loc: str, code: ByteString, pc: int) \u2192 None function ChangePermissionBreakpoint.stop stop() \u2192 bool class ChecksecCommand Checksec the security properties of the current executable or passed as argument. The command checks for the following protections: - PIE - NX - RelRO - Glibc Stack Canaries - Fortify Source function ChecksecCommand.__init__ __init__() \u2192 None property ChecksecCommand.settings Return the list of settings for this command. function ChecksecCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ChecksecCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ChecksecCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ChecksecCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ChecksecCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ChecksecCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ChecksecCommand.post_load post_load() \u2192 None function ChecksecCommand.pre_load pre_load() \u2192 None function ChecksecCommand.print_security_properties print_security_properties(filename: str) \u2192 None function ChecksecCommand.usage usage() \u2192 None class Color Used to colorify terminal output. function Color.blinkify blinkify(msg: str) \u2192 str function Color.blueify blueify(msg: str) \u2192 str function Color.boldify boldify(msg: str) \u2192 str function Color.colorify colorify(text: str, attrs: str) \u2192 str Color text according to the given attributes. function Color.cyanify cyanify(msg: str) \u2192 str function Color.grayify grayify(msg: str) \u2192 str function Color.greenify greenify(msg: str) \u2192 str function Color.highlightify highlightify(msg: str) \u2192 str function Color.light_grayify light_grayify(msg: str) \u2192 str function Color.pinkify pinkify(msg: str) \u2192 str function Color.redify redify(msg: str) \u2192 str function Color.underlinify underlinify(msg: str) \u2192 str function Color.yellowify yellowify(msg: str) \u2192 str class ContextCommand Displays a comprehensive and modular summary of runtime context. Unless setting enable is set to False, this command will be spawned automatically every time GDB hits a breakpoint, a watchpoint, or any kind of interrupt. By default, it will show panes that contain the register states, the stack, and the disassembly code around $pc. function ContextCommand.__init__ __init__() \u2192 None property ContextCommand.settings Return the list of settings for this command. function ContextCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ContextCommand.addr_has_breakpoint addr_has_breakpoint(address: int, bp_locations: List[str]) \u2192 bool function ContextCommand.context_additional_information context_additional_information() \u2192 None function ContextCommand.context_args context_args() \u2192 None function ContextCommand.context_code context_code() \u2192 None function ContextCommand.context_memory context_memory() \u2192 None function ContextCommand.context_regs context_regs() \u2192 None function ContextCommand.context_source context_source() \u2192 None function ContextCommand.context_stack context_stack() \u2192 None function ContextCommand.context_threads context_threads() \u2192 None function ContextCommand.context_title context_title(m: Optional[str]) \u2192 None function ContextCommand.context_trace context_trace() \u2192 None function ContextCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ContextCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ContextCommand.empty_extra_messages empty_extra_messages(_) \u2192 None function ContextCommand.get_pc_context_info get_pc_context_info(pc: int, line: str) \u2192 str function ContextCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ContextCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ContextCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ContextCommand.line_has_breakpoint line_has_breakpoint( file_name: str, line_number: int, bp_locations: List[str] ) \u2192 bool function ContextCommand.post_load post_load() \u2192 None function ContextCommand.pre_load pre_load() \u2192 None function ContextCommand.print_arguments_from_symbol print_arguments_from_symbol(function_name: str, symbol: 'gdb.Symbol') \u2192 None If symbols were found, parse them and print the argument adequately. function ContextCommand.print_guessed_arguments print_guessed_arguments(function_name: str) \u2192 None When no symbol, read the current basic block and look for \"interesting\" instructions. function ContextCommand.show_legend show_legend() \u2192 None function ContextCommand.update_registers update_registers(_) \u2192 None function ContextCommand.usage usage() \u2192 None class DereferenceCommand Dereference recursively from an address and display information. This acts like WinDBG dps command. function DereferenceCommand.__init__ __init__() \u2192 None property DereferenceCommand.settings Return the list of settings for this command. function DereferenceCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function DereferenceCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function DereferenceCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function DereferenceCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function DereferenceCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function DereferenceCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function DereferenceCommand.post_load post_load() \u2192 None function DereferenceCommand.pprint_dereferenced pprint_dereferenced(addr: int, idx: int, base_offset: int = 0) \u2192 str function DereferenceCommand.pre_load pre_load() \u2192 None function DereferenceCommand.usage usage() \u2192 None class DetailRegistersCommand Display full details on one, many or all registers value from current architecture. function DetailRegistersCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property DetailRegistersCommand.settings Return the list of settings for this command. function DetailRegistersCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function DetailRegistersCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function DetailRegistersCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function DetailRegistersCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function DetailRegistersCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function DetailRegistersCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function DetailRegistersCommand.post_load post_load() \u2192 None function DetailRegistersCommand.pre_load pre_load() \u2192 None function DetailRegistersCommand.usage usage() \u2192 None class DisableContextOutputContext class Elf Basic ELF parsing. Ref: - http://www.skyfree.org/linux/references/ELF_Format.pdf - https://refspecs.linuxfoundation.org/elf/elfspec_ppc.pdf - https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html function Elf.__init__ __init__(path: Union[str, pathlib.Path]) \u2192 None Instantiate an ELF object. A valid ELF must be provided, or an exception will be thrown. property Elf.checksec Check the security property of the ELF binary. The following properties are: - Canary - NX - PIE - Fortify - Partial/Full RelRO. Return a dict() with the different keys mentioned above, and the boolean associated whether the protection was found. property Elf.entry_point function Elf.is_valid is_valid(path: pathlib.Path) \u2192 bool function Elf.read read(size: int) \u2192 bytes function Elf.read_and_unpack read_and_unpack(fmt: str) \u2192 Tuple[Any, ...] function Elf.seek seek(off: int) \u2192 None class ElfInfoCommand Display a limited subset of ELF header information. If no argument is provided, the command will show information about the current ELF being debugged. function ElfInfoCommand.__init__ __init__() \u2192 None property ElfInfoCommand.settings Return the list of settings for this command. function ElfInfoCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ElfInfoCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ElfInfoCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function ElfInfoCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ElfInfoCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ElfInfoCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ElfInfoCommand.post_load post_load() \u2192 None function ElfInfoCommand.pre_load pre_load() \u2192 None function ElfInfoCommand.usage usage() \u2192 None class Endianness An enumeration. class EntryBreakBreakpoint Breakpoint used internally to stop execution at the most convenient entry point. function EntryBreakBreakpoint.__init__ __init__(location: str) \u2192 None function EntryBreakBreakpoint.stop stop() \u2192 bool class EntryPointBreakCommand Tries to find best entry point and sets a temporary breakpoint on it. The command will test for well-known symbols for entry points, such as main , _main , __libc_start_main , etc. defined by the setting entrypoint_symbols . function EntryPointBreakCommand.__init__ __init__() \u2192 None property EntryPointBreakCommand.settings Return the list of settings for this command. function EntryPointBreakCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function EntryPointBreakCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function EntryPointBreakCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function EntryPointBreakCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function EntryPointBreakCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function EntryPointBreakCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function EntryPointBreakCommand.post_load post_load() \u2192 None function EntryPointBreakCommand.pre_load pre_load() \u2192 None function EntryPointBreakCommand.set_init_tbreak set_init_tbreak(addr: int) \u2192 EntryBreakBreakpoint function EntryPointBreakCommand.set_init_tbreak_pie set_init_tbreak_pie(addr: int, argv: List[str]) \u2192 EntryBreakBreakpoint function EntryPointBreakCommand.usage usage() \u2192 None class ExternalStructureManager function ExternalStructureManager.__init__ __init__() \u2192 None property ExternalStructureManager.modules property ExternalStructureManager.path property ExternalStructureManager.structures handler ExternalStructureManager.find function ExternalStructureManager.clear_caches clear_caches() \u2192 None class FileFormat function FileFormat.__init__ __init__(path: Union[str, pathlib.Path]) \u2192 None function FileFormat.is_valid is_valid(path: pathlib.Path) \u2192 bool class FileFormatSection class FlagsCommand Edit flags in a human friendly way. function FlagsCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property FlagsCommand.settings Return the list of settings for this command. function FlagsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function FlagsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function FlagsCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function FlagsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function FlagsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function FlagsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function FlagsCommand.post_load post_load() \u2192 None function FlagsCommand.pre_load pre_load() \u2192 None function FlagsCommand.usage usage() \u2192 None class FormatStringBreakpoint Inspect stack for format string. function FormatStringBreakpoint.__init__ __init__(spec: str, num_args: int) \u2192 None function FormatStringBreakpoint.stop stop() \u2192 bool class FormatStringSearchCommand Exploitable format-string helper: this command will set up specific breakpoints at well-known dangerous functions (printf, snprintf, etc.), and check if the pointer holding the format string is writable, and therefore susceptible to format string attacks if an attacker can control its content. function FormatStringSearchCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property FormatStringSearchCommand.settings Return the list of settings for this command. function FormatStringSearchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function FormatStringSearchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function FormatStringSearchCommand.do_invoke do_invoke(_: List[str]) \u2192 None function FormatStringSearchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function FormatStringSearchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function FormatStringSearchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function FormatStringSearchCommand.post_load post_load() \u2192 None function FormatStringSearchCommand.pre_load pre_load() \u2192 None function FormatStringSearchCommand.usage usage() \u2192 None class GdbRemoveReadlineFinder function GdbRemoveReadlineFinder.find_module find_module(fullname, path=None) function GdbRemoveReadlineFinder.load_module load_module(fullname) class Gef The GEF root class, which serves as a entrypoint for all the debugging session attributes (architecture, memory, settings, etc.). function Gef.__init__ __init__() \u2192 None function Gef.reinitialize_managers reinitialize_managers() \u2192 None Reinitialize the managers. Avoid calling this function directly, using pi reset() is preferred function Gef.reset_caches reset_caches() \u2192 None Recursively clean the cache of all the managers. Avoid calling this function directly, using reset-cache is preferred function Gef.setup setup() \u2192 None Setup initialize the runtime setup, which may require for the gef to be not None. class GefAlias Simple aliasing wrapper because GDB doesn't do what it should. function GefAlias.__init__ __init__( alias: str, command: str, completer_class: int = 0, command_class: int = -1 ) \u2192 None function GefAlias.invoke invoke(args: Any, from_tty: bool) \u2192 None function GefAlias.lookup_command lookup_command(cmd: str) \u2192 Union[Tuple[str, __main__.GenericCommand], NoneType] class GefCommand GEF main command: view all new commands by typing gef . function GefCommand.__init__ __init__() \u2192 None property GefCommand.loaded_command_names property GefCommand.loaded_commands property GefCommand.loaded_functions property GefCommand.missing_commands function GefCommand.add_context_pane add_context_pane( pane_name: str, display_pane_function: Callable, pane_title_function: Callable, condition: Optional[Callable] ) \u2192 None Add a new context pane to ContextCommand. function GefCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None function GefCommand.load load() \u2192 None Load all the commands and functions defined by GEF into GDB. function GefCommand.load_extra_plugins load_extra_plugins() \u2192 int function GefCommand.setup setup() \u2192 None function GefCommand.show_banner show_banner() \u2192 None class GefConfigCommand GEF configuration sub-command This command will help set/view GEF settings for the current debugging session. It is possible to make those changes permanent by running gef save (refer to this command help), and/or restore previously saved settings by running gef restore (refer help). function GefConfigCommand.__init__ __init__() \u2192 None function GefConfigCommand.complete complete(text: str, word: str) \u2192 List[str] function GefConfigCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GefConfigCommand.print_setting print_setting(plugin_name: str, verbose: bool = False) \u2192 None function GefConfigCommand.print_settings print_settings() \u2192 None function GefConfigCommand.set_setting set_setting(argv: Tuple[str, Any]) \u2192 None class GefFunctionsCommand List the convenience functions provided by GEF. function GefFunctionsCommand.__init__ __init__() \u2192 None property GefFunctionsCommand.settings Return the list of settings for this command. function GefFunctionsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GefFunctionsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GefFunctionsCommand.do_invoke do_invoke(argv) \u2192 None function GefFunctionsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GefFunctionsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GefFunctionsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GefFunctionsCommand.post_load post_load() \u2192 None function GefFunctionsCommand.pre_load pre_load() \u2192 None function GefFunctionsCommand.usage usage() \u2192 None class GefHeapManager Class managing session heap. function GefHeapManager.__init__ __init__() \u2192 None property GefHeapManager.arenas property GefHeapManager.base_address property GefHeapManager.chunks property GefHeapManager.main_arena property GefHeapManager.malloc_alignment property GefHeapManager.min_chunk_size property GefHeapManager.selected_arena function GefHeapManager.csize2tidx csize2tidx(size: int) \u2192 int function GefHeapManager.malloc_align_address malloc_align_address(address: int) \u2192 int Align addresses according to glibc's MALLOC_ALIGNMENT. See also Issue #689 on Github function GefHeapManager.reset_caches reset_caches() \u2192 None function GefHeapManager.tidx2size tidx2size(idx: int) \u2192 int class GefHelpCommand GEF help sub-command. function GefHelpCommand.__init__ __init__() \u2192 None function GefHelpCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None class GefInstallExtraScriptCommand gef install command: installs one or more scripts from the gef-extras script repo. Note that the command doesn't check for external dependencies the script(s) might require. function GefInstallExtraScriptCommand.__init__ __init__() \u2192 None function GefInstallExtraScriptCommand.invoke invoke(argv: str, from_tty: bool) \u2192 None class GefLibcManager Class managing everything libc-related (except heap). function GefLibcManager.__init__ __init__() \u2192 None property GefLibcManager.version function GefLibcManager.reset_caches reset_caches() \u2192 None Reset the LRU-cached attributes class GefManager function GefManager.reset_caches reset_caches() \u2192 None Reset the LRU-cached attributes class GefMemoryManager Class that manages memory access for gef. function GefMemoryManager.__init__ __init__() \u2192 None property GefMemoryManager.maps function GefMemoryManager.read read(addr: int, length: int = 16) \u2192 bytes Return a length long byte array with the copy of the process memory at addr . function GefMemoryManager.read_ascii_string read_ascii_string(address: int) \u2192 Union[str, NoneType] Read an ASCII string from memory function GefMemoryManager.read_cstring read_cstring( address: int, max_length: int = 50, encoding: Optional[str] = None ) \u2192 str Return a C-string read from memory. function GefMemoryManager.read_integer read_integer(addr: int) \u2192 int Return an integer read from memory. function GefMemoryManager.reset_caches reset_caches() \u2192 None function GefMemoryManager.write write(address: int, buffer: ByteString, length: int = 16) \u2192 None Write buffer at address address . class GefMissingCommand GEF missing sub-command Display the GEF commands that could not be loaded, along with the reason of why they could not be loaded. function GefMissingCommand.__init__ __init__() \u2192 None function GefMissingCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None class GefRemoteSessionManager Class for managing remote sessions with GEF. It will create a temporary environment designed to clone the remote one. function GefRemoteSessionManager.__init__ __init__( host: str, port: int, pid: int = -1, qemu: Optional[pathlib.Path] = None ) \u2192 None property GefRemoteSessionManager.auxiliary_vector property GefRemoteSessionManager.canary Returns a tuple of the canary address and value, read from the auxiliary vector. property GefRemoteSessionManager.cwd property GefRemoteSessionManager.file Path to the file being debugged as seen by the remote endpoint. property GefRemoteSessionManager.lfile Local path to the file being debugged. property GefRemoteSessionManager.maps property GefRemoteSessionManager.os Return the current OS. property GefRemoteSessionManager.pagesize Get the system page size property GefRemoteSessionManager.pid Return the PID of the target process. property GefRemoteSessionManager.root property GefRemoteSessionManager.target function GefRemoteSessionManager.close close() \u2192 None function GefRemoteSessionManager.connect connect(pid: int) \u2192 bool Connect to remote target. If in extended mode, also attach to the given PID. function GefRemoteSessionManager.in_qemu_user in_qemu_user() \u2192 bool function GefRemoteSessionManager.remote_objfile_event_handler remote_objfile_event_handler(evt: 'gdb.NewObjFileEvent') \u2192 None function GefRemoteSessionManager.reset_caches reset_caches() \u2192 None function GefRemoteSessionManager.setup setup() \u2192 bool function GefRemoteSessionManager.sync sync(src: str, dst: Optional[str] = None) \u2192 bool Copy the src into the temporary chroot. If dst is provided, that path will be used instead of src . class GefRestoreCommand GEF restore sub-command. Loads settings from file '~/.gef.rc' and apply them to the configuration of GEF. function GefRestoreCommand.__init__ __init__() \u2192 None function GefRestoreCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GefRestoreCommand.reload reload(quiet: bool) class GefRunCommand Override GDB run commands with the context from GEF. Simple wrapper for GDB run command to use arguments set from gef set args . function GefRunCommand.__init__ __init__() \u2192 None function GefRunCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None class GefSaveCommand GEF save sub-command. Saves the current configuration of GEF to disk (by default in file '~/.gef.rc'). function GefSaveCommand.__init__ __init__() \u2192 None function GefSaveCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None class GefSessionManager Class managing the runtime properties of GEF. function GefSessionManager.__init__ __init__() \u2192 None property GefSessionManager.auxiliary_vector property GefSessionManager.canary Returns a tuple of the canary address and value, read from the auxiliary vector. property GefSessionManager.cwd property GefSessionManager.file Return a Path object of the target process. property GefSessionManager.maps Returns the Path to the procfs entry for the memory mapping. property GefSessionManager.os Return the current OS. property GefSessionManager.pagesize Get the system page size property GefSessionManager.pid Return the PID of the target process. property GefSessionManager.root Returns the path to the process's root directory. function GefSessionManager.reset_caches reset_caches() \u2192 None class GefSetCommand Override GDB set commands with the context from GEF. function GefSetCommand.__init__ __init__() \u2192 None function GefSetCommand.invoke invoke(args: Any, from_tty: bool) \u2192 None class GefSetting Basic class for storing gef settings as objects function GefSetting.__init__ __init__( value: Any, cls: Optional[type] = None, description: Optional[str] = None, hooks: Optional[Dict[str, Callable]] = None ) \u2192 None class GefSettingsManager GefSettings acts as a dict where the global settings are stored and can be read, written or deleted as any other dict. For instance, to read a specific command setting: gef.config[mycommand.mysetting] function GefSettingsManager.raw_entry raw_entry(name: str) \u2192 GefSetting class GefThemeCommand Customize GEF appearance. function GefThemeCommand.__init__ __init__() \u2192 None property GefThemeCommand.settings Return the list of settings for this command. function GefThemeCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GefThemeCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GefThemeCommand.do_invoke do_invoke(args: List[str]) \u2192 None function GefThemeCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GefThemeCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GefThemeCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GefThemeCommand.post_load post_load() \u2192 None function GefThemeCommand.pre_load pre_load() \u2192 None function GefThemeCommand.usage usage() \u2192 None class GefTmuxSetup Setup a confortable tmux debugging environment. function GefTmuxSetup.__init__ __init__() \u2192 None function GefTmuxSetup.invoke invoke(args: Any, from_tty: bool) \u2192 None function GefTmuxSetup.screen_setup screen_setup() \u2192 None Hackish equivalent of the tmux_setup() function for screen. function GefTmuxSetup.tmux_setup tmux_setup() \u2192 None Prepare the tmux environment by vertically splitting the current pane, and forcing the context to be redirected there. class GefUiManager Class managing UI settings. function GefUiManager.__init__ __init__() \u2192 None function GefUiManager.reset_caches reset_caches() \u2192 None Reset the LRU-cached attributes class GenericArchitecture property GenericArchitecture.endianness property GenericArchitecture.fp property GenericArchitecture.pc property GenericArchitecture.ptrsize property GenericArchitecture.registers property GenericArchitecture.sp function GenericArchitecture.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function GenericArchitecture.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function GenericArchitecture.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function GenericArchitecture.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function GenericArchitecture.is_call is_call(insn: __main__.Instruction) \u2192 bool function GenericArchitecture.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function GenericArchitecture.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function GenericArchitecture.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function GenericArchitecture.register register(name: str) \u2192 int function GenericArchitecture.reset_caches reset_caches() \u2192 None function GenericArchitecture.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class GenericCommand This is an abstract class for invoking commands, should not be instantiated. function GenericCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property GenericCommand.settings Return the list of settings for this command. function GenericCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GenericCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GenericCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function GenericCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GenericCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GenericCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GenericCommand.post_load post_load() \u2192 None function GenericCommand.pre_load pre_load() \u2192 None function GenericCommand.usage usage() \u2192 None class GenericFunction This is an abstract class for invoking convenience functions, should not be instantiated. function GenericFunction.__init__ __init__() \u2192 None function GenericFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function GenericFunction.do_invoke do_invoke(args: Any) \u2192 int function GenericFunction.invoke invoke(*args: Any) \u2192 int class GlibcArena Glibc arena class function GlibcArena.__init__ __init__(addr: str) \u2192 None property GlibcArena.addr property GlibcArena.address property GlibcArena.attached_threads property GlibcArena.binmap property GlibcArena.bins property GlibcArena.fastbinsY property GlibcArena.last_remainder property GlibcArena.max_system_mem property GlibcArena.next property GlibcArena.next_free property GlibcArena.sizeof property GlibcArena.system_mem property GlibcArena.top function GlibcArena.bin bin(i: int) \u2192 Tuple[int, int] function GlibcArena.bin_at bin_at(i) \u2192 int function GlibcArena.fastbin fastbin(i: int) \u2192 Union[ForwardRef('GlibcFastChunk'), NoneType] Return head chunk in fastbinsY[i]. function GlibcArena.get_heap_for_ptr get_heap_for_ptr(ptr: int) \u2192 int Find the corresponding heap for a given pointer (int). See https://github.com/bminor/glibc/blob/glibc-2.34/malloc/arena.c#L129 function GlibcArena.get_heap_info_list get_heap_info_list() \u2192 Union[List[__main__.GlibcHeapInfo], NoneType] function GlibcArena.heap_addr heap_addr(allow_unaligned: bool = False) \u2192 Union[int, NoneType] function GlibcArena.is_main_arena is_main_arena() \u2192 bool function GlibcArena.malloc_state_t malloc_state_t() \u2192 Type[_ctypes.Structure] function GlibcArena.reset reset() class GlibcChunk Glibc chunk class. The default behavior (from_base=False) is to interpret the data starting at the memory address pointed to as the chunk data. Setting from_base to True instead treats that data as the chunk header. Ref: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. function GlibcChunk.__init__ __init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None property GlibcChunk.bk property GlibcChunk.bk_nextsize property GlibcChunk.fd property GlibcChunk.fd_nextsize property GlibcChunk.flags property GlibcChunk.prev_size property GlibcChunk.size property GlibcChunk.usable_size function GlibcChunk.get_next_chunk get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk function GlibcChunk.get_next_chunk_addr get_next_chunk_addr() \u2192 int function GlibcChunk.get_prev_chunk_size get_prev_chunk_size() \u2192 int function GlibcChunk.get_usable_size get_usable_size() \u2192 int function GlibcChunk.has_m_bit has_m_bit() \u2192 bool function GlibcChunk.has_n_bit has_n_bit() \u2192 bool function GlibcChunk.has_p_bit has_p_bit() \u2192 bool function GlibcChunk.is_used is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true function GlibcChunk.malloc_chunk_t malloc_chunk_t() \u2192 Type[_ctypes.Structure] function GlibcChunk.psprint psprint() \u2192 str function GlibcChunk.reset reset() class GlibcFastChunk function GlibcFastChunk.__init__ __init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None property GlibcFastChunk.bk property GlibcFastChunk.bk_nextsize property GlibcFastChunk.fd property GlibcFastChunk.fd_nextsize property GlibcFastChunk.flags property GlibcFastChunk.prev_size property GlibcFastChunk.size property GlibcFastChunk.usable_size function GlibcFastChunk.get_next_chunk get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk function GlibcFastChunk.get_next_chunk_addr get_next_chunk_addr() \u2192 int function GlibcFastChunk.get_prev_chunk_size get_prev_chunk_size() \u2192 int function GlibcFastChunk.get_usable_size get_usable_size() \u2192 int function GlibcFastChunk.has_m_bit has_m_bit() \u2192 bool function GlibcFastChunk.has_n_bit has_n_bit() \u2192 bool function GlibcFastChunk.has_p_bit has_p_bit() \u2192 bool function GlibcFastChunk.is_used is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true function GlibcFastChunk.malloc_chunk_t malloc_chunk_t() \u2192 Type[_ctypes.Structure] function GlibcFastChunk.protect_ptr protect_ptr(pos: int, pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339 function GlibcFastChunk.psprint psprint() \u2192 str function GlibcFastChunk.reset reset() function GlibcFastChunk.reveal_ptr reveal_ptr(pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341 class GlibcHeapArenaCommand Display information on a heap chunk. function GlibcHeapArenaCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property GlibcHeapArenaCommand.settings Return the list of settings for this command. function GlibcHeapArenaCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapArenaCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapArenaCommand.do_invoke do_invoke(_: List[str]) \u2192 None function GlibcHeapArenaCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapArenaCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapArenaCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapArenaCommand.post_load post_load() \u2192 None function GlibcHeapArenaCommand.pre_load pre_load() \u2192 None function GlibcHeapArenaCommand.usage usage() \u2192 None class GlibcHeapBinsCommand Display information on the bins on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. function GlibcHeapBinsCommand.__init__ __init__() \u2192 None property GlibcHeapBinsCommand.settings Return the list of settings for this command. function GlibcHeapBinsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapBinsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapBinsCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function GlibcHeapBinsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapBinsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapBinsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapBinsCommand.post_load post_load() \u2192 None function GlibcHeapBinsCommand.pprint_bin pprint_bin(arena_addr: str, index: int, _type: str = '') \u2192 int function GlibcHeapBinsCommand.pre_load pre_load() \u2192 None function GlibcHeapBinsCommand.usage usage() \u2192 None class GlibcHeapChunkCommand Display information on a heap chunk. See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. function GlibcHeapChunkCommand.__init__ __init__() \u2192 None property GlibcHeapChunkCommand.settings Return the list of settings for this command. function GlibcHeapChunkCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapChunkCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapChunkCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapChunkCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapChunkCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapChunkCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapChunkCommand.post_load post_load() \u2192 None function GlibcHeapChunkCommand.pre_load pre_load() \u2192 None function GlibcHeapChunkCommand.usage usage() \u2192 None class GlibcHeapChunksCommand Display all heap chunks for the current arena. As an optional argument the base address of a different arena can be passed function GlibcHeapChunksCommand.__init__ __init__() \u2192 None property GlibcHeapChunksCommand.settings Return the list of settings for this command. function GlibcHeapChunksCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapChunksCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapChunksCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapChunksCommand.dump_chunks_arena dump_chunks_arena( arena: __main__.GlibcArena, print_arena: bool = False, allow_unaligned: bool = False ) \u2192 None function GlibcHeapChunksCommand.dump_chunks_heap dump_chunks_heap( start: int, arena: __main__.GlibcArena, allow_unaligned: bool = False ) \u2192 bool function GlibcHeapChunksCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapChunksCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapChunksCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapChunksCommand.post_load post_load() \u2192 None function GlibcHeapChunksCommand.pre_load pre_load() \u2192 None function GlibcHeapChunksCommand.usage usage() \u2192 None class GlibcHeapCommand Base command to get information about the Glibc heap structure. function GlibcHeapCommand.__init__ __init__() \u2192 None property GlibcHeapCommand.settings Return the list of settings for this command. function GlibcHeapCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapCommand.do_invoke do_invoke(_: List[str]) \u2192 None function GlibcHeapCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapCommand.post_load post_load() \u2192 None function GlibcHeapCommand.pre_load pre_load() \u2192 None function GlibcHeapCommand.usage usage() \u2192 None class GlibcHeapFastbinsYCommand Display information on the fastbinsY on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. function GlibcHeapFastbinsYCommand.__init__ __init__() \u2192 None property GlibcHeapFastbinsYCommand.settings Return the list of settings for this command. function GlibcHeapFastbinsYCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapFastbinsYCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapFastbinsYCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapFastbinsYCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapFastbinsYCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapFastbinsYCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapFastbinsYCommand.post_load post_load() \u2192 None function GlibcHeapFastbinsYCommand.pre_load pre_load() \u2192 None function GlibcHeapFastbinsYCommand.usage usage() \u2192 None class GlibcHeapInfo Glibc heap_info struct function GlibcHeapInfo.__init__ __init__(addr: Union[str, int]) \u2192 None property GlibcHeapInfo.addr property GlibcHeapInfo.address property GlibcHeapInfo.sizeof function GlibcHeapInfo.heap_info_t heap_info_t() \u2192 Type[_ctypes.Structure] function GlibcHeapInfo.reset reset() class GlibcHeapLargeBinsCommand Convenience command for viewing large bins. function GlibcHeapLargeBinsCommand.__init__ __init__() \u2192 None property GlibcHeapLargeBinsCommand.settings Return the list of settings for this command. function GlibcHeapLargeBinsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapLargeBinsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapLargeBinsCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapLargeBinsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapLargeBinsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapLargeBinsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapLargeBinsCommand.post_load post_load() \u2192 None function GlibcHeapLargeBinsCommand.pre_load pre_load() \u2192 None function GlibcHeapLargeBinsCommand.usage usage() \u2192 None class GlibcHeapSetArenaCommand Display information on a heap chunk. function GlibcHeapSetArenaCommand.__init__ __init__() \u2192 None property GlibcHeapSetArenaCommand.settings Return the list of settings for this command. function GlibcHeapSetArenaCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapSetArenaCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapSetArenaCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function GlibcHeapSetArenaCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapSetArenaCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapSetArenaCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapSetArenaCommand.post_load post_load() \u2192 None function GlibcHeapSetArenaCommand.pre_load pre_load() \u2192 None function GlibcHeapSetArenaCommand.usage usage() \u2192 None class GlibcHeapSmallBinsCommand Convenience command for viewing small bins. function GlibcHeapSmallBinsCommand.__init__ __init__() \u2192 None property GlibcHeapSmallBinsCommand.settings Return the list of settings for this command. function GlibcHeapSmallBinsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapSmallBinsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapSmallBinsCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapSmallBinsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapSmallBinsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapSmallBinsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapSmallBinsCommand.post_load post_load() \u2192 None function GlibcHeapSmallBinsCommand.pre_load pre_load() \u2192 None function GlibcHeapSmallBinsCommand.usage usage() \u2192 None class GlibcHeapTcachebinsCommand Display information on the Tcachebins on an arena (default: main_arena). See https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc. function GlibcHeapTcachebinsCommand.__init__ __init__() \u2192 None property GlibcHeapTcachebinsCommand.settings Return the list of settings for this command. function GlibcHeapTcachebinsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapTcachebinsCommand.check_thread_ids check_thread_ids(tids: List[int]) \u2192 List[int] Check the validity, dedup, and return all valid tids. function GlibcHeapTcachebinsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapTcachebinsCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function GlibcHeapTcachebinsCommand.find_tcache find_tcache() \u2192 int Return the location of the current thread's tcache. function GlibcHeapTcachebinsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapTcachebinsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapTcachebinsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapTcachebinsCommand.post_load post_load() \u2192 None function GlibcHeapTcachebinsCommand.pre_load pre_load() \u2192 None function GlibcHeapTcachebinsCommand.tcachebin tcachebin( tcache_base: int, i: int ) \u2192 Tuple[Union[__main__.GlibcTcacheChunk, NoneType], int] Return the head chunk in tcache[i] and the number of chunks in the bin. function GlibcHeapTcachebinsCommand.usage usage() \u2192 None class GlibcHeapUnsortedBinsCommand Display information on the Unsorted Bins of an arena (default: main_arena). See: https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1689. function GlibcHeapUnsortedBinsCommand.__init__ __init__() \u2192 None property GlibcHeapUnsortedBinsCommand.settings Return the list of settings for this command. function GlibcHeapUnsortedBinsCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GlibcHeapUnsortedBinsCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GlibcHeapUnsortedBinsCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function GlibcHeapUnsortedBinsCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GlibcHeapUnsortedBinsCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GlibcHeapUnsortedBinsCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GlibcHeapUnsortedBinsCommand.post_load post_load() \u2192 None function GlibcHeapUnsortedBinsCommand.pre_load pre_load() \u2192 None function GlibcHeapUnsortedBinsCommand.usage usage() \u2192 None class GlibcTcacheChunk function GlibcTcacheChunk.__init__ __init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None property GlibcTcacheChunk.bk property GlibcTcacheChunk.bk_nextsize property GlibcTcacheChunk.fd property GlibcTcacheChunk.fd_nextsize property GlibcTcacheChunk.flags property GlibcTcacheChunk.prev_size property GlibcTcacheChunk.size property GlibcTcacheChunk.usable_size function GlibcTcacheChunk.get_next_chunk get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk function GlibcTcacheChunk.get_next_chunk_addr get_next_chunk_addr() \u2192 int function GlibcTcacheChunk.get_prev_chunk_size get_prev_chunk_size() \u2192 int function GlibcTcacheChunk.get_usable_size get_usable_size() \u2192 int function GlibcTcacheChunk.has_m_bit has_m_bit() \u2192 bool function GlibcTcacheChunk.has_n_bit has_n_bit() \u2192 bool function GlibcTcacheChunk.has_p_bit has_p_bit() \u2192 bool function GlibcTcacheChunk.is_used is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true function GlibcTcacheChunk.malloc_chunk_t malloc_chunk_t() \u2192 Type[_ctypes.Structure] function GlibcTcacheChunk.protect_ptr protect_ptr(pos: int, pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339 function GlibcTcacheChunk.psprint psprint() \u2192 str function GlibcTcacheChunk.reset reset() function GlibcTcacheChunk.reveal_ptr reveal_ptr(pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341 class GotBaseFunction Return the current GOT base address plus the given offset. function GotBaseFunction.__init__ __init__() \u2192 None function GotBaseFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function GotBaseFunction.do_invoke do_invoke(args: List) \u2192 int function GotBaseFunction.invoke invoke(*args: Any) \u2192 int class GotCommand Display current status of the got inside the process. function GotCommand.__init__ __init__() property GotCommand.settings Return the list of settings for this command. function GotCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function GotCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function GotCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function GotCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function GotCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function GotCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function GotCommand.post_load post_load() \u2192 None function GotCommand.pre_load pre_load() \u2192 None function GotCommand.usage usage() \u2192 None class HeapAnalysisCommand Heap vulnerability analysis helper: this command aims to track dynamic heap allocation done through malloc()/free() to provide some insights on possible heap vulnerabilities. The following vulnerabilities are checked: - NULL free - Use-after-Free - Double Free - Heap overlap function HeapAnalysisCommand.__init__ __init__() \u2192 None property HeapAnalysisCommand.settings Return the list of settings for this command. function HeapAnalysisCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HeapAnalysisCommand.clean clean(_: 'gdb.Event') \u2192 None function HeapAnalysisCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HeapAnalysisCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function HeapAnalysisCommand.dump_tracked_allocations dump_tracked_allocations() \u2192 None function HeapAnalysisCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HeapAnalysisCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HeapAnalysisCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HeapAnalysisCommand.post_load post_load() \u2192 None function HeapAnalysisCommand.pre_load pre_load() \u2192 None function HeapAnalysisCommand.setup setup() \u2192 None function HeapAnalysisCommand.usage usage() \u2192 None class HeapBaseFunction Return the current heap base address plus an optional offset. function HeapBaseFunction.__init__ __init__() \u2192 None function HeapBaseFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function HeapBaseFunction.do_invoke do_invoke(args: List) \u2192 int function HeapBaseFunction.invoke invoke(*args: Any) \u2192 int class HexdumpByteCommand Display SIZE lines of hexdump as BYTE from the memory location pointed by ADDRESS. function HexdumpByteCommand.__init__ __init__() \u2192 None property HexdumpByteCommand.settings Return the list of settings for this command. function HexdumpByteCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HexdumpByteCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HexdumpByteCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function HexdumpByteCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HexdumpByteCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HexdumpByteCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HexdumpByteCommand.post_load post_load() \u2192 None function HexdumpByteCommand.pre_load pre_load() \u2192 None function HexdumpByteCommand.usage usage() \u2192 None class HexdumpCommand Display SIZE lines of hexdump from the memory location pointed by LOCATION. function HexdumpCommand.__init__ __init__() \u2192 None property HexdumpCommand.settings Return the list of settings for this command. function HexdumpCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HexdumpCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HexdumpCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function HexdumpCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HexdumpCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HexdumpCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HexdumpCommand.post_load post_load() \u2192 None function HexdumpCommand.pre_load pre_load() \u2192 None function HexdumpCommand.usage usage() \u2192 None class HexdumpDwordCommand Display SIZE lines of hexdump as DWORD from the memory location pointed by ADDRESS. function HexdumpDwordCommand.__init__ __init__() \u2192 None property HexdumpDwordCommand.settings Return the list of settings for this command. function HexdumpDwordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HexdumpDwordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HexdumpDwordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function HexdumpDwordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HexdumpDwordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HexdumpDwordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HexdumpDwordCommand.post_load post_load() \u2192 None function HexdumpDwordCommand.pre_load pre_load() \u2192 None function HexdumpDwordCommand.usage usage() \u2192 None class HexdumpQwordCommand Display SIZE lines of hexdump as QWORD from the memory location pointed by ADDRESS. function HexdumpQwordCommand.__init__ __init__() \u2192 None property HexdumpQwordCommand.settings Return the list of settings for this command. function HexdumpQwordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HexdumpQwordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HexdumpQwordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function HexdumpQwordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HexdumpQwordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HexdumpQwordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HexdumpQwordCommand.post_load post_load() \u2192 None function HexdumpQwordCommand.pre_load pre_load() \u2192 None function HexdumpQwordCommand.usage usage() \u2192 None class HexdumpWordCommand Display SIZE lines of hexdump as WORD from the memory location pointed by ADDRESS. function HexdumpWordCommand.__init__ __init__() \u2192 None property HexdumpWordCommand.settings Return the list of settings for this command. function HexdumpWordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HexdumpWordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HexdumpWordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function HexdumpWordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HexdumpWordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HexdumpWordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HexdumpWordCommand.post_load post_load() \u2192 None function HexdumpWordCommand.pre_load pre_load() \u2192 None function HexdumpWordCommand.usage usage() \u2192 None class HighlightAddCommand Add a match to the highlight table. function HighlightAddCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property HighlightAddCommand.settings Return the list of settings for this command. function HighlightAddCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HighlightAddCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HighlightAddCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function HighlightAddCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HighlightAddCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HighlightAddCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HighlightAddCommand.post_load post_load() \u2192 None function HighlightAddCommand.pre_load pre_load() \u2192 None function HighlightAddCommand.usage usage() \u2192 None class HighlightClearCommand Clear the highlight table, remove all matches. function HighlightClearCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property HighlightClearCommand.settings Return the list of settings for this command. function HighlightClearCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HighlightClearCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HighlightClearCommand.do_invoke do_invoke(_: List[str]) \u2192 None function HighlightClearCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HighlightClearCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HighlightClearCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HighlightClearCommand.post_load post_load() \u2192 None function HighlightClearCommand.pre_load pre_load() \u2192 None function HighlightClearCommand.usage usage() \u2192 None class HighlightCommand Highlight user-defined text matches in GEF output universally. function HighlightCommand.__init__ __init__() \u2192 None property HighlightCommand.settings Return the list of settings for this command. function HighlightCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HighlightCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HighlightCommand.do_invoke do_invoke(_: List[str]) \u2192 None function HighlightCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HighlightCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HighlightCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HighlightCommand.post_load post_load() \u2192 None function HighlightCommand.pre_load pre_load() \u2192 None function HighlightCommand.usage usage() \u2192 None class HighlightListCommand Show the current highlight table with matches to colors. function HighlightListCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property HighlightListCommand.settings Return the list of settings for this command. function HighlightListCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HighlightListCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HighlightListCommand.do_invoke do_invoke(_: List[str]) \u2192 None function HighlightListCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HighlightListCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HighlightListCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HighlightListCommand.post_load post_load() \u2192 None function HighlightListCommand.pre_load pre_load() \u2192 None function HighlightListCommand.print_highlight_table print_highlight_table() \u2192 None function HighlightListCommand.usage usage() \u2192 None class HighlightRemoveCommand Remove a match in the highlight table. function HighlightRemoveCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property HighlightRemoveCommand.settings Return the list of settings for this command. function HighlightRemoveCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function HighlightRemoveCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function HighlightRemoveCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function HighlightRemoveCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function HighlightRemoveCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function HighlightRemoveCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function HighlightRemoveCommand.post_load post_load() \u2192 None function HighlightRemoveCommand.pre_load pre_load() \u2192 None function HighlightRemoveCommand.usage usage() \u2192 None class Instruction GEF representation of a CPU instruction. function Instruction.__init__ __init__( address: int, location: str, mnemo: str, operands: List[str], opcodes: bytes ) \u2192 None function Instruction.is_valid is_valid() \u2192 bool function Instruction.size size() \u2192 int class MIPS property MIPS.endianness property MIPS.fp property MIPS.pc property MIPS.ptrsize property MIPS.registers property MIPS.sp function MIPS.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function MIPS.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function MIPS.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function MIPS.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function MIPS.is_call is_call(insn: __main__.Instruction) \u2192 bool function MIPS.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function MIPS.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function MIPS.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function MIPS.register register(name: str) \u2192 int function MIPS.reset_caches reset_caches() \u2192 None function MIPS.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class MIPS64 property MIPS64.endianness property MIPS64.fp property MIPS64.pc property MIPS64.ptrsize property MIPS64.registers property MIPS64.sp function MIPS64.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function MIPS64.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function MIPS64.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function MIPS64.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function MIPS64.is_call is_call(insn: __main__.Instruction) \u2192 bool function MIPS64.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function MIPS64.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function MIPS64.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function MIPS64.register register(name: str) \u2192 int function MIPS64.reset_caches reset_caches() \u2192 None function MIPS64.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] class MemoryCommand Add or remove address ranges to the memory view. function MemoryCommand.__init__ __init__() \u2192 None property MemoryCommand.settings Return the list of settings for this command. function MemoryCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function MemoryCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function MemoryCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function MemoryCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function MemoryCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function MemoryCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function MemoryCommand.post_load post_load() \u2192 None function MemoryCommand.pre_load pre_load() \u2192 None function MemoryCommand.usage usage() \u2192 None class MemoryUnwatchCommand Removes address ranges to the memory view. function MemoryUnwatchCommand.__init__ __init__() \u2192 None property MemoryUnwatchCommand.settings Return the list of settings for this command. function MemoryUnwatchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function MemoryUnwatchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function MemoryUnwatchCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function MemoryUnwatchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function MemoryUnwatchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function MemoryUnwatchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function MemoryUnwatchCommand.post_load post_load() \u2192 None function MemoryUnwatchCommand.pre_load pre_load() \u2192 None function MemoryUnwatchCommand.usage usage() \u2192 None class MemoryWatchCommand Adds address ranges to the memory view. function MemoryWatchCommand.__init__ __init__() \u2192 None property MemoryWatchCommand.settings Return the list of settings for this command. function MemoryWatchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function MemoryWatchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function MemoryWatchCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function MemoryWatchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function MemoryWatchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function MemoryWatchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function MemoryWatchCommand.post_load post_load() \u2192 None function MemoryWatchCommand.pre_load pre_load() \u2192 None function MemoryWatchCommand.usage usage() \u2192 None class MemoryWatchListCommand Lists all watchpoints to display in context layout. function MemoryWatchListCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property MemoryWatchListCommand.settings Return the list of settings for this command. function MemoryWatchListCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function MemoryWatchListCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function MemoryWatchListCommand.do_invoke do_invoke(_: List[str]) \u2192 None function MemoryWatchListCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function MemoryWatchListCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function MemoryWatchListCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function MemoryWatchListCommand.post_load post_load() \u2192 None function MemoryWatchListCommand.pre_load pre_load() \u2192 None function MemoryWatchListCommand.usage usage() \u2192 None class MemoryWatchResetCommand Removes all watchpoints. function MemoryWatchResetCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property MemoryWatchResetCommand.settings Return the list of settings for this command. function MemoryWatchResetCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function MemoryWatchResetCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function MemoryWatchResetCommand.do_invoke do_invoke(_: List[str]) \u2192 None function MemoryWatchResetCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function MemoryWatchResetCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function MemoryWatchResetCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function MemoryWatchResetCommand.post_load post_load() \u2192 None function MemoryWatchResetCommand.pre_load pre_load() \u2192 None function MemoryWatchResetCommand.usage usage() \u2192 None class NamedBreakpoint Breakpoint which shows a specified name, when hit. function NamedBreakpoint.__init__ __init__(location: str, name: str) \u2192 None function NamedBreakpoint.stop stop() \u2192 bool class NamedBreakpointCommand Sets a breakpoint and assigns a name to it, which will be shown, when it's hit. function NamedBreakpointCommand.__init__ __init__() \u2192 None property NamedBreakpointCommand.settings Return the list of settings for this command. function NamedBreakpointCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function NamedBreakpointCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function NamedBreakpointCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function NamedBreakpointCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function NamedBreakpointCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function NamedBreakpointCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function NamedBreakpointCommand.post_load post_load() \u2192 None function NamedBreakpointCommand.pre_load pre_load() \u2192 None function NamedBreakpointCommand.usage usage() \u2192 None class NopCommand Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture aware. function NopCommand.__init__ __init__() \u2192 None property NopCommand.settings Return the list of settings for this command. function NopCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function NopCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function NopCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function NopCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function NopCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function NopCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function NopCommand.post_load post_load() \u2192 None function NopCommand.pre_load pre_load() \u2192 None function NopCommand.usage usage() \u2192 None class PCustomCommand Dump user defined structure. This command attempts to reproduce WinDBG awesome dt command for GDB and allows to apply structures (from symbols or custom) directly to an address. Custom structures can be defined in pure Python using ctypes, and should be stored in a specific directory, whose path must be stored in the pcustom.struct_path configuration setting. function PCustomCommand.__init__ __init__() \u2192 None property PCustomCommand.settings Return the list of settings for this command. function PCustomCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PCustomCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PCustomCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PCustomCommand.explode_type explode_type(arg: str) \u2192 Tuple[str, str] function PCustomCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PCustomCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PCustomCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PCustomCommand.post_load post_load() \u2192 None function PCustomCommand.pre_load pre_load() \u2192 None function PCustomCommand.usage usage() \u2192 None class PCustomEditCommand PCustom: edit the content of a given structure function PCustomEditCommand.__init__ __init__() \u2192 None property PCustomEditCommand.settings Return the list of settings for this command. function PCustomEditCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PCustomEditCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PCustomEditCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PCustomEditCommand.explode_type explode_type(arg: str) \u2192 Tuple[str, str] function PCustomEditCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PCustomEditCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PCustomEditCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PCustomEditCommand.post_load post_load() \u2192 None function PCustomEditCommand.pre_load pre_load() \u2192 None function PCustomEditCommand.usage usage() \u2192 None class PCustomListCommand PCustom: list available structures function PCustomListCommand.__init__ __init__() \u2192 None property PCustomListCommand.settings Return the list of settings for this command. function PCustomListCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PCustomListCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PCustomListCommand.do_invoke do_invoke(_: List) \u2192 None Dump the list of all the structures and their respective. function PCustomListCommand.explode_type explode_type(arg: str) \u2192 Tuple[str, str] function PCustomListCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PCustomListCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PCustomListCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PCustomListCommand.post_load post_load() \u2192 None function PCustomListCommand.pre_load pre_load() \u2192 None function PCustomListCommand.usage usage() \u2192 None class PCustomShowCommand PCustom: show the content of a given structure function PCustomShowCommand.__init__ __init__() \u2192 None property PCustomShowCommand.settings Return the list of settings for this command. function PCustomShowCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PCustomShowCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PCustomShowCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PCustomShowCommand.explode_type explode_type(arg: str) \u2192 Tuple[str, str] function PCustomShowCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PCustomShowCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PCustomShowCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PCustomShowCommand.post_load post_load() \u2192 None function PCustomShowCommand.pre_load pre_load() \u2192 None function PCustomShowCommand.usage usage() \u2192 None class PatchByteCommand Write specified BYTE to the specified address. function PatchByteCommand.__init__ __init__() \u2192 None property PatchByteCommand.settings Return the list of settings for this command. function PatchByteCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchByteCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchByteCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatchByteCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchByteCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchByteCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchByteCommand.post_load post_load() \u2192 None function PatchByteCommand.pre_load pre_load() \u2192 None function PatchByteCommand.usage usage() \u2192 None class PatchCommand Write specified values to the specified address. function PatchCommand.__init__ __init__() \u2192 None property PatchCommand.settings Return the list of settings for this command. function PatchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchCommand.post_load post_load() \u2192 None function PatchCommand.pre_load pre_load() \u2192 None function PatchCommand.usage usage() \u2192 None class PatchDwordCommand Write specified DWORD to the specified address. function PatchDwordCommand.__init__ __init__() \u2192 None property PatchDwordCommand.settings Return the list of settings for this command. function PatchDwordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchDwordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchDwordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatchDwordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchDwordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchDwordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchDwordCommand.post_load post_load() \u2192 None function PatchDwordCommand.pre_load pre_load() \u2192 None function PatchDwordCommand.usage usage() \u2192 None class PatchQwordCommand Write specified QWORD to the specified address. function PatchQwordCommand.__init__ __init__() \u2192 None property PatchQwordCommand.settings Return the list of settings for this command. function PatchQwordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchQwordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchQwordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatchQwordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchQwordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchQwordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchQwordCommand.post_load post_load() \u2192 None function PatchQwordCommand.pre_load pre_load() \u2192 None function PatchQwordCommand.usage usage() \u2192 None class PatchStringCommand Write specified string to the specified memory location pointed by ADDRESS. function PatchStringCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PatchStringCommand.settings Return the list of settings for this command. function PatchStringCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchStringCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchStringCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PatchStringCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchStringCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchStringCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchStringCommand.post_load post_load() \u2192 None function PatchStringCommand.pre_load pre_load() \u2192 None function PatchStringCommand.usage usage() \u2192 None class PatchWordCommand Write specified WORD to the specified address. function PatchWordCommand.__init__ __init__() \u2192 None property PatchWordCommand.settings Return the list of settings for this command. function PatchWordCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatchWordCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatchWordCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatchWordCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatchWordCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatchWordCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatchWordCommand.post_load post_load() \u2192 None function PatchWordCommand.pre_load pre_load() \u2192 None function PatchWordCommand.usage usage() \u2192 None class PatternCommand Generate or Search a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture. function PatternCommand.__init__ __init__() \u2192 None property PatternCommand.settings Return the list of settings for this command. function PatternCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatternCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatternCommand.do_invoke do_invoke(_: List[str]) \u2192 None function PatternCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatternCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatternCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatternCommand.post_load post_load() \u2192 None function PatternCommand.pre_load pre_load() \u2192 None function PatternCommand.usage usage() \u2192 None class PatternCreateCommand Generate a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture. function PatternCreateCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PatternCreateCommand.settings Return the list of settings for this command. function PatternCreateCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatternCreateCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatternCreateCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatternCreateCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatternCreateCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatternCreateCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatternCreateCommand.post_load post_load() \u2192 None function PatternCreateCommand.pre_load pre_load() \u2192 None function PatternCreateCommand.usage usage() \u2192 None class PatternSearchCommand Search a De Bruijn Sequence of unique substrings of length N and a maximum total length of MAX_LENGTH. The default value of N is set to match the currently loaded architecture. The PATTERN argument can be a GDB symbol (such as a register name), a string or a hexadecimal value function PatternSearchCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PatternSearchCommand.settings Return the list of settings for this command. function PatternSearchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PatternSearchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PatternSearchCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PatternSearchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PatternSearchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PatternSearchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PatternSearchCommand.post_load post_load() \u2192 None function PatternSearchCommand.pre_load pre_load() \u2192 None function PatternSearchCommand.search search(pattern: str, size: int, period: int) \u2192 None function PatternSearchCommand.usage usage() \u2192 None class Permission GEF representation of Linux permission. class Phdr function Phdr.__init__ __init__(elf: __main__.Elf, off: int) \u2192 None class PieAttachCommand Do attach with PIE breakpoint support. function PieAttachCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieAttachCommand.settings Return the list of settings for this command. function PieAttachCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieAttachCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieAttachCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PieAttachCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieAttachCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieAttachCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieAttachCommand.post_load post_load() \u2192 None function PieAttachCommand.pre_load pre_load() \u2192 None function PieAttachCommand.usage usage() \u2192 None class PieBreakpointCommand Set a PIE breakpoint at an offset from the target binaries base address. function PieBreakpointCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieBreakpointCommand.settings Return the list of settings for this command. function PieBreakpointCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieBreakpointCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieBreakpointCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PieBreakpointCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieBreakpointCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieBreakpointCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieBreakpointCommand.post_load post_load() \u2192 None function PieBreakpointCommand.pre_load pre_load() \u2192 None function PieBreakpointCommand.set_pie_breakpoint set_pie_breakpoint(set_func: Callable[[int], str], addr: int) \u2192 None function PieBreakpointCommand.usage usage() \u2192 None class PieCommand PIE breakpoint support. function PieCommand.__init__ __init__() \u2192 None property PieCommand.settings Return the list of settings for this command. function PieCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PieCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieCommand.post_load post_load() \u2192 None function PieCommand.pre_load pre_load() \u2192 None function PieCommand.usage usage() \u2192 None class PieDeleteCommand Delete a PIE breakpoint. function PieDeleteCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieDeleteCommand.settings Return the list of settings for this command. function PieDeleteCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieDeleteCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieDeleteCommand.delete_bp delete_bp(breakpoints: List[__main__.PieVirtualBreakpoint]) \u2192 None function PieDeleteCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PieDeleteCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieDeleteCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieDeleteCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieDeleteCommand.post_load post_load() \u2192 None function PieDeleteCommand.pre_load pre_load() \u2192 None function PieDeleteCommand.usage usage() \u2192 None class PieInfoCommand Display breakpoint info. function PieInfoCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieInfoCommand.settings Return the list of settings for this command. function PieInfoCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieInfoCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieInfoCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PieInfoCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieInfoCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieInfoCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieInfoCommand.post_load post_load() \u2192 None function PieInfoCommand.pre_load pre_load() \u2192 None function PieInfoCommand.usage usage() \u2192 None class PieRemoteCommand Attach to a remote connection with PIE breakpoint support. function PieRemoteCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieRemoteCommand.settings Return the list of settings for this command. function PieRemoteCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieRemoteCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieRemoteCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PieRemoteCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieRemoteCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieRemoteCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieRemoteCommand.post_load post_load() \u2192 None function PieRemoteCommand.pre_load pre_load() \u2192 None function PieRemoteCommand.usage usage() \u2192 None class PieRunCommand Run process with PIE breakpoint support. function PieRunCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property PieRunCommand.settings Return the list of settings for this command. function PieRunCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PieRunCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PieRunCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function PieRunCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PieRunCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PieRunCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PieRunCommand.post_load post_load() \u2192 None function PieRunCommand.pre_load pre_load() \u2192 None function PieRunCommand.usage usage() \u2192 None class PieVirtualBreakpoint PIE virtual breakpoint (not real breakpoint). function PieVirtualBreakpoint.__init__ __init__(set_func: Callable[[int], str], vbp_num: int, addr: int) \u2192 None function PieVirtualBreakpoint.destroy destroy() \u2192 None function PieVirtualBreakpoint.instantiate instantiate(base: int) \u2192 None class PowerPC property PowerPC.endianness property PowerPC.fp property PowerPC.pc property PowerPC.registers property PowerPC.sp function PowerPC.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function PowerPC.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function PowerPC.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function PowerPC.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function PowerPC.is_call is_call(insn: __main__.Instruction) \u2192 bool function PowerPC.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function PowerPC.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function PowerPC.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function PowerPC.register register(name: str) \u2192 int function PowerPC.reset_caches reset_caches() \u2192 None function PowerPC.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class PowerPC64 property PowerPC64.endianness property PowerPC64.fp property PowerPC64.pc property PowerPC64.registers property PowerPC64.sp function PowerPC64.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function PowerPC64.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function PowerPC64.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function PowerPC64.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function PowerPC64.is_call is_call(insn: __main__.Instruction) \u2192 bool function PowerPC64.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function PowerPC64.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function PowerPC64.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function PowerPC64.register register(name: str) \u2192 int function PowerPC64.reset_caches reset_caches() \u2192 None function PowerPC64.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class PrintFormatCommand Print bytes format in commonly used formats, such as literals in high level languages. function PrintFormatCommand.__init__ __init__() \u2192 None property PrintFormatCommand.format_matrix property PrintFormatCommand.settings Return the list of settings for this command. function PrintFormatCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function PrintFormatCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function PrintFormatCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function PrintFormatCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function PrintFormatCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function PrintFormatCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function PrintFormatCommand.post_load post_load() \u2192 None function PrintFormatCommand.pre_load pre_load() \u2192 None function PrintFormatCommand.usage usage() \u2192 None class ProcessListingCommand List and filter process. If a PATTERN is given as argument, results shown will be grepped by this pattern. function ProcessListingCommand.__init__ __init__() \u2192 None property ProcessListingCommand.settings Return the list of settings for this command. function ProcessListingCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ProcessListingCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ProcessListingCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function ProcessListingCommand.get_processes get_processes() \u2192 Generator[Dict[str, str], NoneType, NoneType] function ProcessListingCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ProcessListingCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ProcessListingCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ProcessListingCommand.post_load post_load() \u2192 None function ProcessListingCommand.pre_load pre_load() \u2192 None function ProcessListingCommand.usage usage() \u2192 None class ProcessStatusCommand Extends the info given by GDB info proc , by giving an exhaustive description of the process status (file descriptors, ancestor, descendants, etc.). function ProcessStatusCommand.__init__ __init__() \u2192 None property ProcessStatusCommand.settings Return the list of settings for this command. function ProcessStatusCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ProcessStatusCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ProcessStatusCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ProcessStatusCommand.get_children_pids get_children_pids(pid: int) \u2192 List[int] function ProcessStatusCommand.get_cmdline_of get_cmdline_of(pid: int) \u2192 str function ProcessStatusCommand.get_process_path_of get_process_path_of(pid: int) \u2192 str function ProcessStatusCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ProcessStatusCommand.get_state_of get_state_of(pid: int) \u2192 Dict[str, str] function ProcessStatusCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ProcessStatusCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ProcessStatusCommand.list_sockets list_sockets(pid: int) \u2192 List[int] function ProcessStatusCommand.parse_ip_port parse_ip_port(addr: str) \u2192 Tuple[str, int] function ProcessStatusCommand.post_load post_load() \u2192 None function ProcessStatusCommand.pre_load pre_load() \u2192 None function ProcessStatusCommand.show_ancestor show_ancestor() \u2192 None function ProcessStatusCommand.show_connections show_connections() \u2192 None function ProcessStatusCommand.show_descendants show_descendants() \u2192 None function ProcessStatusCommand.show_fds show_fds() \u2192 None function ProcessStatusCommand.show_info_proc show_info_proc() \u2192 None function ProcessStatusCommand.usage usage() \u2192 None class RISCV property RISCV.endianness property RISCV.fp property RISCV.instruction_length property RISCV.pc property RISCV.ptrsize property RISCV.registers property RISCV.sp function RISCV.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function RISCV.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function RISCV.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function RISCV.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function RISCV.is_call is_call(insn: __main__.Instruction) \u2192 bool function RISCV.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function RISCV.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function RISCV.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function RISCV.register register(name: str) \u2192 int function RISCV.reset_caches reset_caches() \u2192 None function RISCV.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class RedirectOutputContext function RedirectOutputContext.__init__ __init__(to: str = '/dev/null') \u2192 None class RemoteCommand GDB target remote command on steroids. This command will use the remote procfs to create a local copy of the execution environment, including the target binary and its libraries in the local temporary directory (the value by default is in gef.config.tempdir ). Additionally, it will fetch all the /proc/PID/maps and loads all its information. If procfs is not available remotely, the command will likely fail. You can however still use the limited command provided by GDB target remote . function RemoteCommand.__init__ __init__() \u2192 None property RemoteCommand.settings Return the list of settings for this command. function RemoteCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function RemoteCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function RemoteCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function RemoteCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function RemoteCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function RemoteCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function RemoteCommand.post_load post_load() \u2192 None function RemoteCommand.pre_load pre_load() \u2192 None function RemoteCommand.usage usage() \u2192 None class ResetCacheCommand Reset cache of all stored data. This command is here for debugging and test purposes, GEF handles properly the cache reset under \"normal\" scenario. function ResetCacheCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ResetCacheCommand.settings Return the list of settings for this command. function ResetCacheCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ResetCacheCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ResetCacheCommand.do_invoke do_invoke(_: List[str]) \u2192 None function ResetCacheCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ResetCacheCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ResetCacheCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ResetCacheCommand.post_load post_load() \u2192 None function ResetCacheCommand.pre_load pre_load() \u2192 None function ResetCacheCommand.usage usage() \u2192 None class SPARC Refs: - https://www.cse.scu.edu/~atkinson/teaching/sp05/259/sparc.pdf property SPARC.endianness property SPARC.fp property SPARC.pc property SPARC.ptrsize property SPARC.registers property SPARC.sp function SPARC.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function SPARC.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function SPARC.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function SPARC.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function SPARC.is_call is_call(insn: __main__.Instruction) \u2192 bool function SPARC.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function SPARC.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function SPARC.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function SPARC.register register(name: str) \u2192 int function SPARC.reset_caches reset_caches() \u2192 None function SPARC.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class SPARC64 Refs: - http://math-atlas.sourceforge.net/devel/assembly/abi_sysV_sparc.pdf - https://cr.yp.to/2005-590/sparcv9.pdf property SPARC64.endianness property SPARC64.fp property SPARC64.pc property SPARC64.ptrsize property SPARC64.registers property SPARC64.sp function SPARC64.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function SPARC64.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function SPARC64.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function SPARC64.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function SPARC64.is_call is_call(insn: __main__.Instruction) \u2192 bool function SPARC64.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function SPARC64.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function SPARC64.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function SPARC64.register register(name: str) \u2192 int function SPARC64.reset_caches reset_caches() \u2192 None function SPARC64.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class ScanSectionCommand Search for addresses that are located in a memory mapping (haystack) that belonging to another (needle). function ScanSectionCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ScanSectionCommand.settings Return the list of settings for this command. function ScanSectionCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ScanSectionCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ScanSectionCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ScanSectionCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ScanSectionCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ScanSectionCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ScanSectionCommand.post_load post_load() \u2192 None function ScanSectionCommand.pre_load pre_load() \u2192 None function ScanSectionCommand.usage usage() \u2192 None class SearchPatternCommand SearchPatternCommand: search a pattern in memory. If given an hex value (starting with 0x) the command will also try to look for upwards cross-references to this address. function SearchPatternCommand.__init__ __init__() \u2192 None property SearchPatternCommand.settings Return the list of settings for this command. function SearchPatternCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function SearchPatternCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function SearchPatternCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function SearchPatternCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function SearchPatternCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function SearchPatternCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function SearchPatternCommand.post_load post_load() \u2192 None function SearchPatternCommand.pre_load pre_load() \u2192 None function SearchPatternCommand.print_loc print_loc(loc: Tuple[int, int, str]) \u2192 None function SearchPatternCommand.print_section print_section(section: __main__.Section) \u2192 None function SearchPatternCommand.search_binpattern_by_address search_binpattern_by_address( binpattern: bytes, start_address: int, end_address: int ) \u2192 List[Tuple[int, int, Union[str, NoneType]]] Search a binary pattern within a range defined by arguments. function SearchPatternCommand.search_pattern search_pattern(pattern: str, section_name: str) \u2192 None Search a pattern within the whole userland memory. function SearchPatternCommand.search_pattern_by_address search_pattern_by_address( pattern: str, start_address: int, end_address: int ) \u2192 List[Tuple[int, int, Union[str, NoneType]]] Search a pattern within a range defined by arguments. function SearchPatternCommand.usage usage() \u2192 None class Section GEF representation of process memory sections. function Section.__init__ __init__(**kwargs: Any) \u2192 None property Section.realpath property Section.size function Section.is_executable is_executable() \u2192 bool function Section.is_readable is_readable() \u2192 bool function Section.is_writable is_writable() \u2192 bool class SectionBaseFunction Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped function SectionBaseFunction.__init__ __init__() \u2192 None function SectionBaseFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function SectionBaseFunction.do_invoke do_invoke(args: List) \u2192 int function SectionBaseFunction.invoke invoke(*args: Any) \u2192 int class Shdr function Shdr.__init__ __init__(elf: Optional[__main__.Elf], off: int) \u2192 None class ShellcodeCommand ShellcodeCommand uses @JonathanSalwan simple-yet-awesome shellcode API to download shellcodes. function ShellcodeCommand.__init__ __init__() \u2192 None property ShellcodeCommand.settings Return the list of settings for this command. function ShellcodeCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ShellcodeCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ShellcodeCommand.do_invoke do_invoke(_: List[str]) \u2192 None function ShellcodeCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ShellcodeCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ShellcodeCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ShellcodeCommand.post_load post_load() \u2192 None function ShellcodeCommand.pre_load pre_load() \u2192 None function ShellcodeCommand.usage usage() \u2192 None class ShellcodeGetCommand Download shellcode from shell-storm's shellcode database. function ShellcodeGetCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ShellcodeGetCommand.settings Return the list of settings for this command. function ShellcodeGetCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ShellcodeGetCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ShellcodeGetCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ShellcodeGetCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ShellcodeGetCommand.get_shellcode get_shellcode(sid: int) \u2192 None function ShellcodeGetCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ShellcodeGetCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ShellcodeGetCommand.post_load post_load() \u2192 None function ShellcodeGetCommand.pre_load pre_load() \u2192 None function ShellcodeGetCommand.usage usage() \u2192 None class ShellcodeSearchCommand Search pattern in shell-storm's shellcode database. function ShellcodeSearchCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property ShellcodeSearchCommand.settings Return the list of settings for this command. function ShellcodeSearchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function ShellcodeSearchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function ShellcodeSearchCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function ShellcodeSearchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function ShellcodeSearchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function ShellcodeSearchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function ShellcodeSearchCommand.post_load post_load() \u2192 None function ShellcodeSearchCommand.pre_load pre_load() \u2192 None function ShellcodeSearchCommand.search_shellcode search_shellcode(search_options: List) \u2192 None function ShellcodeSearchCommand.usage usage() \u2192 None class SmartEvalCommand SmartEval: Smart eval (vague approach to mimic WinDBG ? ). function SmartEvalCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property SmartEvalCommand.settings Return the list of settings for this command. function SmartEvalCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function SmartEvalCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function SmartEvalCommand.distance distance(args: Tuple[str, str]) \u2192 None function SmartEvalCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function SmartEvalCommand.evaluate evaluate(expr: List[str]) \u2192 None function SmartEvalCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function SmartEvalCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function SmartEvalCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function SmartEvalCommand.post_load post_load() \u2192 None function SmartEvalCommand.pre_load pre_load() \u2192 None function SmartEvalCommand.usage usage() \u2192 None class SolveKernelSymbolCommand Solve kernel symbols from kallsyms table. function SolveKernelSymbolCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property SolveKernelSymbolCommand.settings Return the list of settings for this command. function SolveKernelSymbolCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function SolveKernelSymbolCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function SolveKernelSymbolCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function SolveKernelSymbolCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function SolveKernelSymbolCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function SolveKernelSymbolCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function SolveKernelSymbolCommand.post_load post_load() \u2192 None function SolveKernelSymbolCommand.pre_load pre_load() \u2192 None function SolveKernelSymbolCommand.usage usage() \u2192 None class StackOffsetFunction Return the current stack base address plus an optional offset. function StackOffsetFunction.__init__ __init__() \u2192 None function StackOffsetFunction.arg_to_long arg_to_long(args: List, index: int, default: int = 0) \u2192 int function StackOffsetFunction.do_invoke do_invoke(args: List) \u2192 int function StackOffsetFunction.invoke invoke(*args: Any) \u2192 int class StubBreakpoint Create a breakpoint to permanently disable a call (fork/alarm/signal/etc.). function StubBreakpoint.__init__ __init__(func: str, retval: Optional[int]) \u2192 None function StubBreakpoint.stop stop() \u2192 bool class StubCommand Stub out the specified function. This function is useful when needing to skip one function to be called and disrupt your runtime flow (ex. fork). function StubCommand.__init__ __init__() \u2192 None property StubCommand.settings Return the list of settings for this command. function StubCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function StubCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function StubCommand.wrapper wrapper(*args: Any, **kwargs: Any) \u2192 Callable function StubCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function StubCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function StubCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function StubCommand.post_load post_load() \u2192 None function StubCommand.pre_load pre_load() \u2192 None function StubCommand.usage usage() \u2192 None class TraceFreeBreakpoint Track calls to free() and attempts to detect inconsistencies. function TraceFreeBreakpoint.__init__ __init__() \u2192 None function TraceFreeBreakpoint.stop stop() \u2192 bool class TraceFreeRetBreakpoint Internal temporary breakpoint to track free()d values. function TraceFreeRetBreakpoint.__init__ __init__(addr: int) \u2192 None function TraceFreeRetBreakpoint.stop stop() \u2192 bool class TraceMallocBreakpoint Track allocations done with malloc() or calloc(). function TraceMallocBreakpoint.__init__ __init__(name: str) \u2192 None function TraceMallocBreakpoint.stop stop() \u2192 bool class TraceMallocRetBreakpoint Internal temporary breakpoint to retrieve the return value of malloc(). function TraceMallocRetBreakpoint.__init__ __init__(size: int, name: str) \u2192 None function TraceMallocRetBreakpoint.stop stop() \u2192 bool class TraceReallocBreakpoint Track re-allocations done with realloc(). function TraceReallocBreakpoint.__init__ __init__() \u2192 None function TraceReallocBreakpoint.stop stop() \u2192 bool class TraceReallocRetBreakpoint Internal temporary breakpoint to retrieve the return value of realloc(). function TraceReallocRetBreakpoint.__init__ __init__(ptr: int, size: int) \u2192 None function TraceReallocRetBreakpoint.stop stop() \u2192 bool class TraceRunCommand Create a runtime trace of all instructions executed from $pc to LOCATION specified. The trace is stored in a text file that can be next imported in IDA Pro to visualize the runtime path. function TraceRunCommand.__init__ __init__() \u2192 None property TraceRunCommand.settings Return the list of settings for this command. function TraceRunCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function TraceRunCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function TraceRunCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function TraceRunCommand.get_frames_size get_frames_size() \u2192 int function TraceRunCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function TraceRunCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function TraceRunCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function TraceRunCommand.post_load post_load() \u2192 None function TraceRunCommand.pre_load pre_load() \u2192 None function TraceRunCommand.start_tracing start_tracing(loc_start: int, loc_end: int, depth: int) \u2192 None function TraceRunCommand.trace trace(loc_start: int, loc_end: int, depth: int) \u2192 None function TraceRunCommand.usage usage() \u2192 None class UafWatchpoint Custom watchpoints set TraceFreeBreakpoint() to monitor free()d pointers being used. function UafWatchpoint.__init__ __init__(addr: int) \u2192 None function UafWatchpoint.stop stop() \u2192 bool If this method is triggered, we likely have a UaF. Break the execution and report it. class VMMapCommand Display a comprehensive layout of the virtual memory mapping. If a filter argument, GEF will filter out the mapping whose pathname do not match that filter. function VMMapCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property VMMapCommand.settings Return the list of settings for this command. function VMMapCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function VMMapCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function VMMapCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function VMMapCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function VMMapCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function VMMapCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function VMMapCommand.is_integer is_integer(n: str) \u2192 bool function VMMapCommand.post_load post_load() \u2192 None function VMMapCommand.pre_load pre_load() \u2192 None function VMMapCommand.print_entry print_entry(entry: __main__.Section) \u2192 None function VMMapCommand.show_legend show_legend() \u2192 None function VMMapCommand.usage usage() \u2192 None class VersionCommand Display GEF version info. function VersionCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property VersionCommand.settings Return the list of settings for this command. function VersionCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function VersionCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function VersionCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function VersionCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function VersionCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function VersionCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function VersionCommand.post_load post_load() \u2192 None function VersionCommand.pre_load pre_load() \u2192 None function VersionCommand.usage usage() \u2192 None class X86 property X86.endianness property X86.fp property X86.pc property X86.ptrsize property X86.registers property X86.sp function X86.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function X86.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] function X86.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function X86.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function X86.is_call is_call(insn: __main__.Instruction) \u2192 bool function X86.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function X86.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function X86.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function X86.register register(name: str) \u2192 int function X86.reset_caches reset_caches() \u2192 None function X86.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class X86_64 property X86_64.endianness property X86_64.fp property X86_64.pc property X86_64.ptrsize property X86_64.registers property X86_64.sp function X86_64.flag_register_to_human flag_register_to_human(val: Optional[int] = None) \u2192 str function X86_64.get_ith_parameter get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call. function X86_64.get_ra get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType] function X86_64.is_branch_taken is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str] function X86_64.is_call is_call(insn: __main__.Instruction) \u2192 bool function X86_64.is_conditional_branch is_conditional_branch(insn: __main__.Instruction) \u2192 bool function X86_64.is_ret is_ret(insn: __main__.Instruction) \u2192 bool function X86_64.mprotect_asm mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str function X86_64.register register(name: str) \u2192 int function X86_64.reset_caches reset_caches() \u2192 None function X86_64.supports_gdb_arch supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture. class XAddressInfoCommand Retrieve and display runtime information for the location(s) given as parameter. function XAddressInfoCommand.__init__ __init__() \u2192 None property XAddressInfoCommand.settings Return the list of settings for this command. function XAddressInfoCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function XAddressInfoCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function XAddressInfoCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function XAddressInfoCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function XAddressInfoCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function XAddressInfoCommand.infos infos(address: int) \u2192 None function XAddressInfoCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function XAddressInfoCommand.post_load post_load() \u2192 None function XAddressInfoCommand.pre_load pre_load() \u2192 None function XAddressInfoCommand.usage usage() \u2192 None class XFilesCommand Shows all libraries (and sections) loaded by binary. This command extends the GDB command info files , by retrieving more information from extra sources, and providing a better display. If an argument FILE is given, the output will grep information related to only that file. If an argument name is also given, the output will grep to the name within FILE. function XFilesCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property XFilesCommand.settings Return the list of settings for this command. function XFilesCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function XFilesCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function XFilesCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function XFilesCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function XFilesCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function XFilesCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function XFilesCommand.post_load post_load() \u2192 None function XFilesCommand.pre_load pre_load() \u2192 None function XFilesCommand.usage usage() \u2192 None class XorMemoryCommand XOR a block of memory. The command allows to simply display the result, or patch it runtime at runtime. function XorMemoryCommand.__init__ __init__() \u2192 None property XorMemoryCommand.settings Return the list of settings for this command. function XorMemoryCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function XorMemoryCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function XorMemoryCommand.do_invoke do_invoke(_: List[str]) \u2192 None function XorMemoryCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function XorMemoryCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function XorMemoryCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function XorMemoryCommand.post_load post_load() \u2192 None function XorMemoryCommand.pre_load pre_load() \u2192 None function XorMemoryCommand.usage usage() \u2192 None class XorMemoryDisplayCommand Display a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format. function XorMemoryDisplayCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property XorMemoryDisplayCommand.settings Return the list of settings for this command. function XorMemoryDisplayCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function XorMemoryDisplayCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function XorMemoryDisplayCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function XorMemoryDisplayCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function XorMemoryDisplayCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function XorMemoryDisplayCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function XorMemoryDisplayCommand.post_load post_load() \u2192 None function XorMemoryDisplayCommand.pre_load pre_load() \u2192 None function XorMemoryDisplayCommand.usage usage() \u2192 None class XorMemoryPatchCommand Patch a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format. function XorMemoryPatchCommand.__init__ __init__(*args: Any, **kwargs: Any) \u2192 None property XorMemoryPatchCommand.settings Return the list of settings for this command. function XorMemoryPatchCommand.add_setting add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead function XorMemoryPatchCommand.del_setting del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead function XorMemoryPatchCommand.do_invoke do_invoke(argv: List[str]) \u2192 None function XorMemoryPatchCommand.get_setting get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead function XorMemoryPatchCommand.has_setting has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead function XorMemoryPatchCommand.invoke invoke(args: str, from_tty: bool) \u2192 None function XorMemoryPatchCommand.post_load post_load() \u2192 None function XorMemoryPatchCommand.pre_load pre_load() \u2192 None function XorMemoryPatchCommand.usage usage() \u2192 None class Zone Zone(name, zone_start, zone_end, filename) class classproperty Make the attribute a classproperty . This file was automatically generated via lazydocs .","title":"API"},{"location":"api/gef/#module-gef","text":"","title":"module GEF"},{"location":"api/gef/#global-variables","text":"GEF_DEFAULT_BRANCH GEF_EXTRAS_DEFAULT_BRANCH GDB_MIN_VERSION GDB_VERSION PYTHON_MIN_VERSION PYTHON_VERSION DEFAULT_PAGE_ALIGN_SHIFT DEFAULT_PAGE_SIZE GEF_TEMP_DIR GEF_MAX_STRING_LENGTH LIBC_HEAP_MAIN_ARENA_DEFAULT_NAME ANSI_SPLIT_RE LEFT_ARROW RIGHT_ARROW DOWN_ARROW HORIZONTAL_LINE VERTICAL_LINE CROSS TICK BP_GLYPH GEF_PROMPT GEF_PROMPT_ON GEF_PROMPT_OFF PATTERN_LIBC_VERSION PREFIX gdb_initial_settings cmd gef errmsg","title":"Global Variables"},{"location":"api/gef/#function-http_get","text":"http_get(url: str) \u2192 Union[bytes, NoneType] Basic HTTP wrapper for GET request. Return the body of the page if HTTP code is OK, otherwise return None.","title":"function http_get"},{"location":"api/gef/#function-update_gef","text":"update_gef(argv: List[str]) \u2192 int Try to update gef to the latest version pushed on GitHub main branch. Return 0 on success, 1 on failure.","title":"function update_gef"},{"location":"api/gef/#function-reset_all_caches","text":"reset_all_caches() \u2192 None Free all caches. If an object is cached, it will have a callable attribute cache_clear which will be invoked to purge the function cache.","title":"function reset_all_caches"},{"location":"api/gef/#function-reset","text":"reset() \u2192 None","title":"function reset"},{"location":"api/gef/#function-highlight_text","text":"highlight_text(text: str) \u2192 str Highlight text using gef.ui.highlight_table { match -> color } settings. If RegEx is enabled it will create a match group around all items in the gef.ui.highlight_table and wrap the specified color in the gef.ui.highlight_table around those matches. If RegEx is disabled, split by ANSI codes and 'colorify' each match found within the specified string.","title":"function highlight_text"},{"location":"api/gef/#function-gef_print","text":"gef_print(*args: str, end='\\n', sep=' ', **kwargs: Any) \u2192 None Wrapper around print(), using string buffering feature.","title":"function gef_print"},{"location":"api/gef/#function-bufferize","text":"bufferize(f: Callable) \u2192 Callable Store the content to be printed for a function in memory, and flush it on function exit.","title":"function bufferize"},{"location":"api/gef/#function-p8","text":"p8( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one byte respecting the current architecture endianness.","title":"function p8"},{"location":"api/gef/#function-p16","text":"p16( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one word respecting the current architecture endianness.","title":"function p16"},{"location":"api/gef/#function-p32","text":"p32( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one dword respecting the current architecture endianness.","title":"function p32"},{"location":"api/gef/#function-p64","text":"p64( x: int, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 bytes Pack one qword respecting the current architecture endianness.","title":"function p64"},{"location":"api/gef/#function-u8","text":"u8( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one byte respecting the current architecture endianness.","title":"function u8"},{"location":"api/gef/#function-u16","text":"u16( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one word respecting the current architecture endianness.","title":"function u16"},{"location":"api/gef/#function-u32","text":"u32( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one dword respecting the current architecture endianness.","title":"function u32"},{"location":"api/gef/#function-u64","text":"u64( x: bytes, s: bool = False, e: Optional[ForwardRef('Endianness')] = None ) \u2192 int Unpack one qword respecting the current architecture endianness.","title":"function u64"},{"location":"api/gef/#function-is_ascii_string","text":"is_ascii_string(address: int) \u2192 bool Helper function to determine if the buffer pointed by address is an ASCII string (in GDB)","title":"function is_ascii_string"},{"location":"api/gef/#function-is_alive","text":"is_alive() \u2192 bool Check if GDB is running.","title":"function is_alive"},{"location":"api/gef/#function-calling_function","text":"calling_function() \u2192 Union[str, NoneType] Return the name of the calling function","title":"function calling_function"},{"location":"api/gef/#function-only_if_gdb_running","text":"only_if_gdb_running(f: Callable) \u2192 Callable Decorator wrapper to check if GDB is running.","title":"function only_if_gdb_running"},{"location":"api/gef/#function-only_if_gdb_target_local","text":"only_if_gdb_target_local(f: Callable) \u2192 Callable Decorator wrapper to check if GDB is running locally (target not remote).","title":"function only_if_gdb_target_local"},{"location":"api/gef/#function-deprecated","text":"deprecated(solution: str = '') \u2192 Callable Decorator to add a warning when a command is obsolete and will be removed.","title":"function deprecated"},{"location":"api/gef/#function-experimental_feature","text":"experimental_feature(f: Callable) \u2192 Callable Decorator to add a warning when a feature is experimental.","title":"function experimental_feature"},{"location":"api/gef/#function-only_if_events_supported","text":"only_if_events_supported(event_type: str) \u2192 Callable Checks if GDB supports events without crashing.","title":"function only_if_events_supported"},{"location":"api/gef/#function-wrapped_f","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_1","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_2","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_3","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_4","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_5","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_6","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_7","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_8","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_9","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_10","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_11","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_12","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-wrapped_f_13","text":"wrapped_f(*args: Any, **kwargs: Any) \u2192 Any","title":"function wrapped_f"},{"location":"api/gef/#function-fakeexit","text":"FakeExit(*args: Any, **kwargs: Any) \u2192 NoReturn","title":"function FakeExit"},{"location":"api/gef/#function-parse_arguments","text":"parse_arguments( required_arguments: Dict[Union[str, Tuple[str, str]], Any], optional_arguments: Dict[Union[str, Tuple[str, str]], Any] ) \u2192 Callable Argument parsing decorator.","title":"function parse_arguments"},{"location":"api/gef/#function-titlify","text":"titlify( text: str, color: Optional[str] = None, msg_color: Optional[str] = None ) \u2192 str Print a centered title.","title":"function titlify"},{"location":"api/gef/#function-dbg","text":"dbg(msg: str) \u2192 None","title":"function dbg"},{"location":"api/gef/#function-err","text":"err(msg: str) \u2192 None","title":"function err"},{"location":"api/gef/#function-warn","text":"warn(msg: str) \u2192 None","title":"function warn"},{"location":"api/gef/#function-ok","text":"ok(msg: str) \u2192 None","title":"function ok"},{"location":"api/gef/#function-info","text":"info(msg: str) \u2192 None","title":"function info"},{"location":"api/gef/#function-push_context_message","text":"push_context_message(level: str, message: str) \u2192 None Push the message to be displayed the next time the context is invoked.","title":"function push_context_message"},{"location":"api/gef/#function-show_last_exception","text":"show_last_exception() \u2192 None Display the last Python exception.","title":"function show_last_exception"},{"location":"api/gef/#function-gef_pystring","text":"gef_pystring(x: bytes) \u2192 str Returns a sanitized version as string of the bytes list given in input.","title":"function gef_pystring"},{"location":"api/gef/#function-gef_pybytes","text":"gef_pybytes(x: str) \u2192 bytes Returns an immutable bytes list from the string given as input.","title":"function gef_pybytes"},{"location":"api/gef/#function-style_byte","text":"style_byte(b: int, color: bool = True) \u2192 str","title":"function style_byte"},{"location":"api/gef/#function-hexdump","text":"hexdump( source: ByteString, length: int = 16, separator: str = '.', show_raw: bool = False, show_symbol: bool = True, base: int = 0 ) \u2192 str Return the hexdump of src argument. @param source MUST be of type bytes or bytearray @param length is the length of items per line @param separator is the default character to use if one byte is not printable @param show_raw if True, do not add the line nor the text translation @param base is the start address of the block being hexdump @return a string with the hexdump","title":"function hexdump"},{"location":"api/gef/#function-is_debug","text":"is_debug() \u2192 bool Check if debug mode is enabled.","title":"function is_debug"},{"location":"api/gef/#function-hide_context","text":"hide_context() \u2192 bool Helper function to hide the context pane.","title":"function hide_context"},{"location":"api/gef/#function-unhide_context","text":"unhide_context() \u2192 bool Helper function to unhide the context pane.","title":"function unhide_context"},{"location":"api/gef/#function-enable_redirect_output","text":"enable_redirect_output(to_file: str = '/dev/null') \u2192 None Redirect all GDB output to to_file parameter. By default, to_file redirects to /dev/null .","title":"function enable_redirect_output"},{"location":"api/gef/#function-disable_redirect_output","text":"disable_redirect_output() \u2192 None Disable the output redirection, if any.","title":"function disable_redirect_output"},{"location":"api/gef/#function-gef_makedirs","text":"gef_makedirs(path: str, mode: int = 493) \u2192 Path Recursive mkdir() creation. If successful, return the absolute path of the directory created.","title":"function gef_makedirs"},{"location":"api/gef/#function-gdb_disassemble","text":"gdb_disassemble( start_pc: int, **kwargs: int ) \u2192 Generator[__main__.Instruction, NoneType, NoneType] Disassemble instructions from start_pc (Integer). Accepts the following named parameters: - end_pc (Integer) only instructions whose start address fall in the interval from start_pc to end_pc are returned. - count (Integer) list at most this many disassembled instructions If end_pc and count are not provided, the function will behave as if count=1 . Return an iterator of Instruction objects","title":"function gdb_disassemble"},{"location":"api/gef/#function-gdb_get_nth_previous_instruction_address","text":"gdb_get_nth_previous_instruction_address( addr: int, n: int ) \u2192 Union[int, NoneType] Return the address (Integer) of the n -th instruction before addr .","title":"function gdb_get_nth_previous_instruction_address"},{"location":"api/gef/#function-gdb_get_nth_next_instruction_address","text":"gdb_get_nth_next_instruction_address(addr: int, n: int) \u2192 int Return the address (Integer) of the n -th instruction after addr .","title":"function gdb_get_nth_next_instruction_address"},{"location":"api/gef/#function-gef_instruction_n","text":"gef_instruction_n(addr: int, n: int) \u2192 Instruction Return the n -th instruction after addr as an Instruction object.","title":"function gef_instruction_n"},{"location":"api/gef/#function-gef_get_instruction_at","text":"gef_get_instruction_at(addr: int) \u2192 Instruction Return the full Instruction found at the specified address.","title":"function gef_get_instruction_at"},{"location":"api/gef/#function-gef_current_instruction","text":"gef_current_instruction(addr: int) \u2192 Instruction Return the current instruction as an Instruction object.","title":"function gef_current_instruction"},{"location":"api/gef/#function-gef_next_instruction","text":"gef_next_instruction(addr: int) \u2192 Instruction Return the next instruction as an Instruction object.","title":"function gef_next_instruction"},{"location":"api/gef/#function-gef_disassemble","text":"gef_disassemble( addr: int, nb_insn: int, nb_prev: int = 0 ) \u2192 Generator[__main__.Instruction, NoneType, NoneType] Disassemble nb_insn instructions after addr and nb_prev before addr . Return an iterator of Instruction objects.","title":"function gef_disassemble"},{"location":"api/gef/#function-gef_execute_external","text":"gef_execute_external( command: Sequence[str], as_list: bool = False, **kwargs: Any ) \u2192 Union[str, List[str]] Execute an external command and return the result.","title":"function gef_execute_external"},{"location":"api/gef/#function-gef_execute_gdb_script","text":"gef_execute_gdb_script(commands: str) \u2192 None Execute the parameter source as GDB command. This is done by writing commands to a temporary file, which is then executed via GDB source command. The tempfile is then deleted.","title":"function gef_execute_gdb_script"},{"location":"api/gef/#function-checksec","text":"checksec(filename: str) \u2192 Dict[str, bool] checksec is DEPRECATED and will be removed in the future. Use Elf(fname).checksec()","title":"function checksec"},{"location":"api/gef/#function-get_entry_point","text":"get_entry_point() \u2192 Union[int, NoneType] Return the binary entry point. get_entry_point is DEPRECATED and will be removed in the future. Use gef.binary.entry_point instead","title":"function get_entry_point"},{"location":"api/gef/#function-is_pie","text":"is_pie(fpath: str) \u2192 bool","title":"function is_pie"},{"location":"api/gef/#function-is_big_endian","text":"is_big_endian() \u2192 bool is_big_endian is DEPRECATED and will be removed in the future. Prefer gef.arch.endianness == Endianness.BIG_ENDIAN","title":"function is_big_endian"},{"location":"api/gef/#function-is_little_endian","text":"is_little_endian() \u2192 bool is_little_endian is DEPRECATED and will be removed in the future. gef.arch.endianness == Endianness.LITTLE_ENDIAN","title":"function is_little_endian"},{"location":"api/gef/#function-flags_to_human","text":"flags_to_human(reg_value: int, value_table: Dict[int, str]) \u2192 str Return a human readable string showing the flag states.","title":"function flags_to_human"},{"location":"api/gef/#function-register_architecture","text":"register_architecture( cls: Type[ForwardRef('Architecture')] ) \u2192 Type[ForwardRef('Architecture')] register_architecture is DEPRECATED and will be removed in the future. Using the decorator register_architecture is unecessary","title":"function register_architecture"},{"location":"api/gef/#function-copy_to_clipboard","text":"copy_to_clipboard(data: bytes) \u2192 None Helper function to submit data to the clipboard","title":"function copy_to_clipboard"},{"location":"api/gef/#function-use_stdtype","text":"use_stdtype() \u2192 str","title":"function use_stdtype"},{"location":"api/gef/#function-use_default_type","text":"use_default_type() \u2192 str","title":"function use_default_type"},{"location":"api/gef/#function-use_golang_type","text":"use_golang_type() \u2192 str","title":"function use_golang_type"},{"location":"api/gef/#function-use_rust_type","text":"use_rust_type() \u2192 str","title":"function use_rust_type"},{"location":"api/gef/#function-to_unsigned_long","text":"to_unsigned_long(v: gdb.Value) \u2192 int Cast a gdb.Value to unsigned long.","title":"function to_unsigned_long"},{"location":"api/gef/#function-get_path_from_info_proc","text":"get_path_from_info_proc() \u2192 Union[str, NoneType]","title":"function get_path_from_info_proc"},{"location":"api/gef/#function-get_os","text":"get_os() \u2192 str get_os is DEPRECATED and will be removed in the future. Use gef.session.os","title":"function get_os"},{"location":"api/gef/#function-get_filepath","text":"get_filepath() \u2192 Union[str, NoneType] Return the local absolute path of the file currently debugged.","title":"function get_filepath"},{"location":"api/gef/#function-get_function_length","text":"get_function_length(sym: str) \u2192 int Attempt to get the length of the raw bytes of a function.","title":"function get_function_length"},{"location":"api/gef/#function-process_lookup_address","text":"process_lookup_address(address: int) \u2192 Union[__main__.Section, NoneType] Look up for an address in memory. Return an Address object if found, None otherwise.","title":"function process_lookup_address"},{"location":"api/gef/#function-xor","text":"xor(data: ByteString, key: str) \u2192 bytearray Return data xor-ed with key .","title":"function xor"},{"location":"api/gef/#function-is_hex","text":"is_hex(pattern: str) \u2192 bool Return whether provided string is a hexadecimal value.","title":"function is_hex"},{"location":"api/gef/#function-continue_handler","text":"continue_handler(_: 'gdb.Event') \u2192 None GDB event handler for new object continue cases.","title":"function continue_handler"},{"location":"api/gef/#function-hook_stop_handler","text":"hook_stop_handler(_: 'gdb.StopEvent') \u2192 None GDB event handler for stop cases.","title":"function hook_stop_handler"},{"location":"api/gef/#function-new_objfile_handler","text":"new_objfile_handler(evt: Optional[ForwardRef('gdb.NewObjFileEvent')]) \u2192 None GDB event handler for new object file cases.","title":"function new_objfile_handler"},{"location":"api/gef/#function-exit_handler","text":"exit_handler(_: 'gdb.ExitedEvent') \u2192 None GDB event handler for exit cases.","title":"function exit_handler"},{"location":"api/gef/#function-memchanged_handler","text":"memchanged_handler(_: 'gdb.MemoryChangedEvent') \u2192 None GDB event handler for mem changes cases.","title":"function memchanged_handler"},{"location":"api/gef/#function-regchanged_handler","text":"regchanged_handler(_: 'gdb.RegisterChangedEvent') \u2192 None GDB event handler for reg changes cases.","title":"function regchanged_handler"},{"location":"api/gef/#function-get_terminal_size","text":"get_terminal_size() \u2192 Tuple[int, int] Return the current terminal size.","title":"function get_terminal_size"},{"location":"api/gef/#function-reset_architecture","text":"reset_architecture(arch: Optional[str] = None) \u2192 None Sets the current architecture. If an architecture is explicitly specified by parameter, try to use that one. If this fails, an OSError exception will occur. If no architecture is specified, then GEF will attempt to determine automatically based on the current ELF target. If this fails, an OSError exception will occur.","title":"function reset_architecture"},{"location":"api/gef/#function-get_memory_alignment","text":"get_memory_alignment(in_bits: bool = False) \u2192 int Try to determine the size of a pointer on this system. First, try to parse it out of the ELF header. Next, use the size of size_t . Finally, try the size of $pc. If in_bits is set to True, the result is returned in bits, otherwise in bytes. get_memory_alignment is DEPRECATED and will be removed in the future. Use gef.arch.ptrsize instead","title":"function get_memory_alignment"},{"location":"api/gef/#function-clear_screen","text":"clear_screen(tty: str = '') \u2192 None Clear the screen.","title":"function clear_screen"},{"location":"api/gef/#function-format_address","text":"format_address(addr: int) \u2192 str Format the address according to its size.","title":"function format_address"},{"location":"api/gef/#function-format_address_spaces","text":"format_address_spaces(addr: int, left: bool = True) \u2192 str Format the address according to its size, but with spaces instead of zeroes.","title":"function format_address_spaces"},{"location":"api/gef/#function-align_address","text":"align_address(address: int) \u2192 int Align the provided address to the process's native length.","title":"function align_address"},{"location":"api/gef/#function-align_address_to_size","text":"align_address_to_size(address: int, align: int) \u2192 int Align the address to the given size.","title":"function align_address_to_size"},{"location":"api/gef/#function-align_address_to_page","text":"align_address_to_page(address: int) \u2192 int Align the address to a page.","title":"function align_address_to_page"},{"location":"api/gef/#function-parse_address","text":"parse_address(address: str) \u2192 int Parse an address and return it as an Integer.","title":"function parse_address"},{"location":"api/gef/#function-is_in_x86_kernel","text":"is_in_x86_kernel(address: int) \u2192 bool","title":"function is_in_x86_kernel"},{"location":"api/gef/#function-is_remote_debug","text":"is_remote_debug() \u2192 bool \"Return True is the current debugging session is running through GDB remote session.","title":"function is_remote_debug"},{"location":"api/gef/#function-de_bruijn","text":"de_bruijn(alphabet: bytes, n: int) \u2192 Generator[str, NoneType, NoneType] De Bruijn sequence for alphabet and subsequences of length n (for compat. w/ pwnlib).","title":"function de_bruijn"},{"location":"api/gef/#function-generate_cyclic_pattern","text":"generate_cyclic_pattern(length: int, cycle: int = 4) \u2192 bytearray Create a length byte bytearray of a de Bruijn cyclic pattern.","title":"function generate_cyclic_pattern"},{"location":"api/gef/#function-safe_parse_and_eval","text":"safe_parse_and_eval(value: str) \u2192 Union[ForwardRef('gdb.Value'), NoneType] GEF wrapper for gdb.parse_and_eval(): this function returns None instead of raising gdb.error if the eval failed.","title":"function safe_parse_and_eval"},{"location":"api/gef/#function-gef_convenience","text":"gef_convenience(value: Union[str, bytes]) \u2192 str Defines a new convenience value.","title":"function gef_convenience"},{"location":"api/gef/#function-parse_string_range","text":"parse_string_range(s: str) \u2192 Iterator[int] Parses an address range (e.g. 0x400000-0x401000)","title":"function parse_string_range"},{"location":"api/gef/#function-gef_get_pie_breakpoint","text":"gef_get_pie_breakpoint(num: int) \u2192 PieVirtualBreakpoint gef_get_pie_breakpoint is DEPRECATED and will be removed in the future. Use gef.session.pie_breakpoints[num]","title":"function gef_get_pie_breakpoint"},{"location":"api/gef/#function-endian_str","text":"endian_str() \u2192 str endian_str is DEPRECATED and will be removed in the future. Use str(gef.arch.endianness) instead","title":"function endian_str"},{"location":"api/gef/#function-get_gef_setting","text":"get_gef_setting(name: str) \u2192 Any get_gef_setting is DEPRECATED and will be removed in the future. Use gef.config[key]","title":"function get_gef_setting"},{"location":"api/gef/#function-set_gef_setting","text":"set_gef_setting(name: str, value: Any) \u2192 None set_gef_setting is DEPRECATED and will be removed in the future. Use gef.config[key] = value","title":"function set_gef_setting"},{"location":"api/gef/#function-gef_getpagesize","text":"gef_getpagesize() \u2192 int gef_getpagesize is DEPRECATED and will be removed in the future. Use gef.session.pagesize","title":"function gef_getpagesize"},{"location":"api/gef/#function-gef_read_canary","text":"gef_read_canary() \u2192 Union[Tuple[int, int], NoneType] gef_read_canary is DEPRECATED and will be removed in the future. Use gef.session.canary","title":"function gef_read_canary"},{"location":"api/gef/#function-get_pid","text":"get_pid() \u2192 int get_pid is DEPRECATED and will be removed in the future. Use gef.session.pid","title":"function get_pid"},{"location":"api/gef/#function-get_filename","text":"get_filename() \u2192 str get_filename is DEPRECATED and will be removed in the future. Use gef.session.file.name","title":"function get_filename"},{"location":"api/gef/#function-get_glibc_arena","text":"get_glibc_arena() \u2192 Union[__main__.GlibcArena, NoneType] get_glibc_arena is DEPRECATED and will be removed in the future. Use gef.heap.main_arena","title":"function get_glibc_arena"},{"location":"api/gef/#function-get_register","text":"get_register(regname) \u2192 Union[int, NoneType] get_register is DEPRECATED and will be removed in the future. Use gef.arch.register(regname)","title":"function get_register"},{"location":"api/gef/#function-get_process_maps","text":"get_process_maps() \u2192 List[__main__.Section] get_process_maps is DEPRECATED and will be removed in the future. Use gef.memory.maps","title":"function get_process_maps"},{"location":"api/gef/#function-set_arch","text":"set_arch(arch: Optional[str] = None, _: Optional[str] = None) \u2192 None set_arch is DEPRECATED and will be removed in the future. Use reset_architecture","title":"function set_arch"},{"location":"api/gef/#function-register_external_context_pane","text":"register_external_context_pane( pane_name: str, display_pane_function: Callable[[], NoneType], pane_title_function: Callable[[], Optional[str]], condition: Optional[Callable[[], bool]] = None ) \u2192 None Registering function for new GEF Context View. pane_name: a string that has no spaces (used in settings) display_pane_function: a function that uses gef_print() to print strings pane_title_function: a function that returns a string or None, which will be displayed as the title. If None, no title line is displayed. condition: an optional callback: if not None, the callback will be executed first. If it returns true, then only the pane title and content will displayed. Otherwise, it's simply skipped. Example usage for a simple text to show when we hit a syscall: def only_syscall(): return gef_current_instruction(gef.arch.pc).is_syscall() def display_pane(): gef_print(\"Wow, I am a context pane!\") def pane_title(): return \"example:pane\" register_external_context_pane(\"example_pane\", display_pane, pane_title, only_syscall)","title":"function register_external_context_pane"},{"location":"api/gef/#function-register_external_command","text":"register_external_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Registering function for new GEF (sub-)command to GDB. register_external_command is DEPRECATED and will be removed in the future. Use register() , and inherit from GenericCommand instead","title":"function register_external_command"},{"location":"api/gef/#function-register_command","text":"register_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Decorator for registering new GEF (sub-)command to GDB. register_command is DEPRECATED and will be removed in the future. Use register() , and inherit from GenericCommand instead","title":"function register_command"},{"location":"api/gef/#function-register_priority_command","text":"register_priority_command( cls: Type[ForwardRef('GenericCommand')] ) \u2192 Type[ForwardRef('GenericCommand')] Decorator for registering new command with priority, meaning that it must loaded before the other generic commands. register_priority_command is DEPRECATED and will be removed in the future.","title":"function register_priority_command"},{"location":"api/gef/#function-register","text":"register( cls: Union[Type[ForwardRef('GenericCommand')], Type[ForwardRef('GenericFunction')]] ) \u2192 Union[Type[ForwardRef('GenericCommand')], Type[ForwardRef('GenericFunction')]]","title":"function register"},{"location":"api/gef/#function-register_function","text":"register_function( cls: Type[ForwardRef('GenericFunction')] ) \u2192 Type[ForwardRef('GenericFunction')] Decorator for registering a new convenience function to GDB. register_function is DEPRECATED and will be removed in the future.","title":"function register_function"},{"location":"api/gef/#class-aarch64","text":"","title":"class AARCH64"},{"location":"api/gef/#property-aarch64cpsr","text":"","title":"property AARCH64.cpsr"},{"location":"api/gef/#property-aarch64endianness","text":"","title":"property AARCH64.endianness"},{"location":"api/gef/#property-aarch64fp","text":"","title":"property AARCH64.fp"},{"location":"api/gef/#property-aarch64instruction_length","text":"","title":"property AARCH64.instruction_length"},{"location":"api/gef/#property-aarch64pc","text":"","title":"property AARCH64.pc"},{"location":"api/gef/#property-aarch64ptrsize","text":"Determine the size of pointer from the current CPU mode","title":"property AARCH64.ptrsize"},{"location":"api/gef/#property-aarch64registers","text":"","title":"property AARCH64.registers"},{"location":"api/gef/#property-aarch64sp","text":"","title":"property AARCH64.sp"},{"location":"api/gef/#function-aarch64flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function AARCH64.flag_register_to_human"},{"location":"api/gef/#function-aarch64get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function AARCH64.get_ith_parameter"},{"location":"api/gef/#function-aarch64get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int","title":"function AARCH64.get_ra"},{"location":"api/gef/#function-aarch64is_aarch32","text":"is_aarch32() \u2192 bool Determine if the CPU is currently in AARCH32 mode from runtime.","title":"function AARCH64.is_aarch32"},{"location":"api/gef/#function-aarch64is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function AARCH64.is_branch_taken"},{"location":"api/gef/#function-aarch64is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function AARCH64.is_call"},{"location":"api/gef/#function-aarch64is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function AARCH64.is_conditional_branch"},{"location":"api/gef/#function-aarch64is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function AARCH64.is_ret"},{"location":"api/gef/#function-aarch64is_thumb","text":"is_thumb() \u2192 bool Determine if the machine is currently in THUMB mode.","title":"function AARCH64.is_thumb"},{"location":"api/gef/#function-aarch64is_thumb32","text":"is_thumb32() \u2192 bool Determine if the CPU is currently in THUMB32 mode from runtime.","title":"function AARCH64.is_thumb32"},{"location":"api/gef/#function-aarch64mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function AARCH64.mprotect_asm"},{"location":"api/gef/#function-aarch64register","text":"register(name: str) \u2192 int","title":"function AARCH64.register"},{"location":"api/gef/#function-aarch64reset_caches","text":"reset_caches() \u2192 None","title":"function AARCH64.reset_caches"},{"location":"api/gef/#function-aarch64supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function AARCH64.supports_gdb_arch"},{"location":"api/gef/#class-arm","text":"","title":"class ARM"},{"location":"api/gef/#property-armcpsr","text":"","title":"property ARM.cpsr"},{"location":"api/gef/#property-armendianness","text":"","title":"property ARM.endianness"},{"location":"api/gef/#property-armfp","text":"","title":"property ARM.fp"},{"location":"api/gef/#property-arminstruction_length","text":"","title":"property ARM.instruction_length"},{"location":"api/gef/#property-armmode","text":"","title":"property ARM.mode"},{"location":"api/gef/#property-armpc","text":"","title":"property ARM.pc"},{"location":"api/gef/#property-armptrsize","text":"","title":"property ARM.ptrsize"},{"location":"api/gef/#property-armregisters","text":"","title":"property ARM.registers"},{"location":"api/gef/#property-armsp","text":"","title":"property ARM.sp"},{"location":"api/gef/#function-armflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function ARM.flag_register_to_human"},{"location":"api/gef/#function-armget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function ARM.get_ith_parameter"},{"location":"api/gef/#function-armget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int","title":"function ARM.get_ra"},{"location":"api/gef/#function-armis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function ARM.is_branch_taken"},{"location":"api/gef/#function-armis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function ARM.is_call"},{"location":"api/gef/#function-armis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function ARM.is_conditional_branch"},{"location":"api/gef/#function-armis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function ARM.is_ret"},{"location":"api/gef/#function-armis_thumb","text":"is_thumb() \u2192 bool Determine if the machine is currently in THUMB mode.","title":"function ARM.is_thumb"},{"location":"api/gef/#function-armmprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function ARM.mprotect_asm"},{"location":"api/gef/#function-armregister","text":"register(name: str) \u2192 int","title":"function ARM.register"},{"location":"api/gef/#function-armreset_caches","text":"reset_caches() \u2192 None","title":"function ARM.reset_caches"},{"location":"api/gef/#function-armsupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function ARM.supports_gdb_arch"},{"location":"api/gef/#class-aslrcommand","text":"View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not attached). This command allows to change that setting.","title":"class ASLRCommand"},{"location":"api/gef/#function-aslrcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ASLRCommand.__init__"},{"location":"api/gef/#property-aslrcommandsettings","text":"Return the list of settings for this command.","title":"property ASLRCommand.settings"},{"location":"api/gef/#function-aslrcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ASLRCommand.add_setting"},{"location":"api/gef/#function-aslrcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ASLRCommand.del_setting"},{"location":"api/gef/#function-aslrcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ASLRCommand.do_invoke"},{"location":"api/gef/#function-aslrcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ASLRCommand.get_setting"},{"location":"api/gef/#function-aslrcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ASLRCommand.has_setting"},{"location":"api/gef/#function-aslrcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ASLRCommand.invoke"},{"location":"api/gef/#function-aslrcommandpost_load","text":"post_load() \u2192 None","title":"function ASLRCommand.post_load"},{"location":"api/gef/#function-aslrcommandpre_load","text":"pre_load() \u2192 None","title":"function ASLRCommand.pre_load"},{"location":"api/gef/#function-aslrcommandusage","text":"usage() \u2192 None","title":"function ASLRCommand.usage"},{"location":"api/gef/#class-address","text":"GEF representation of memory addresses.","title":"class Address"},{"location":"api/gef/#function-address__init__","text":"__init__(**kwargs: Any) \u2192 None","title":"function Address.__init__"},{"location":"api/gef/#property-addressvalid","text":"","title":"property Address.valid"},{"location":"api/gef/#function-addressdereference","text":"dereference() \u2192 Union[int, NoneType]","title":"function Address.dereference"},{"location":"api/gef/#function-addressis_in_heap_segment","text":"is_in_heap_segment() \u2192 bool","title":"function Address.is_in_heap_segment"},{"location":"api/gef/#function-addressis_in_stack_segment","text":"is_in_stack_segment() \u2192 bool","title":"function Address.is_in_stack_segment"},{"location":"api/gef/#function-addressis_in_text_segment","text":"is_in_text_segment() \u2192 bool","title":"function Address.is_in_text_segment"},{"location":"api/gef/#class-aliasesaddcommand","text":"Command to add aliases.","title":"class AliasesAddCommand"},{"location":"api/gef/#function-aliasesaddcommand__init__","text":"__init__() \u2192 None","title":"function AliasesAddCommand.__init__"},{"location":"api/gef/#property-aliasesaddcommandsettings","text":"Return the list of settings for this command.","title":"property AliasesAddCommand.settings"},{"location":"api/gef/#function-aliasesaddcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function AliasesAddCommand.add_setting"},{"location":"api/gef/#function-aliasesaddcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function AliasesAddCommand.del_setting"},{"location":"api/gef/#function-aliasesaddcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function AliasesAddCommand.do_invoke"},{"location":"api/gef/#function-aliasesaddcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function AliasesAddCommand.get_setting"},{"location":"api/gef/#function-aliasesaddcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function AliasesAddCommand.has_setting"},{"location":"api/gef/#function-aliasesaddcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function AliasesAddCommand.invoke"},{"location":"api/gef/#function-aliasesaddcommandpost_load","text":"post_load() \u2192 None","title":"function AliasesAddCommand.post_load"},{"location":"api/gef/#function-aliasesaddcommandpre_load","text":"pre_load() \u2192 None","title":"function AliasesAddCommand.pre_load"},{"location":"api/gef/#function-aliasesaddcommandusage","text":"usage() \u2192 None","title":"function AliasesAddCommand.usage"},{"location":"api/gef/#class-aliasescommand","text":"Base command to add, remove, or list aliases.","title":"class AliasesCommand"},{"location":"api/gef/#function-aliasescommand__init__","text":"__init__() \u2192 None","title":"function AliasesCommand.__init__"},{"location":"api/gef/#property-aliasescommandsettings","text":"Return the list of settings for this command.","title":"property AliasesCommand.settings"},{"location":"api/gef/#function-aliasescommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function AliasesCommand.add_setting"},{"location":"api/gef/#function-aliasescommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function AliasesCommand.del_setting"},{"location":"api/gef/#function-aliasescommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function AliasesCommand.do_invoke"},{"location":"api/gef/#function-aliasescommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function AliasesCommand.get_setting"},{"location":"api/gef/#function-aliasescommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function AliasesCommand.has_setting"},{"location":"api/gef/#function-aliasescommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function AliasesCommand.invoke"},{"location":"api/gef/#function-aliasescommandpost_load","text":"post_load() \u2192 None","title":"function AliasesCommand.post_load"},{"location":"api/gef/#function-aliasescommandpre_load","text":"pre_load() \u2192 None","title":"function AliasesCommand.pre_load"},{"location":"api/gef/#function-aliasescommandusage","text":"usage() \u2192 None","title":"function AliasesCommand.usage"},{"location":"api/gef/#class-aliaseslistcommand","text":"Command to list aliases.","title":"class AliasesListCommand"},{"location":"api/gef/#function-aliaseslistcommand__init__","text":"__init__() \u2192 None","title":"function AliasesListCommand.__init__"},{"location":"api/gef/#property-aliaseslistcommandsettings","text":"Return the list of settings for this command.","title":"property AliasesListCommand.settings"},{"location":"api/gef/#function-aliaseslistcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function AliasesListCommand.add_setting"},{"location":"api/gef/#function-aliaseslistcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function AliasesListCommand.del_setting"},{"location":"api/gef/#function-aliaseslistcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function AliasesListCommand.do_invoke"},{"location":"api/gef/#function-aliaseslistcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function AliasesListCommand.get_setting"},{"location":"api/gef/#function-aliaseslistcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function AliasesListCommand.has_setting"},{"location":"api/gef/#function-aliaseslistcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function AliasesListCommand.invoke"},{"location":"api/gef/#function-aliaseslistcommandpost_load","text":"post_load() \u2192 None","title":"function AliasesListCommand.post_load"},{"location":"api/gef/#function-aliaseslistcommandpre_load","text":"pre_load() \u2192 None","title":"function AliasesListCommand.pre_load"},{"location":"api/gef/#function-aliaseslistcommandusage","text":"usage() \u2192 None","title":"function AliasesListCommand.usage"},{"location":"api/gef/#class-aliasesrmcommand","text":"Command to remove aliases.","title":"class AliasesRmCommand"},{"location":"api/gef/#function-aliasesrmcommand__init__","text":"__init__() \u2192 None","title":"function AliasesRmCommand.__init__"},{"location":"api/gef/#property-aliasesrmcommandsettings","text":"Return the list of settings for this command.","title":"property AliasesRmCommand.settings"},{"location":"api/gef/#function-aliasesrmcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function AliasesRmCommand.add_setting"},{"location":"api/gef/#function-aliasesrmcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function AliasesRmCommand.del_setting"},{"location":"api/gef/#function-aliasesrmcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function AliasesRmCommand.do_invoke"},{"location":"api/gef/#function-aliasesrmcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function AliasesRmCommand.get_setting"},{"location":"api/gef/#function-aliasesrmcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function AliasesRmCommand.has_setting"},{"location":"api/gef/#function-aliasesrmcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function AliasesRmCommand.invoke"},{"location":"api/gef/#function-aliasesrmcommandpost_load","text":"post_load() \u2192 None","title":"function AliasesRmCommand.post_load"},{"location":"api/gef/#function-aliasesrmcommandpre_load","text":"pre_load() \u2192 None","title":"function AliasesRmCommand.pre_load"},{"location":"api/gef/#function-aliasesrmcommandusage","text":"usage() \u2192 None","title":"function AliasesRmCommand.usage"},{"location":"api/gef/#class-architecture","text":"Generic metaclass for the architecture supported by GEF.","title":"class Architecture"},{"location":"api/gef/#property-architectureendianness","text":"","title":"property Architecture.endianness"},{"location":"api/gef/#property-architecturefp","text":"","title":"property Architecture.fp"},{"location":"api/gef/#property-architecturepc","text":"","title":"property Architecture.pc"},{"location":"api/gef/#property-architectureptrsize","text":"","title":"property Architecture.ptrsize"},{"location":"api/gef/#property-architectureregisters","text":"","title":"property Architecture.registers"},{"location":"api/gef/#property-architecturesp","text":"","title":"property Architecture.sp"},{"location":"api/gef/#function-architectureflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function Architecture.flag_register_to_human"},{"location":"api/gef/#function-architectureget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function Architecture.get_ith_parameter"},{"location":"api/gef/#function-architectureget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function Architecture.get_ra"},{"location":"api/gef/#function-architectureis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function Architecture.is_branch_taken"},{"location":"api/gef/#function-architectureis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function Architecture.is_call"},{"location":"api/gef/#function-architectureis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function Architecture.is_conditional_branch"},{"location":"api/gef/#function-architectureis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function Architecture.is_ret"},{"location":"api/gef/#function-architecturemprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function Architecture.mprotect_asm"},{"location":"api/gef/#function-architectureregister","text":"register(name: str) \u2192 int","title":"function Architecture.register"},{"location":"api/gef/#function-architecturereset_caches","text":"reset_caches() \u2192 None","title":"function Architecture.reset_caches"},{"location":"api/gef/#function-architecturesupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function Architecture.supports_gdb_arch"},{"location":"api/gef/#class-architecturebase","text":"Class decorator for declaring an architecture to GEF.","title":"class ArchitectureBase"},{"location":"api/gef/#class-bssbasefunction","text":"Return the current bss base address plus the given offset.","title":"class BssBaseFunction"},{"location":"api/gef/#function-bssbasefunction__init__","text":"__init__() \u2192 None","title":"function BssBaseFunction.__init__"},{"location":"api/gef/#function-bssbasefunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function BssBaseFunction.arg_to_long"},{"location":"api/gef/#function-bssbasefunctiondo_invoke","text":"do_invoke(args: List) \u2192 int","title":"function BssBaseFunction.do_invoke"},{"location":"api/gef/#function-bssbasefunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function BssBaseFunction.invoke"},{"location":"api/gef/#class-canarycommand","text":"Shows the canary value of the current process.","title":"class CanaryCommand"},{"location":"api/gef/#function-canarycommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function CanaryCommand.__init__"},{"location":"api/gef/#property-canarycommandsettings","text":"Return the list of settings for this command.","title":"property CanaryCommand.settings"},{"location":"api/gef/#function-canarycommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function CanaryCommand.add_setting"},{"location":"api/gef/#function-canarycommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function CanaryCommand.del_setting"},{"location":"api/gef/#function-canarycommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function CanaryCommand.do_invoke"},{"location":"api/gef/#function-canarycommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function CanaryCommand.get_setting"},{"location":"api/gef/#function-canarycommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function CanaryCommand.has_setting"},{"location":"api/gef/#function-canarycommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function CanaryCommand.invoke"},{"location":"api/gef/#function-canarycommandpost_load","text":"post_load() \u2192 None","title":"function CanaryCommand.post_load"},{"location":"api/gef/#function-canarycommandpre_load","text":"pre_load() \u2192 None","title":"function CanaryCommand.pre_load"},{"location":"api/gef/#function-canarycommandusage","text":"usage() \u2192 None","title":"function CanaryCommand.usage"},{"location":"api/gef/#class-changefdcommand","text":"ChangeFdCommand: redirect file descriptor during runtime.","title":"class ChangeFdCommand"},{"location":"api/gef/#function-changefdcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ChangeFdCommand.__init__"},{"location":"api/gef/#property-changefdcommandsettings","text":"Return the list of settings for this command.","title":"property ChangeFdCommand.settings"},{"location":"api/gef/#function-changefdcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ChangeFdCommand.add_setting"},{"location":"api/gef/#function-changefdcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ChangeFdCommand.del_setting"},{"location":"api/gef/#function-changefdcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ChangeFdCommand.do_invoke"},{"location":"api/gef/#function-changefdcommandget_fd_from_result","text":"get_fd_from_result(res: str) \u2192 int","title":"function ChangeFdCommand.get_fd_from_result"},{"location":"api/gef/#function-changefdcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ChangeFdCommand.get_setting"},{"location":"api/gef/#function-changefdcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ChangeFdCommand.has_setting"},{"location":"api/gef/#function-changefdcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ChangeFdCommand.invoke"},{"location":"api/gef/#function-changefdcommandpost_load","text":"post_load() \u2192 None","title":"function ChangeFdCommand.post_load"},{"location":"api/gef/#function-changefdcommandpre_load","text":"pre_load() \u2192 None","title":"function ChangeFdCommand.pre_load"},{"location":"api/gef/#function-changefdcommandusage","text":"usage() \u2192 None","title":"function ChangeFdCommand.usage"},{"location":"api/gef/#class-changepermissionbreakpoint","text":"When hit, this temporary breakpoint will restore the original code, and position $pc correctly.","title":"class ChangePermissionBreakpoint"},{"location":"api/gef/#function-changepermissionbreakpoint__init__","text":"__init__(loc: str, code: ByteString, pc: int) \u2192 None","title":"function ChangePermissionBreakpoint.__init__"},{"location":"api/gef/#function-changepermissionbreakpointstop","text":"stop() \u2192 bool","title":"function ChangePermissionBreakpoint.stop"},{"location":"api/gef/#class-checkseccommand","text":"Checksec the security properties of the current executable or passed as argument. The command checks for the following protections: - PIE - NX - RelRO - Glibc Stack Canaries - Fortify Source","title":"class ChecksecCommand"},{"location":"api/gef/#function-checkseccommand__init__","text":"__init__() \u2192 None","title":"function ChecksecCommand.__init__"},{"location":"api/gef/#property-checkseccommandsettings","text":"Return the list of settings for this command.","title":"property ChecksecCommand.settings"},{"location":"api/gef/#function-checkseccommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ChecksecCommand.add_setting"},{"location":"api/gef/#function-checkseccommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ChecksecCommand.del_setting"},{"location":"api/gef/#function-checkseccommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ChecksecCommand.do_invoke"},{"location":"api/gef/#function-checkseccommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ChecksecCommand.get_setting"},{"location":"api/gef/#function-checkseccommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ChecksecCommand.has_setting"},{"location":"api/gef/#function-checkseccommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ChecksecCommand.invoke"},{"location":"api/gef/#function-checkseccommandpost_load","text":"post_load() \u2192 None","title":"function ChecksecCommand.post_load"},{"location":"api/gef/#function-checkseccommandpre_load","text":"pre_load() \u2192 None","title":"function ChecksecCommand.pre_load"},{"location":"api/gef/#function-checkseccommandprint_security_properties","text":"print_security_properties(filename: str) \u2192 None","title":"function ChecksecCommand.print_security_properties"},{"location":"api/gef/#function-checkseccommandusage","text":"usage() \u2192 None","title":"function ChecksecCommand.usage"},{"location":"api/gef/#class-color","text":"Used to colorify terminal output.","title":"class Color"},{"location":"api/gef/#function-colorblinkify","text":"blinkify(msg: str) \u2192 str","title":"function Color.blinkify"},{"location":"api/gef/#function-colorblueify","text":"blueify(msg: str) \u2192 str","title":"function Color.blueify"},{"location":"api/gef/#function-colorboldify","text":"boldify(msg: str) \u2192 str","title":"function Color.boldify"},{"location":"api/gef/#function-colorcolorify","text":"colorify(text: str, attrs: str) \u2192 str Color text according to the given attributes.","title":"function Color.colorify"},{"location":"api/gef/#function-colorcyanify","text":"cyanify(msg: str) \u2192 str","title":"function Color.cyanify"},{"location":"api/gef/#function-colorgrayify","text":"grayify(msg: str) \u2192 str","title":"function Color.grayify"},{"location":"api/gef/#function-colorgreenify","text":"greenify(msg: str) \u2192 str","title":"function Color.greenify"},{"location":"api/gef/#function-colorhighlightify","text":"highlightify(msg: str) \u2192 str","title":"function Color.highlightify"},{"location":"api/gef/#function-colorlight_grayify","text":"light_grayify(msg: str) \u2192 str","title":"function Color.light_grayify"},{"location":"api/gef/#function-colorpinkify","text":"pinkify(msg: str) \u2192 str","title":"function Color.pinkify"},{"location":"api/gef/#function-colorredify","text":"redify(msg: str) \u2192 str","title":"function Color.redify"},{"location":"api/gef/#function-colorunderlinify","text":"underlinify(msg: str) \u2192 str","title":"function Color.underlinify"},{"location":"api/gef/#function-coloryellowify","text":"yellowify(msg: str) \u2192 str","title":"function Color.yellowify"},{"location":"api/gef/#class-contextcommand","text":"Displays a comprehensive and modular summary of runtime context. Unless setting enable is set to False, this command will be spawned automatically every time GDB hits a breakpoint, a watchpoint, or any kind of interrupt. By default, it will show panes that contain the register states, the stack, and the disassembly code around $pc.","title":"class ContextCommand"},{"location":"api/gef/#function-contextcommand__init__","text":"__init__() \u2192 None","title":"function ContextCommand.__init__"},{"location":"api/gef/#property-contextcommandsettings","text":"Return the list of settings for this command.","title":"property ContextCommand.settings"},{"location":"api/gef/#function-contextcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ContextCommand.add_setting"},{"location":"api/gef/#function-contextcommandaddr_has_breakpoint","text":"addr_has_breakpoint(address: int, bp_locations: List[str]) \u2192 bool","title":"function ContextCommand.addr_has_breakpoint"},{"location":"api/gef/#function-contextcommandcontext_additional_information","text":"context_additional_information() \u2192 None","title":"function ContextCommand.context_additional_information"},{"location":"api/gef/#function-contextcommandcontext_args","text":"context_args() \u2192 None","title":"function ContextCommand.context_args"},{"location":"api/gef/#function-contextcommandcontext_code","text":"context_code() \u2192 None","title":"function ContextCommand.context_code"},{"location":"api/gef/#function-contextcommandcontext_memory","text":"context_memory() \u2192 None","title":"function ContextCommand.context_memory"},{"location":"api/gef/#function-contextcommandcontext_regs","text":"context_regs() \u2192 None","title":"function ContextCommand.context_regs"},{"location":"api/gef/#function-contextcommandcontext_source","text":"context_source() \u2192 None","title":"function ContextCommand.context_source"},{"location":"api/gef/#function-contextcommandcontext_stack","text":"context_stack() \u2192 None","title":"function ContextCommand.context_stack"},{"location":"api/gef/#function-contextcommandcontext_threads","text":"context_threads() \u2192 None","title":"function ContextCommand.context_threads"},{"location":"api/gef/#function-contextcommandcontext_title","text":"context_title(m: Optional[str]) \u2192 None","title":"function ContextCommand.context_title"},{"location":"api/gef/#function-contextcommandcontext_trace","text":"context_trace() \u2192 None","title":"function ContextCommand.context_trace"},{"location":"api/gef/#function-contextcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ContextCommand.del_setting"},{"location":"api/gef/#function-contextcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ContextCommand.do_invoke"},{"location":"api/gef/#function-contextcommandempty_extra_messages","text":"empty_extra_messages(_) \u2192 None","title":"function ContextCommand.empty_extra_messages"},{"location":"api/gef/#function-contextcommandget_pc_context_info","text":"get_pc_context_info(pc: int, line: str) \u2192 str","title":"function ContextCommand.get_pc_context_info"},{"location":"api/gef/#function-contextcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ContextCommand.get_setting"},{"location":"api/gef/#function-contextcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ContextCommand.has_setting"},{"location":"api/gef/#function-contextcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ContextCommand.invoke"},{"location":"api/gef/#function-contextcommandline_has_breakpoint","text":"line_has_breakpoint( file_name: str, line_number: int, bp_locations: List[str] ) \u2192 bool","title":"function ContextCommand.line_has_breakpoint"},{"location":"api/gef/#function-contextcommandpost_load","text":"post_load() \u2192 None","title":"function ContextCommand.post_load"},{"location":"api/gef/#function-contextcommandpre_load","text":"pre_load() \u2192 None","title":"function ContextCommand.pre_load"},{"location":"api/gef/#function-contextcommandprint_arguments_from_symbol","text":"print_arguments_from_symbol(function_name: str, symbol: 'gdb.Symbol') \u2192 None If symbols were found, parse them and print the argument adequately.","title":"function ContextCommand.print_arguments_from_symbol"},{"location":"api/gef/#function-contextcommandprint_guessed_arguments","text":"print_guessed_arguments(function_name: str) \u2192 None When no symbol, read the current basic block and look for \"interesting\" instructions.","title":"function ContextCommand.print_guessed_arguments"},{"location":"api/gef/#function-contextcommandshow_legend","text":"show_legend() \u2192 None","title":"function ContextCommand.show_legend"},{"location":"api/gef/#function-contextcommandupdate_registers","text":"update_registers(_) \u2192 None","title":"function ContextCommand.update_registers"},{"location":"api/gef/#function-contextcommandusage","text":"usage() \u2192 None","title":"function ContextCommand.usage"},{"location":"api/gef/#class-dereferencecommand","text":"Dereference recursively from an address and display information. This acts like WinDBG dps command.","title":"class DereferenceCommand"},{"location":"api/gef/#function-dereferencecommand__init__","text":"__init__() \u2192 None","title":"function DereferenceCommand.__init__"},{"location":"api/gef/#property-dereferencecommandsettings","text":"Return the list of settings for this command.","title":"property DereferenceCommand.settings"},{"location":"api/gef/#function-dereferencecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function DereferenceCommand.add_setting"},{"location":"api/gef/#function-dereferencecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function DereferenceCommand.del_setting"},{"location":"api/gef/#function-dereferencecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function DereferenceCommand.wrapper"},{"location":"api/gef/#function-dereferencecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function DereferenceCommand.get_setting"},{"location":"api/gef/#function-dereferencecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function DereferenceCommand.has_setting"},{"location":"api/gef/#function-dereferencecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function DereferenceCommand.invoke"},{"location":"api/gef/#function-dereferencecommandpost_load","text":"post_load() \u2192 None","title":"function DereferenceCommand.post_load"},{"location":"api/gef/#function-dereferencecommandpprint_dereferenced","text":"pprint_dereferenced(addr: int, idx: int, base_offset: int = 0) \u2192 str","title":"function DereferenceCommand.pprint_dereferenced"},{"location":"api/gef/#function-dereferencecommandpre_load","text":"pre_load() \u2192 None","title":"function DereferenceCommand.pre_load"},{"location":"api/gef/#function-dereferencecommandusage","text":"usage() \u2192 None","title":"function DereferenceCommand.usage"},{"location":"api/gef/#class-detailregisterscommand","text":"Display full details on one, many or all registers value from current architecture.","title":"class DetailRegistersCommand"},{"location":"api/gef/#function-detailregisterscommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function DetailRegistersCommand.__init__"},{"location":"api/gef/#property-detailregisterscommandsettings","text":"Return the list of settings for this command.","title":"property DetailRegistersCommand.settings"},{"location":"api/gef/#function-detailregisterscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function DetailRegistersCommand.add_setting"},{"location":"api/gef/#function-detailregisterscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function DetailRegistersCommand.del_setting"},{"location":"api/gef/#function-detailregisterscommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function DetailRegistersCommand.wrapper"},{"location":"api/gef/#function-detailregisterscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function DetailRegistersCommand.get_setting"},{"location":"api/gef/#function-detailregisterscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function DetailRegistersCommand.has_setting"},{"location":"api/gef/#function-detailregisterscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function DetailRegistersCommand.invoke"},{"location":"api/gef/#function-detailregisterscommandpost_load","text":"post_load() \u2192 None","title":"function DetailRegistersCommand.post_load"},{"location":"api/gef/#function-detailregisterscommandpre_load","text":"pre_load() \u2192 None","title":"function DetailRegistersCommand.pre_load"},{"location":"api/gef/#function-detailregisterscommandusage","text":"usage() \u2192 None","title":"function DetailRegistersCommand.usage"},{"location":"api/gef/#class-disablecontextoutputcontext","text":"","title":"class DisableContextOutputContext"},{"location":"api/gef/#class-elf","text":"Basic ELF parsing. Ref: - http://www.skyfree.org/linux/references/ELF_Format.pdf - https://refspecs.linuxfoundation.org/elf/elfspec_ppc.pdf - https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html","title":"class Elf"},{"location":"api/gef/#function-elf__init__","text":"__init__(path: Union[str, pathlib.Path]) \u2192 None Instantiate an ELF object. A valid ELF must be provided, or an exception will be thrown.","title":"function Elf.__init__"},{"location":"api/gef/#property-elfchecksec","text":"Check the security property of the ELF binary. The following properties are: - Canary - NX - PIE - Fortify - Partial/Full RelRO. Return a dict() with the different keys mentioned above, and the boolean associated whether the protection was found.","title":"property Elf.checksec"},{"location":"api/gef/#property-elfentry_point","text":"","title":"property Elf.entry_point"},{"location":"api/gef/#function-elfis_valid","text":"is_valid(path: pathlib.Path) \u2192 bool","title":"function Elf.is_valid"},{"location":"api/gef/#function-elfread","text":"read(size: int) \u2192 bytes","title":"function Elf.read"},{"location":"api/gef/#function-elfread_and_unpack","text":"read_and_unpack(fmt: str) \u2192 Tuple[Any, ...]","title":"function Elf.read_and_unpack"},{"location":"api/gef/#function-elfseek","text":"seek(off: int) \u2192 None","title":"function Elf.seek"},{"location":"api/gef/#class-elfinfocommand","text":"Display a limited subset of ELF header information. If no argument is provided, the command will show information about the current ELF being debugged.","title":"class ElfInfoCommand"},{"location":"api/gef/#function-elfinfocommand__init__","text":"__init__() \u2192 None","title":"function ElfInfoCommand.__init__"},{"location":"api/gef/#property-elfinfocommandsettings","text":"Return the list of settings for this command.","title":"property ElfInfoCommand.settings"},{"location":"api/gef/#function-elfinfocommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ElfInfoCommand.add_setting"},{"location":"api/gef/#function-elfinfocommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ElfInfoCommand.del_setting"},{"location":"api/gef/#function-elfinfocommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function ElfInfoCommand.wrapper"},{"location":"api/gef/#function-elfinfocommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ElfInfoCommand.get_setting"},{"location":"api/gef/#function-elfinfocommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ElfInfoCommand.has_setting"},{"location":"api/gef/#function-elfinfocommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ElfInfoCommand.invoke"},{"location":"api/gef/#function-elfinfocommandpost_load","text":"post_load() \u2192 None","title":"function ElfInfoCommand.post_load"},{"location":"api/gef/#function-elfinfocommandpre_load","text":"pre_load() \u2192 None","title":"function ElfInfoCommand.pre_load"},{"location":"api/gef/#function-elfinfocommandusage","text":"usage() \u2192 None","title":"function ElfInfoCommand.usage"},{"location":"api/gef/#class-endianness","text":"An enumeration.","title":"class Endianness"},{"location":"api/gef/#class-entrybreakbreakpoint","text":"Breakpoint used internally to stop execution at the most convenient entry point.","title":"class EntryBreakBreakpoint"},{"location":"api/gef/#function-entrybreakbreakpoint__init__","text":"__init__(location: str) \u2192 None","title":"function EntryBreakBreakpoint.__init__"},{"location":"api/gef/#function-entrybreakbreakpointstop","text":"stop() \u2192 bool","title":"function EntryBreakBreakpoint.stop"},{"location":"api/gef/#class-entrypointbreakcommand","text":"Tries to find best entry point and sets a temporary breakpoint on it. The command will test for well-known symbols for entry points, such as main , _main , __libc_start_main , etc. defined by the setting entrypoint_symbols .","title":"class EntryPointBreakCommand"},{"location":"api/gef/#function-entrypointbreakcommand__init__","text":"__init__() \u2192 None","title":"function EntryPointBreakCommand.__init__"},{"location":"api/gef/#property-entrypointbreakcommandsettings","text":"Return the list of settings for this command.","title":"property EntryPointBreakCommand.settings"},{"location":"api/gef/#function-entrypointbreakcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function EntryPointBreakCommand.add_setting"},{"location":"api/gef/#function-entrypointbreakcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function EntryPointBreakCommand.del_setting"},{"location":"api/gef/#function-entrypointbreakcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function EntryPointBreakCommand.do_invoke"},{"location":"api/gef/#function-entrypointbreakcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function EntryPointBreakCommand.get_setting"},{"location":"api/gef/#function-entrypointbreakcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function EntryPointBreakCommand.has_setting"},{"location":"api/gef/#function-entrypointbreakcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function EntryPointBreakCommand.invoke"},{"location":"api/gef/#function-entrypointbreakcommandpost_load","text":"post_load() \u2192 None","title":"function EntryPointBreakCommand.post_load"},{"location":"api/gef/#function-entrypointbreakcommandpre_load","text":"pre_load() \u2192 None","title":"function EntryPointBreakCommand.pre_load"},{"location":"api/gef/#function-entrypointbreakcommandset_init_tbreak","text":"set_init_tbreak(addr: int) \u2192 EntryBreakBreakpoint","title":"function EntryPointBreakCommand.set_init_tbreak"},{"location":"api/gef/#function-entrypointbreakcommandset_init_tbreak_pie","text":"set_init_tbreak_pie(addr: int, argv: List[str]) \u2192 EntryBreakBreakpoint","title":"function EntryPointBreakCommand.set_init_tbreak_pie"},{"location":"api/gef/#function-entrypointbreakcommandusage","text":"usage() \u2192 None","title":"function EntryPointBreakCommand.usage"},{"location":"api/gef/#class-externalstructuremanager","text":"","title":"class ExternalStructureManager"},{"location":"api/gef/#function-externalstructuremanager__init__","text":"__init__() \u2192 None","title":"function ExternalStructureManager.__init__"},{"location":"api/gef/#property-externalstructuremanagermodules","text":"","title":"property ExternalStructureManager.modules"},{"location":"api/gef/#property-externalstructuremanagerpath","text":"","title":"property ExternalStructureManager.path"},{"location":"api/gef/#property-externalstructuremanagerstructures","text":"","title":"property ExternalStructureManager.structures"},{"location":"api/gef/#handler-externalstructuremanagerfind","text":"","title":"handler ExternalStructureManager.find"},{"location":"api/gef/#function-externalstructuremanagerclear_caches","text":"clear_caches() \u2192 None","title":"function ExternalStructureManager.clear_caches"},{"location":"api/gef/#class-fileformat","text":"","title":"class FileFormat"},{"location":"api/gef/#function-fileformat__init__","text":"__init__(path: Union[str, pathlib.Path]) \u2192 None","title":"function FileFormat.__init__"},{"location":"api/gef/#function-fileformatis_valid","text":"is_valid(path: pathlib.Path) \u2192 bool","title":"function FileFormat.is_valid"},{"location":"api/gef/#class-fileformatsection","text":"","title":"class FileFormatSection"},{"location":"api/gef/#class-flagscommand","text":"Edit flags in a human friendly way.","title":"class FlagsCommand"},{"location":"api/gef/#function-flagscommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function FlagsCommand.__init__"},{"location":"api/gef/#property-flagscommandsettings","text":"Return the list of settings for this command.","title":"property FlagsCommand.settings"},{"location":"api/gef/#function-flagscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function FlagsCommand.add_setting"},{"location":"api/gef/#function-flagscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function FlagsCommand.del_setting"},{"location":"api/gef/#function-flagscommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function FlagsCommand.do_invoke"},{"location":"api/gef/#function-flagscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function FlagsCommand.get_setting"},{"location":"api/gef/#function-flagscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function FlagsCommand.has_setting"},{"location":"api/gef/#function-flagscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function FlagsCommand.invoke"},{"location":"api/gef/#function-flagscommandpost_load","text":"post_load() \u2192 None","title":"function FlagsCommand.post_load"},{"location":"api/gef/#function-flagscommandpre_load","text":"pre_load() \u2192 None","title":"function FlagsCommand.pre_load"},{"location":"api/gef/#function-flagscommandusage","text":"usage() \u2192 None","title":"function FlagsCommand.usage"},{"location":"api/gef/#class-formatstringbreakpoint","text":"Inspect stack for format string.","title":"class FormatStringBreakpoint"},{"location":"api/gef/#function-formatstringbreakpoint__init__","text":"__init__(spec: str, num_args: int) \u2192 None","title":"function FormatStringBreakpoint.__init__"},{"location":"api/gef/#function-formatstringbreakpointstop","text":"stop() \u2192 bool","title":"function FormatStringBreakpoint.stop"},{"location":"api/gef/#class-formatstringsearchcommand","text":"Exploitable format-string helper: this command will set up specific breakpoints at well-known dangerous functions (printf, snprintf, etc.), and check if the pointer holding the format string is writable, and therefore susceptible to format string attacks if an attacker can control its content.","title":"class FormatStringSearchCommand"},{"location":"api/gef/#function-formatstringsearchcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function FormatStringSearchCommand.__init__"},{"location":"api/gef/#property-formatstringsearchcommandsettings","text":"Return the list of settings for this command.","title":"property FormatStringSearchCommand.settings"},{"location":"api/gef/#function-formatstringsearchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function FormatStringSearchCommand.add_setting"},{"location":"api/gef/#function-formatstringsearchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function FormatStringSearchCommand.del_setting"},{"location":"api/gef/#function-formatstringsearchcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function FormatStringSearchCommand.do_invoke"},{"location":"api/gef/#function-formatstringsearchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function FormatStringSearchCommand.get_setting"},{"location":"api/gef/#function-formatstringsearchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function FormatStringSearchCommand.has_setting"},{"location":"api/gef/#function-formatstringsearchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function FormatStringSearchCommand.invoke"},{"location":"api/gef/#function-formatstringsearchcommandpost_load","text":"post_load() \u2192 None","title":"function FormatStringSearchCommand.post_load"},{"location":"api/gef/#function-formatstringsearchcommandpre_load","text":"pre_load() \u2192 None","title":"function FormatStringSearchCommand.pre_load"},{"location":"api/gef/#function-formatstringsearchcommandusage","text":"usage() \u2192 None","title":"function FormatStringSearchCommand.usage"},{"location":"api/gef/#class-gdbremovereadlinefinder","text":"","title":"class GdbRemoveReadlineFinder"},{"location":"api/gef/#function-gdbremovereadlinefinderfind_module","text":"find_module(fullname, path=None)","title":"function GdbRemoveReadlineFinder.find_module"},{"location":"api/gef/#function-gdbremovereadlinefinderload_module","text":"load_module(fullname)","title":"function GdbRemoveReadlineFinder.load_module"},{"location":"api/gef/#class-gef","text":"The GEF root class, which serves as a entrypoint for all the debugging session attributes (architecture, memory, settings, etc.).","title":"class Gef"},{"location":"api/gef/#function-gef__init__","text":"__init__() \u2192 None","title":"function Gef.__init__"},{"location":"api/gef/#function-gefreinitialize_managers","text":"reinitialize_managers() \u2192 None Reinitialize the managers. Avoid calling this function directly, using pi reset() is preferred","title":"function Gef.reinitialize_managers"},{"location":"api/gef/#function-gefreset_caches","text":"reset_caches() \u2192 None Recursively clean the cache of all the managers. Avoid calling this function directly, using reset-cache is preferred","title":"function Gef.reset_caches"},{"location":"api/gef/#function-gefsetup","text":"setup() \u2192 None Setup initialize the runtime setup, which may require for the gef to be not None.","title":"function Gef.setup"},{"location":"api/gef/#class-gefalias","text":"Simple aliasing wrapper because GDB doesn't do what it should.","title":"class GefAlias"},{"location":"api/gef/#function-gefalias__init__","text":"__init__( alias: str, command: str, completer_class: int = 0, command_class: int = -1 ) \u2192 None","title":"function GefAlias.__init__"},{"location":"api/gef/#function-gefaliasinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefAlias.invoke"},{"location":"api/gef/#function-gefaliaslookup_command","text":"lookup_command(cmd: str) \u2192 Union[Tuple[str, __main__.GenericCommand], NoneType]","title":"function GefAlias.lookup_command"},{"location":"api/gef/#class-gefcommand","text":"GEF main command: view all new commands by typing gef .","title":"class GefCommand"},{"location":"api/gef/#function-gefcommand__init__","text":"__init__() \u2192 None","title":"function GefCommand.__init__"},{"location":"api/gef/#property-gefcommandloaded_command_names","text":"","title":"property GefCommand.loaded_command_names"},{"location":"api/gef/#property-gefcommandloaded_commands","text":"","title":"property GefCommand.loaded_commands"},{"location":"api/gef/#property-gefcommandloaded_functions","text":"","title":"property GefCommand.loaded_functions"},{"location":"api/gef/#property-gefcommandmissing_commands","text":"","title":"property GefCommand.missing_commands"},{"location":"api/gef/#function-gefcommandadd_context_pane","text":"add_context_pane( pane_name: str, display_pane_function: Callable, pane_title_function: Callable, condition: Optional[Callable] ) \u2192 None Add a new context pane to ContextCommand.","title":"function GefCommand.add_context_pane"},{"location":"api/gef/#function-gefcommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefCommand.invoke"},{"location":"api/gef/#function-gefcommandload","text":"load() \u2192 None Load all the commands and functions defined by GEF into GDB.","title":"function GefCommand.load"},{"location":"api/gef/#function-gefcommandload_extra_plugins","text":"load_extra_plugins() \u2192 int","title":"function GefCommand.load_extra_plugins"},{"location":"api/gef/#function-gefcommandsetup","text":"setup() \u2192 None","title":"function GefCommand.setup"},{"location":"api/gef/#function-gefcommandshow_banner","text":"show_banner() \u2192 None","title":"function GefCommand.show_banner"},{"location":"api/gef/#class-gefconfigcommand","text":"GEF configuration sub-command This command will help set/view GEF settings for the current debugging session. It is possible to make those changes permanent by running gef save (refer to this command help), and/or restore previously saved settings by running gef restore (refer help).","title":"class GefConfigCommand"},{"location":"api/gef/#function-gefconfigcommand__init__","text":"__init__() \u2192 None","title":"function GefConfigCommand.__init__"},{"location":"api/gef/#function-gefconfigcommandcomplete","text":"complete(text: str, word: str) \u2192 List[str]","title":"function GefConfigCommand.complete"},{"location":"api/gef/#function-gefconfigcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GefConfigCommand.invoke"},{"location":"api/gef/#function-gefconfigcommandprint_setting","text":"print_setting(plugin_name: str, verbose: bool = False) \u2192 None","title":"function GefConfigCommand.print_setting"},{"location":"api/gef/#function-gefconfigcommandprint_settings","text":"print_settings() \u2192 None","title":"function GefConfigCommand.print_settings"},{"location":"api/gef/#function-gefconfigcommandset_setting","text":"set_setting(argv: Tuple[str, Any]) \u2192 None","title":"function GefConfigCommand.set_setting"},{"location":"api/gef/#class-geffunctionscommand","text":"List the convenience functions provided by GEF.","title":"class GefFunctionsCommand"},{"location":"api/gef/#function-geffunctionscommand__init__","text":"__init__() \u2192 None","title":"function GefFunctionsCommand.__init__"},{"location":"api/gef/#property-geffunctionscommandsettings","text":"Return the list of settings for this command.","title":"property GefFunctionsCommand.settings"},{"location":"api/gef/#function-geffunctionscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GefFunctionsCommand.add_setting"},{"location":"api/gef/#function-geffunctionscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GefFunctionsCommand.del_setting"},{"location":"api/gef/#function-geffunctionscommanddo_invoke","text":"do_invoke(argv) \u2192 None","title":"function GefFunctionsCommand.do_invoke"},{"location":"api/gef/#function-geffunctionscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GefFunctionsCommand.get_setting"},{"location":"api/gef/#function-geffunctionscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GefFunctionsCommand.has_setting"},{"location":"api/gef/#function-geffunctionscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GefFunctionsCommand.invoke"},{"location":"api/gef/#function-geffunctionscommandpost_load","text":"post_load() \u2192 None","title":"function GefFunctionsCommand.post_load"},{"location":"api/gef/#function-geffunctionscommandpre_load","text":"pre_load() \u2192 None","title":"function GefFunctionsCommand.pre_load"},{"location":"api/gef/#function-geffunctionscommandusage","text":"usage() \u2192 None","title":"function GefFunctionsCommand.usage"},{"location":"api/gef/#class-gefheapmanager","text":"Class managing session heap.","title":"class GefHeapManager"},{"location":"api/gef/#function-gefheapmanager__init__","text":"__init__() \u2192 None","title":"function GefHeapManager.__init__"},{"location":"api/gef/#property-gefheapmanagerarenas","text":"","title":"property GefHeapManager.arenas"},{"location":"api/gef/#property-gefheapmanagerbase_address","text":"","title":"property GefHeapManager.base_address"},{"location":"api/gef/#property-gefheapmanagerchunks","text":"","title":"property GefHeapManager.chunks"},{"location":"api/gef/#property-gefheapmanagermain_arena","text":"","title":"property GefHeapManager.main_arena"},{"location":"api/gef/#property-gefheapmanagermalloc_alignment","text":"","title":"property GefHeapManager.malloc_alignment"},{"location":"api/gef/#property-gefheapmanagermin_chunk_size","text":"","title":"property GefHeapManager.min_chunk_size"},{"location":"api/gef/#property-gefheapmanagerselected_arena","text":"","title":"property GefHeapManager.selected_arena"},{"location":"api/gef/#function-gefheapmanagercsize2tidx","text":"csize2tidx(size: int) \u2192 int","title":"function GefHeapManager.csize2tidx"},{"location":"api/gef/#function-gefheapmanagermalloc_align_address","text":"malloc_align_address(address: int) \u2192 int Align addresses according to glibc's MALLOC_ALIGNMENT. See also Issue #689 on Github","title":"function GefHeapManager.malloc_align_address"},{"location":"api/gef/#function-gefheapmanagerreset_caches","text":"reset_caches() \u2192 None","title":"function GefHeapManager.reset_caches"},{"location":"api/gef/#function-gefheapmanagertidx2size","text":"tidx2size(idx: int) \u2192 int","title":"function GefHeapManager.tidx2size"},{"location":"api/gef/#class-gefhelpcommand","text":"GEF help sub-command.","title":"class GefHelpCommand"},{"location":"api/gef/#function-gefhelpcommand__init__","text":"__init__() \u2192 None","title":"function GefHelpCommand.__init__"},{"location":"api/gef/#function-gefhelpcommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefHelpCommand.invoke"},{"location":"api/gef/#class-gefinstallextrascriptcommand","text":"gef install command: installs one or more scripts from the gef-extras script repo. Note that the command doesn't check for external dependencies the script(s) might require.","title":"class GefInstallExtraScriptCommand"},{"location":"api/gef/#function-gefinstallextrascriptcommand__init__","text":"__init__() \u2192 None","title":"function GefInstallExtraScriptCommand.__init__"},{"location":"api/gef/#function-gefinstallextrascriptcommandinvoke","text":"invoke(argv: str, from_tty: bool) \u2192 None","title":"function GefInstallExtraScriptCommand.invoke"},{"location":"api/gef/#class-geflibcmanager","text":"Class managing everything libc-related (except heap).","title":"class GefLibcManager"},{"location":"api/gef/#function-geflibcmanager__init__","text":"__init__() \u2192 None","title":"function GefLibcManager.__init__"},{"location":"api/gef/#property-geflibcmanagerversion","text":"","title":"property GefLibcManager.version"},{"location":"api/gef/#function-geflibcmanagerreset_caches","text":"reset_caches() \u2192 None Reset the LRU-cached attributes","title":"function GefLibcManager.reset_caches"},{"location":"api/gef/#class-gefmanager","text":"","title":"class GefManager"},{"location":"api/gef/#function-gefmanagerreset_caches","text":"reset_caches() \u2192 None Reset the LRU-cached attributes","title":"function GefManager.reset_caches"},{"location":"api/gef/#class-gefmemorymanager","text":"Class that manages memory access for gef.","title":"class GefMemoryManager"},{"location":"api/gef/#function-gefmemorymanager__init__","text":"__init__() \u2192 None","title":"function GefMemoryManager.__init__"},{"location":"api/gef/#property-gefmemorymanagermaps","text":"","title":"property GefMemoryManager.maps"},{"location":"api/gef/#function-gefmemorymanagerread","text":"read(addr: int, length: int = 16) \u2192 bytes Return a length long byte array with the copy of the process memory at addr .","title":"function GefMemoryManager.read"},{"location":"api/gef/#function-gefmemorymanagerread_ascii_string","text":"read_ascii_string(address: int) \u2192 Union[str, NoneType] Read an ASCII string from memory","title":"function GefMemoryManager.read_ascii_string"},{"location":"api/gef/#function-gefmemorymanagerread_cstring","text":"read_cstring( address: int, max_length: int = 50, encoding: Optional[str] = None ) \u2192 str Return a C-string read from memory.","title":"function GefMemoryManager.read_cstring"},{"location":"api/gef/#function-gefmemorymanagerread_integer","text":"read_integer(addr: int) \u2192 int Return an integer read from memory.","title":"function GefMemoryManager.read_integer"},{"location":"api/gef/#function-gefmemorymanagerreset_caches","text":"reset_caches() \u2192 None","title":"function GefMemoryManager.reset_caches"},{"location":"api/gef/#function-gefmemorymanagerwrite","text":"write(address: int, buffer: ByteString, length: int = 16) \u2192 None Write buffer at address address .","title":"function GefMemoryManager.write"},{"location":"api/gef/#class-gefmissingcommand","text":"GEF missing sub-command Display the GEF commands that could not be loaded, along with the reason of why they could not be loaded.","title":"class GefMissingCommand"},{"location":"api/gef/#function-gefmissingcommand__init__","text":"__init__() \u2192 None","title":"function GefMissingCommand.__init__"},{"location":"api/gef/#function-gefmissingcommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefMissingCommand.invoke"},{"location":"api/gef/#class-gefremotesessionmanager","text":"Class for managing remote sessions with GEF. It will create a temporary environment designed to clone the remote one.","title":"class GefRemoteSessionManager"},{"location":"api/gef/#function-gefremotesessionmanager__init__","text":"__init__( host: str, port: int, pid: int = -1, qemu: Optional[pathlib.Path] = None ) \u2192 None","title":"function GefRemoteSessionManager.__init__"},{"location":"api/gef/#property-gefremotesessionmanagerauxiliary_vector","text":"","title":"property GefRemoteSessionManager.auxiliary_vector"},{"location":"api/gef/#property-gefremotesessionmanagercanary","text":"Returns a tuple of the canary address and value, read from the auxiliary vector.","title":"property GefRemoteSessionManager.canary"},{"location":"api/gef/#property-gefremotesessionmanagercwd","text":"","title":"property GefRemoteSessionManager.cwd"},{"location":"api/gef/#property-gefremotesessionmanagerfile","text":"Path to the file being debugged as seen by the remote endpoint.","title":"property GefRemoteSessionManager.file"},{"location":"api/gef/#property-gefremotesessionmanagerlfile","text":"Local path to the file being debugged.","title":"property GefRemoteSessionManager.lfile"},{"location":"api/gef/#property-gefremotesessionmanagermaps","text":"","title":"property GefRemoteSessionManager.maps"},{"location":"api/gef/#property-gefremotesessionmanageros","text":"Return the current OS.","title":"property GefRemoteSessionManager.os"},{"location":"api/gef/#property-gefremotesessionmanagerpagesize","text":"Get the system page size","title":"property GefRemoteSessionManager.pagesize"},{"location":"api/gef/#property-gefremotesessionmanagerpid","text":"Return the PID of the target process.","title":"property GefRemoteSessionManager.pid"},{"location":"api/gef/#property-gefremotesessionmanagerroot","text":"","title":"property GefRemoteSessionManager.root"},{"location":"api/gef/#property-gefremotesessionmanagertarget","text":"","title":"property GefRemoteSessionManager.target"},{"location":"api/gef/#function-gefremotesessionmanagerclose","text":"close() \u2192 None","title":"function GefRemoteSessionManager.close"},{"location":"api/gef/#function-gefremotesessionmanagerconnect","text":"connect(pid: int) \u2192 bool Connect to remote target. If in extended mode, also attach to the given PID.","title":"function GefRemoteSessionManager.connect"},{"location":"api/gef/#function-gefremotesessionmanagerin_qemu_user","text":"in_qemu_user() \u2192 bool","title":"function GefRemoteSessionManager.in_qemu_user"},{"location":"api/gef/#function-gefremotesessionmanagerremote_objfile_event_handler","text":"remote_objfile_event_handler(evt: 'gdb.NewObjFileEvent') \u2192 None","title":"function GefRemoteSessionManager.remote_objfile_event_handler"},{"location":"api/gef/#function-gefremotesessionmanagerreset_caches","text":"reset_caches() \u2192 None","title":"function GefRemoteSessionManager.reset_caches"},{"location":"api/gef/#function-gefremotesessionmanagersetup","text":"setup() \u2192 bool","title":"function GefRemoteSessionManager.setup"},{"location":"api/gef/#function-gefremotesessionmanagersync","text":"sync(src: str, dst: Optional[str] = None) \u2192 bool Copy the src into the temporary chroot. If dst is provided, that path will be used instead of src .","title":"function GefRemoteSessionManager.sync"},{"location":"api/gef/#class-gefrestorecommand","text":"GEF restore sub-command. Loads settings from file '~/.gef.rc' and apply them to the configuration of GEF.","title":"class GefRestoreCommand"},{"location":"api/gef/#function-gefrestorecommand__init__","text":"__init__() \u2192 None","title":"function GefRestoreCommand.__init__"},{"location":"api/gef/#function-gefrestorecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GefRestoreCommand.invoke"},{"location":"api/gef/#function-gefrestorecommandreload","text":"reload(quiet: bool)","title":"function GefRestoreCommand.reload"},{"location":"api/gef/#class-gefruncommand","text":"Override GDB run commands with the context from GEF. Simple wrapper for GDB run command to use arguments set from gef set args .","title":"class GefRunCommand"},{"location":"api/gef/#function-gefruncommand__init__","text":"__init__() \u2192 None","title":"function GefRunCommand.__init__"},{"location":"api/gef/#function-gefruncommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefRunCommand.invoke"},{"location":"api/gef/#class-gefsavecommand","text":"GEF save sub-command. Saves the current configuration of GEF to disk (by default in file '~/.gef.rc').","title":"class GefSaveCommand"},{"location":"api/gef/#function-gefsavecommand__init__","text":"__init__() \u2192 None","title":"function GefSaveCommand.__init__"},{"location":"api/gef/#function-gefsavecommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefSaveCommand.invoke"},{"location":"api/gef/#class-gefsessionmanager","text":"Class managing the runtime properties of GEF.","title":"class GefSessionManager"},{"location":"api/gef/#function-gefsessionmanager__init__","text":"__init__() \u2192 None","title":"function GefSessionManager.__init__"},{"location":"api/gef/#property-gefsessionmanagerauxiliary_vector","text":"","title":"property GefSessionManager.auxiliary_vector"},{"location":"api/gef/#property-gefsessionmanagercanary","text":"Returns a tuple of the canary address and value, read from the auxiliary vector.","title":"property GefSessionManager.canary"},{"location":"api/gef/#property-gefsessionmanagercwd","text":"","title":"property GefSessionManager.cwd"},{"location":"api/gef/#property-gefsessionmanagerfile","text":"Return a Path object of the target process.","title":"property GefSessionManager.file"},{"location":"api/gef/#property-gefsessionmanagermaps","text":"Returns the Path to the procfs entry for the memory mapping.","title":"property GefSessionManager.maps"},{"location":"api/gef/#property-gefsessionmanageros","text":"Return the current OS.","title":"property GefSessionManager.os"},{"location":"api/gef/#property-gefsessionmanagerpagesize","text":"Get the system page size","title":"property GefSessionManager.pagesize"},{"location":"api/gef/#property-gefsessionmanagerpid","text":"Return the PID of the target process.","title":"property GefSessionManager.pid"},{"location":"api/gef/#property-gefsessionmanagerroot","text":"Returns the path to the process's root directory.","title":"property GefSessionManager.root"},{"location":"api/gef/#function-gefsessionmanagerreset_caches","text":"reset_caches() \u2192 None","title":"function GefSessionManager.reset_caches"},{"location":"api/gef/#class-gefsetcommand","text":"Override GDB set commands with the context from GEF.","title":"class GefSetCommand"},{"location":"api/gef/#function-gefsetcommand__init__","text":"__init__() \u2192 None","title":"function GefSetCommand.__init__"},{"location":"api/gef/#function-gefsetcommandinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefSetCommand.invoke"},{"location":"api/gef/#class-gefsetting","text":"Basic class for storing gef settings as objects","title":"class GefSetting"},{"location":"api/gef/#function-gefsetting__init__","text":"__init__( value: Any, cls: Optional[type] = None, description: Optional[str] = None, hooks: Optional[Dict[str, Callable]] = None ) \u2192 None","title":"function GefSetting.__init__"},{"location":"api/gef/#class-gefsettingsmanager","text":"GefSettings acts as a dict where the global settings are stored and can be read, written or deleted as any other dict. For instance, to read a specific command setting: gef.config[mycommand.mysetting]","title":"class GefSettingsManager"},{"location":"api/gef/#function-gefsettingsmanagerraw_entry","text":"raw_entry(name: str) \u2192 GefSetting","title":"function GefSettingsManager.raw_entry"},{"location":"api/gef/#class-gefthemecommand","text":"Customize GEF appearance.","title":"class GefThemeCommand"},{"location":"api/gef/#function-gefthemecommand__init__","text":"__init__() \u2192 None","title":"function GefThemeCommand.__init__"},{"location":"api/gef/#property-gefthemecommandsettings","text":"Return the list of settings for this command.","title":"property GefThemeCommand.settings"},{"location":"api/gef/#function-gefthemecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GefThemeCommand.add_setting"},{"location":"api/gef/#function-gefthemecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GefThemeCommand.del_setting"},{"location":"api/gef/#function-gefthemecommanddo_invoke","text":"do_invoke(args: List[str]) \u2192 None","title":"function GefThemeCommand.do_invoke"},{"location":"api/gef/#function-gefthemecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GefThemeCommand.get_setting"},{"location":"api/gef/#function-gefthemecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GefThemeCommand.has_setting"},{"location":"api/gef/#function-gefthemecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GefThemeCommand.invoke"},{"location":"api/gef/#function-gefthemecommandpost_load","text":"post_load() \u2192 None","title":"function GefThemeCommand.post_load"},{"location":"api/gef/#function-gefthemecommandpre_load","text":"pre_load() \u2192 None","title":"function GefThemeCommand.pre_load"},{"location":"api/gef/#function-gefthemecommandusage","text":"usage() \u2192 None","title":"function GefThemeCommand.usage"},{"location":"api/gef/#class-geftmuxsetup","text":"Setup a confortable tmux debugging environment.","title":"class GefTmuxSetup"},{"location":"api/gef/#function-geftmuxsetup__init__","text":"__init__() \u2192 None","title":"function GefTmuxSetup.__init__"},{"location":"api/gef/#function-geftmuxsetupinvoke","text":"invoke(args: Any, from_tty: bool) \u2192 None","title":"function GefTmuxSetup.invoke"},{"location":"api/gef/#function-geftmuxsetupscreen_setup","text":"screen_setup() \u2192 None Hackish equivalent of the tmux_setup() function for screen.","title":"function GefTmuxSetup.screen_setup"},{"location":"api/gef/#function-geftmuxsetuptmux_setup","text":"tmux_setup() \u2192 None Prepare the tmux environment by vertically splitting the current pane, and forcing the context to be redirected there.","title":"function GefTmuxSetup.tmux_setup"},{"location":"api/gef/#class-gefuimanager","text":"Class managing UI settings.","title":"class GefUiManager"},{"location":"api/gef/#function-gefuimanager__init__","text":"__init__() \u2192 None","title":"function GefUiManager.__init__"},{"location":"api/gef/#function-gefuimanagerreset_caches","text":"reset_caches() \u2192 None Reset the LRU-cached attributes","title":"function GefUiManager.reset_caches"},{"location":"api/gef/#class-genericarchitecture","text":"","title":"class GenericArchitecture"},{"location":"api/gef/#property-genericarchitectureendianness","text":"","title":"property GenericArchitecture.endianness"},{"location":"api/gef/#property-genericarchitecturefp","text":"","title":"property GenericArchitecture.fp"},{"location":"api/gef/#property-genericarchitecturepc","text":"","title":"property GenericArchitecture.pc"},{"location":"api/gef/#property-genericarchitectureptrsize","text":"","title":"property GenericArchitecture.ptrsize"},{"location":"api/gef/#property-genericarchitectureregisters","text":"","title":"property GenericArchitecture.registers"},{"location":"api/gef/#property-genericarchitecturesp","text":"","title":"property GenericArchitecture.sp"},{"location":"api/gef/#function-genericarchitectureflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function GenericArchitecture.flag_register_to_human"},{"location":"api/gef/#function-genericarchitectureget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function GenericArchitecture.get_ith_parameter"},{"location":"api/gef/#function-genericarchitectureget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function GenericArchitecture.get_ra"},{"location":"api/gef/#function-genericarchitectureis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function GenericArchitecture.is_branch_taken"},{"location":"api/gef/#function-genericarchitectureis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function GenericArchitecture.is_call"},{"location":"api/gef/#function-genericarchitectureis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function GenericArchitecture.is_conditional_branch"},{"location":"api/gef/#function-genericarchitectureis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function GenericArchitecture.is_ret"},{"location":"api/gef/#function-genericarchitecturemprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function GenericArchitecture.mprotect_asm"},{"location":"api/gef/#function-genericarchitectureregister","text":"register(name: str) \u2192 int","title":"function GenericArchitecture.register"},{"location":"api/gef/#function-genericarchitecturereset_caches","text":"reset_caches() \u2192 None","title":"function GenericArchitecture.reset_caches"},{"location":"api/gef/#function-genericarchitecturesupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function GenericArchitecture.supports_gdb_arch"},{"location":"api/gef/#class-genericcommand","text":"This is an abstract class for invoking commands, should not be instantiated.","title":"class GenericCommand"},{"location":"api/gef/#function-genericcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function GenericCommand.__init__"},{"location":"api/gef/#property-genericcommandsettings","text":"Return the list of settings for this command.","title":"property GenericCommand.settings"},{"location":"api/gef/#function-genericcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GenericCommand.add_setting"},{"location":"api/gef/#function-genericcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GenericCommand.del_setting"},{"location":"api/gef/#function-genericcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function GenericCommand.do_invoke"},{"location":"api/gef/#function-genericcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GenericCommand.get_setting"},{"location":"api/gef/#function-genericcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GenericCommand.has_setting"},{"location":"api/gef/#function-genericcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GenericCommand.invoke"},{"location":"api/gef/#function-genericcommandpost_load","text":"post_load() \u2192 None","title":"function GenericCommand.post_load"},{"location":"api/gef/#function-genericcommandpre_load","text":"pre_load() \u2192 None","title":"function GenericCommand.pre_load"},{"location":"api/gef/#function-genericcommandusage","text":"usage() \u2192 None","title":"function GenericCommand.usage"},{"location":"api/gef/#class-genericfunction","text":"This is an abstract class for invoking convenience functions, should not be instantiated.","title":"class GenericFunction"},{"location":"api/gef/#function-genericfunction__init__","text":"__init__() \u2192 None","title":"function GenericFunction.__init__"},{"location":"api/gef/#function-genericfunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function GenericFunction.arg_to_long"},{"location":"api/gef/#function-genericfunctiondo_invoke","text":"do_invoke(args: Any) \u2192 int","title":"function GenericFunction.do_invoke"},{"location":"api/gef/#function-genericfunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function GenericFunction.invoke"},{"location":"api/gef/#class-glibcarena","text":"Glibc arena class","title":"class GlibcArena"},{"location":"api/gef/#function-glibcarena__init__","text":"__init__(addr: str) \u2192 None","title":"function GlibcArena.__init__"},{"location":"api/gef/#property-glibcarenaaddr","text":"","title":"property GlibcArena.addr"},{"location":"api/gef/#property-glibcarenaaddress","text":"","title":"property GlibcArena.address"},{"location":"api/gef/#property-glibcarenaattached_threads","text":"","title":"property GlibcArena.attached_threads"},{"location":"api/gef/#property-glibcarenabinmap","text":"","title":"property GlibcArena.binmap"},{"location":"api/gef/#property-glibcarenabins","text":"","title":"property GlibcArena.bins"},{"location":"api/gef/#property-glibcarenafastbinsy","text":"","title":"property GlibcArena.fastbinsY"},{"location":"api/gef/#property-glibcarenalast_remainder","text":"","title":"property GlibcArena.last_remainder"},{"location":"api/gef/#property-glibcarenamax_system_mem","text":"","title":"property GlibcArena.max_system_mem"},{"location":"api/gef/#property-glibcarenanext","text":"","title":"property GlibcArena.next"},{"location":"api/gef/#property-glibcarenanext_free","text":"","title":"property GlibcArena.next_free"},{"location":"api/gef/#property-glibcarenasizeof","text":"","title":"property GlibcArena.sizeof"},{"location":"api/gef/#property-glibcarenasystem_mem","text":"","title":"property GlibcArena.system_mem"},{"location":"api/gef/#property-glibcarenatop","text":"","title":"property GlibcArena.top"},{"location":"api/gef/#function-glibcarenabin","text":"bin(i: int) \u2192 Tuple[int, int]","title":"function GlibcArena.bin"},{"location":"api/gef/#function-glibcarenabin_at","text":"bin_at(i) \u2192 int","title":"function GlibcArena.bin_at"},{"location":"api/gef/#function-glibcarenafastbin","text":"fastbin(i: int) \u2192 Union[ForwardRef('GlibcFastChunk'), NoneType] Return head chunk in fastbinsY[i].","title":"function GlibcArena.fastbin"},{"location":"api/gef/#function-glibcarenaget_heap_for_ptr","text":"get_heap_for_ptr(ptr: int) \u2192 int Find the corresponding heap for a given pointer (int). See https://github.com/bminor/glibc/blob/glibc-2.34/malloc/arena.c#L129","title":"function GlibcArena.get_heap_for_ptr"},{"location":"api/gef/#function-glibcarenaget_heap_info_list","text":"get_heap_info_list() \u2192 Union[List[__main__.GlibcHeapInfo], NoneType]","title":"function GlibcArena.get_heap_info_list"},{"location":"api/gef/#function-glibcarenaheap_addr","text":"heap_addr(allow_unaligned: bool = False) \u2192 Union[int, NoneType]","title":"function GlibcArena.heap_addr"},{"location":"api/gef/#function-glibcarenais_main_arena","text":"is_main_arena() \u2192 bool","title":"function GlibcArena.is_main_arena"},{"location":"api/gef/#function-glibcarenamalloc_state_t","text":"malloc_state_t() \u2192 Type[_ctypes.Structure]","title":"function GlibcArena.malloc_state_t"},{"location":"api/gef/#function-glibcarenareset","text":"reset()","title":"function GlibcArena.reset"},{"location":"api/gef/#class-glibcchunk","text":"Glibc chunk class. The default behavior (from_base=False) is to interpret the data starting at the memory address pointed to as the chunk data. Setting from_base to True instead treats that data as the chunk header. Ref: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/.","title":"class GlibcChunk"},{"location":"api/gef/#function-glibcchunk__init__","text":"__init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None","title":"function GlibcChunk.__init__"},{"location":"api/gef/#property-glibcchunkbk","text":"","title":"property GlibcChunk.bk"},{"location":"api/gef/#property-glibcchunkbk_nextsize","text":"","title":"property GlibcChunk.bk_nextsize"},{"location":"api/gef/#property-glibcchunkfd","text":"","title":"property GlibcChunk.fd"},{"location":"api/gef/#property-glibcchunkfd_nextsize","text":"","title":"property GlibcChunk.fd_nextsize"},{"location":"api/gef/#property-glibcchunkflags","text":"","title":"property GlibcChunk.flags"},{"location":"api/gef/#property-glibcchunkprev_size","text":"","title":"property GlibcChunk.prev_size"},{"location":"api/gef/#property-glibcchunksize","text":"","title":"property GlibcChunk.size"},{"location":"api/gef/#property-glibcchunkusable_size","text":"","title":"property GlibcChunk.usable_size"},{"location":"api/gef/#function-glibcchunkget_next_chunk","text":"get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk","title":"function GlibcChunk.get_next_chunk"},{"location":"api/gef/#function-glibcchunkget_next_chunk_addr","text":"get_next_chunk_addr() \u2192 int","title":"function GlibcChunk.get_next_chunk_addr"},{"location":"api/gef/#function-glibcchunkget_prev_chunk_size","text":"get_prev_chunk_size() \u2192 int","title":"function GlibcChunk.get_prev_chunk_size"},{"location":"api/gef/#function-glibcchunkget_usable_size","text":"get_usable_size() \u2192 int","title":"function GlibcChunk.get_usable_size"},{"location":"api/gef/#function-glibcchunkhas_m_bit","text":"has_m_bit() \u2192 bool","title":"function GlibcChunk.has_m_bit"},{"location":"api/gef/#function-glibcchunkhas_n_bit","text":"has_n_bit() \u2192 bool","title":"function GlibcChunk.has_n_bit"},{"location":"api/gef/#function-glibcchunkhas_p_bit","text":"has_p_bit() \u2192 bool","title":"function GlibcChunk.has_p_bit"},{"location":"api/gef/#function-glibcchunkis_used","text":"is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true","title":"function GlibcChunk.is_used"},{"location":"api/gef/#function-glibcchunkmalloc_chunk_t","text":"malloc_chunk_t() \u2192 Type[_ctypes.Structure]","title":"function GlibcChunk.malloc_chunk_t"},{"location":"api/gef/#function-glibcchunkpsprint","text":"psprint() \u2192 str","title":"function GlibcChunk.psprint"},{"location":"api/gef/#function-glibcchunkreset","text":"reset()","title":"function GlibcChunk.reset"},{"location":"api/gef/#class-glibcfastchunk","text":"","title":"class GlibcFastChunk"},{"location":"api/gef/#function-glibcfastchunk__init__","text":"__init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None","title":"function GlibcFastChunk.__init__"},{"location":"api/gef/#property-glibcfastchunkbk","text":"","title":"property GlibcFastChunk.bk"},{"location":"api/gef/#property-glibcfastchunkbk_nextsize","text":"","title":"property GlibcFastChunk.bk_nextsize"},{"location":"api/gef/#property-glibcfastchunkfd","text":"","title":"property GlibcFastChunk.fd"},{"location":"api/gef/#property-glibcfastchunkfd_nextsize","text":"","title":"property GlibcFastChunk.fd_nextsize"},{"location":"api/gef/#property-glibcfastchunkflags","text":"","title":"property GlibcFastChunk.flags"},{"location":"api/gef/#property-glibcfastchunkprev_size","text":"","title":"property GlibcFastChunk.prev_size"},{"location":"api/gef/#property-glibcfastchunksize","text":"","title":"property GlibcFastChunk.size"},{"location":"api/gef/#property-glibcfastchunkusable_size","text":"","title":"property GlibcFastChunk.usable_size"},{"location":"api/gef/#function-glibcfastchunkget_next_chunk","text":"get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk","title":"function GlibcFastChunk.get_next_chunk"},{"location":"api/gef/#function-glibcfastchunkget_next_chunk_addr","text":"get_next_chunk_addr() \u2192 int","title":"function GlibcFastChunk.get_next_chunk_addr"},{"location":"api/gef/#function-glibcfastchunkget_prev_chunk_size","text":"get_prev_chunk_size() \u2192 int","title":"function GlibcFastChunk.get_prev_chunk_size"},{"location":"api/gef/#function-glibcfastchunkget_usable_size","text":"get_usable_size() \u2192 int","title":"function GlibcFastChunk.get_usable_size"},{"location":"api/gef/#function-glibcfastchunkhas_m_bit","text":"has_m_bit() \u2192 bool","title":"function GlibcFastChunk.has_m_bit"},{"location":"api/gef/#function-glibcfastchunkhas_n_bit","text":"has_n_bit() \u2192 bool","title":"function GlibcFastChunk.has_n_bit"},{"location":"api/gef/#function-glibcfastchunkhas_p_bit","text":"has_p_bit() \u2192 bool","title":"function GlibcFastChunk.has_p_bit"},{"location":"api/gef/#function-glibcfastchunkis_used","text":"is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true","title":"function GlibcFastChunk.is_used"},{"location":"api/gef/#function-glibcfastchunkmalloc_chunk_t","text":"malloc_chunk_t() \u2192 Type[_ctypes.Structure]","title":"function GlibcFastChunk.malloc_chunk_t"},{"location":"api/gef/#function-glibcfastchunkprotect_ptr","text":"protect_ptr(pos: int, pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339","title":"function GlibcFastChunk.protect_ptr"},{"location":"api/gef/#function-glibcfastchunkpsprint","text":"psprint() \u2192 str","title":"function GlibcFastChunk.psprint"},{"location":"api/gef/#function-glibcfastchunkreset","text":"reset()","title":"function GlibcFastChunk.reset"},{"location":"api/gef/#function-glibcfastchunkreveal_ptr","text":"reveal_ptr(pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341","title":"function GlibcFastChunk.reveal_ptr"},{"location":"api/gef/#class-glibcheaparenacommand","text":"Display information on a heap chunk.","title":"class GlibcHeapArenaCommand"},{"location":"api/gef/#function-glibcheaparenacommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function GlibcHeapArenaCommand.__init__"},{"location":"api/gef/#property-glibcheaparenacommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapArenaCommand.settings"},{"location":"api/gef/#function-glibcheaparenacommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapArenaCommand.add_setting"},{"location":"api/gef/#function-glibcheaparenacommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapArenaCommand.del_setting"},{"location":"api/gef/#function-glibcheaparenacommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function GlibcHeapArenaCommand.do_invoke"},{"location":"api/gef/#function-glibcheaparenacommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapArenaCommand.get_setting"},{"location":"api/gef/#function-glibcheaparenacommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapArenaCommand.has_setting"},{"location":"api/gef/#function-glibcheaparenacommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapArenaCommand.invoke"},{"location":"api/gef/#function-glibcheaparenacommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapArenaCommand.post_load"},{"location":"api/gef/#function-glibcheaparenacommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapArenaCommand.pre_load"},{"location":"api/gef/#function-glibcheaparenacommandusage","text":"usage() \u2192 None","title":"function GlibcHeapArenaCommand.usage"},{"location":"api/gef/#class-glibcheapbinscommand","text":"Display information on the bins on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.","title":"class GlibcHeapBinsCommand"},{"location":"api/gef/#function-glibcheapbinscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapBinsCommand.__init__"},{"location":"api/gef/#property-glibcheapbinscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapBinsCommand.settings"},{"location":"api/gef/#function-glibcheapbinscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapBinsCommand.add_setting"},{"location":"api/gef/#function-glibcheapbinscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapBinsCommand.del_setting"},{"location":"api/gef/#function-glibcheapbinscommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function GlibcHeapBinsCommand.do_invoke"},{"location":"api/gef/#function-glibcheapbinscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapBinsCommand.get_setting"},{"location":"api/gef/#function-glibcheapbinscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapBinsCommand.has_setting"},{"location":"api/gef/#function-glibcheapbinscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapBinsCommand.invoke"},{"location":"api/gef/#function-glibcheapbinscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapBinsCommand.post_load"},{"location":"api/gef/#function-glibcheapbinscommandpprint_bin","text":"pprint_bin(arena_addr: str, index: int, _type: str = '') \u2192 int","title":"function GlibcHeapBinsCommand.pprint_bin"},{"location":"api/gef/#function-glibcheapbinscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapBinsCommand.pre_load"},{"location":"api/gef/#function-glibcheapbinscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapBinsCommand.usage"},{"location":"api/gef/#class-glibcheapchunkcommand","text":"Display information on a heap chunk. See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.","title":"class GlibcHeapChunkCommand"},{"location":"api/gef/#function-glibcheapchunkcommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapChunkCommand.__init__"},{"location":"api/gef/#property-glibcheapchunkcommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapChunkCommand.settings"},{"location":"api/gef/#function-glibcheapchunkcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapChunkCommand.add_setting"},{"location":"api/gef/#function-glibcheapchunkcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapChunkCommand.del_setting"},{"location":"api/gef/#function-glibcheapchunkcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapChunkCommand.wrapper"},{"location":"api/gef/#function-glibcheapchunkcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapChunkCommand.get_setting"},{"location":"api/gef/#function-glibcheapchunkcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapChunkCommand.has_setting"},{"location":"api/gef/#function-glibcheapchunkcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapChunkCommand.invoke"},{"location":"api/gef/#function-glibcheapchunkcommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapChunkCommand.post_load"},{"location":"api/gef/#function-glibcheapchunkcommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapChunkCommand.pre_load"},{"location":"api/gef/#function-glibcheapchunkcommandusage","text":"usage() \u2192 None","title":"function GlibcHeapChunkCommand.usage"},{"location":"api/gef/#class-glibcheapchunkscommand","text":"Display all heap chunks for the current arena. As an optional argument the base address of a different arena can be passed","title":"class GlibcHeapChunksCommand"},{"location":"api/gef/#function-glibcheapchunkscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapChunksCommand.__init__"},{"location":"api/gef/#property-glibcheapchunkscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapChunksCommand.settings"},{"location":"api/gef/#function-glibcheapchunkscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapChunksCommand.add_setting"},{"location":"api/gef/#function-glibcheapchunkscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapChunksCommand.del_setting"},{"location":"api/gef/#function-glibcheapchunkscommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapChunksCommand.wrapper"},{"location":"api/gef/#function-glibcheapchunkscommanddump_chunks_arena","text":"dump_chunks_arena( arena: __main__.GlibcArena, print_arena: bool = False, allow_unaligned: bool = False ) \u2192 None","title":"function GlibcHeapChunksCommand.dump_chunks_arena"},{"location":"api/gef/#function-glibcheapchunkscommanddump_chunks_heap","text":"dump_chunks_heap( start: int, arena: __main__.GlibcArena, allow_unaligned: bool = False ) \u2192 bool","title":"function GlibcHeapChunksCommand.dump_chunks_heap"},{"location":"api/gef/#function-glibcheapchunkscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapChunksCommand.get_setting"},{"location":"api/gef/#function-glibcheapchunkscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapChunksCommand.has_setting"},{"location":"api/gef/#function-glibcheapchunkscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapChunksCommand.invoke"},{"location":"api/gef/#function-glibcheapchunkscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapChunksCommand.post_load"},{"location":"api/gef/#function-glibcheapchunkscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapChunksCommand.pre_load"},{"location":"api/gef/#function-glibcheapchunkscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapChunksCommand.usage"},{"location":"api/gef/#class-glibcheapcommand","text":"Base command to get information about the Glibc heap structure.","title":"class GlibcHeapCommand"},{"location":"api/gef/#function-glibcheapcommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapCommand.__init__"},{"location":"api/gef/#property-glibcheapcommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapCommand.settings"},{"location":"api/gef/#function-glibcheapcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapCommand.add_setting"},{"location":"api/gef/#function-glibcheapcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapCommand.del_setting"},{"location":"api/gef/#function-glibcheapcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function GlibcHeapCommand.do_invoke"},{"location":"api/gef/#function-glibcheapcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapCommand.get_setting"},{"location":"api/gef/#function-glibcheapcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapCommand.has_setting"},{"location":"api/gef/#function-glibcheapcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapCommand.invoke"},{"location":"api/gef/#function-glibcheapcommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapCommand.post_load"},{"location":"api/gef/#function-glibcheapcommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapCommand.pre_load"},{"location":"api/gef/#function-glibcheapcommandusage","text":"usage() \u2192 None","title":"function GlibcHeapCommand.usage"},{"location":"api/gef/#class-glibcheapfastbinsycommand","text":"Display information on the fastbinsY on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.","title":"class GlibcHeapFastbinsYCommand"},{"location":"api/gef/#function-glibcheapfastbinsycommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapFastbinsYCommand.__init__"},{"location":"api/gef/#property-glibcheapfastbinsycommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapFastbinsYCommand.settings"},{"location":"api/gef/#function-glibcheapfastbinsycommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapFastbinsYCommand.add_setting"},{"location":"api/gef/#function-glibcheapfastbinsycommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapFastbinsYCommand.del_setting"},{"location":"api/gef/#function-glibcheapfastbinsycommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapFastbinsYCommand.wrapper"},{"location":"api/gef/#function-glibcheapfastbinsycommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapFastbinsYCommand.get_setting"},{"location":"api/gef/#function-glibcheapfastbinsycommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapFastbinsYCommand.has_setting"},{"location":"api/gef/#function-glibcheapfastbinsycommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapFastbinsYCommand.invoke"},{"location":"api/gef/#function-glibcheapfastbinsycommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapFastbinsYCommand.post_load"},{"location":"api/gef/#function-glibcheapfastbinsycommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapFastbinsYCommand.pre_load"},{"location":"api/gef/#function-glibcheapfastbinsycommandusage","text":"usage() \u2192 None","title":"function GlibcHeapFastbinsYCommand.usage"},{"location":"api/gef/#class-glibcheapinfo","text":"Glibc heap_info struct","title":"class GlibcHeapInfo"},{"location":"api/gef/#function-glibcheapinfo__init__","text":"__init__(addr: Union[str, int]) \u2192 None","title":"function GlibcHeapInfo.__init__"},{"location":"api/gef/#property-glibcheapinfoaddr","text":"","title":"property GlibcHeapInfo.addr"},{"location":"api/gef/#property-glibcheapinfoaddress","text":"","title":"property GlibcHeapInfo.address"},{"location":"api/gef/#property-glibcheapinfosizeof","text":"","title":"property GlibcHeapInfo.sizeof"},{"location":"api/gef/#function-glibcheapinfoheap_info_t","text":"heap_info_t() \u2192 Type[_ctypes.Structure]","title":"function GlibcHeapInfo.heap_info_t"},{"location":"api/gef/#function-glibcheapinforeset","text":"reset()","title":"function GlibcHeapInfo.reset"},{"location":"api/gef/#class-glibcheaplargebinscommand","text":"Convenience command for viewing large bins.","title":"class GlibcHeapLargeBinsCommand"},{"location":"api/gef/#function-glibcheaplargebinscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapLargeBinsCommand.__init__"},{"location":"api/gef/#property-glibcheaplargebinscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapLargeBinsCommand.settings"},{"location":"api/gef/#function-glibcheaplargebinscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapLargeBinsCommand.add_setting"},{"location":"api/gef/#function-glibcheaplargebinscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapLargeBinsCommand.del_setting"},{"location":"api/gef/#function-glibcheaplargebinscommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapLargeBinsCommand.wrapper"},{"location":"api/gef/#function-glibcheaplargebinscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapLargeBinsCommand.get_setting"},{"location":"api/gef/#function-glibcheaplargebinscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapLargeBinsCommand.has_setting"},{"location":"api/gef/#function-glibcheaplargebinscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapLargeBinsCommand.invoke"},{"location":"api/gef/#function-glibcheaplargebinscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapLargeBinsCommand.post_load"},{"location":"api/gef/#function-glibcheaplargebinscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapLargeBinsCommand.pre_load"},{"location":"api/gef/#function-glibcheaplargebinscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapLargeBinsCommand.usage"},{"location":"api/gef/#class-glibcheapsetarenacommand","text":"Display information on a heap chunk.","title":"class GlibcHeapSetArenaCommand"},{"location":"api/gef/#function-glibcheapsetarenacommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapSetArenaCommand.__init__"},{"location":"api/gef/#property-glibcheapsetarenacommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapSetArenaCommand.settings"},{"location":"api/gef/#function-glibcheapsetarenacommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapSetArenaCommand.add_setting"},{"location":"api/gef/#function-glibcheapsetarenacommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapSetArenaCommand.del_setting"},{"location":"api/gef/#function-glibcheapsetarenacommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function GlibcHeapSetArenaCommand.do_invoke"},{"location":"api/gef/#function-glibcheapsetarenacommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapSetArenaCommand.get_setting"},{"location":"api/gef/#function-glibcheapsetarenacommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapSetArenaCommand.has_setting"},{"location":"api/gef/#function-glibcheapsetarenacommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapSetArenaCommand.invoke"},{"location":"api/gef/#function-glibcheapsetarenacommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapSetArenaCommand.post_load"},{"location":"api/gef/#function-glibcheapsetarenacommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapSetArenaCommand.pre_load"},{"location":"api/gef/#function-glibcheapsetarenacommandusage","text":"usage() \u2192 None","title":"function GlibcHeapSetArenaCommand.usage"},{"location":"api/gef/#class-glibcheapsmallbinscommand","text":"Convenience command for viewing small bins.","title":"class GlibcHeapSmallBinsCommand"},{"location":"api/gef/#function-glibcheapsmallbinscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapSmallBinsCommand.__init__"},{"location":"api/gef/#property-glibcheapsmallbinscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapSmallBinsCommand.settings"},{"location":"api/gef/#function-glibcheapsmallbinscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapSmallBinsCommand.add_setting"},{"location":"api/gef/#function-glibcheapsmallbinscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapSmallBinsCommand.del_setting"},{"location":"api/gef/#function-glibcheapsmallbinscommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapSmallBinsCommand.wrapper"},{"location":"api/gef/#function-glibcheapsmallbinscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapSmallBinsCommand.get_setting"},{"location":"api/gef/#function-glibcheapsmallbinscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapSmallBinsCommand.has_setting"},{"location":"api/gef/#function-glibcheapsmallbinscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapSmallBinsCommand.invoke"},{"location":"api/gef/#function-glibcheapsmallbinscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapSmallBinsCommand.post_load"},{"location":"api/gef/#function-glibcheapsmallbinscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapSmallBinsCommand.pre_load"},{"location":"api/gef/#function-glibcheapsmallbinscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapSmallBinsCommand.usage"},{"location":"api/gef/#class-glibcheaptcachebinscommand","text":"Display information on the Tcachebins on an arena (default: main_arena). See https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc.","title":"class GlibcHeapTcachebinsCommand"},{"location":"api/gef/#function-glibcheaptcachebinscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapTcachebinsCommand.__init__"},{"location":"api/gef/#property-glibcheaptcachebinscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapTcachebinsCommand.settings"},{"location":"api/gef/#function-glibcheaptcachebinscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapTcachebinsCommand.add_setting"},{"location":"api/gef/#function-glibcheaptcachebinscommandcheck_thread_ids","text":"check_thread_ids(tids: List[int]) \u2192 List[int] Check the validity, dedup, and return all valid tids.","title":"function GlibcHeapTcachebinsCommand.check_thread_ids"},{"location":"api/gef/#function-glibcheaptcachebinscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapTcachebinsCommand.del_setting"},{"location":"api/gef/#function-glibcheaptcachebinscommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function GlibcHeapTcachebinsCommand.do_invoke"},{"location":"api/gef/#function-glibcheaptcachebinscommandfind_tcache","text":"find_tcache() \u2192 int Return the location of the current thread's tcache.","title":"function GlibcHeapTcachebinsCommand.find_tcache"},{"location":"api/gef/#function-glibcheaptcachebinscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapTcachebinsCommand.get_setting"},{"location":"api/gef/#function-glibcheaptcachebinscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapTcachebinsCommand.has_setting"},{"location":"api/gef/#function-glibcheaptcachebinscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapTcachebinsCommand.invoke"},{"location":"api/gef/#function-glibcheaptcachebinscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapTcachebinsCommand.post_load"},{"location":"api/gef/#function-glibcheaptcachebinscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapTcachebinsCommand.pre_load"},{"location":"api/gef/#function-glibcheaptcachebinscommandtcachebin","text":"tcachebin( tcache_base: int, i: int ) \u2192 Tuple[Union[__main__.GlibcTcacheChunk, NoneType], int] Return the head chunk in tcache[i] and the number of chunks in the bin.","title":"function GlibcHeapTcachebinsCommand.tcachebin"},{"location":"api/gef/#function-glibcheaptcachebinscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapTcachebinsCommand.usage"},{"location":"api/gef/#class-glibcheapunsortedbinscommand","text":"Display information on the Unsorted Bins of an arena (default: main_arena). See: https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1689.","title":"class GlibcHeapUnsortedBinsCommand"},{"location":"api/gef/#function-glibcheapunsortedbinscommand__init__","text":"__init__() \u2192 None","title":"function GlibcHeapUnsortedBinsCommand.__init__"},{"location":"api/gef/#property-glibcheapunsortedbinscommandsettings","text":"Return the list of settings for this command.","title":"property GlibcHeapUnsortedBinsCommand.settings"},{"location":"api/gef/#function-glibcheapunsortedbinscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GlibcHeapUnsortedBinsCommand.add_setting"},{"location":"api/gef/#function-glibcheapunsortedbinscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GlibcHeapUnsortedBinsCommand.del_setting"},{"location":"api/gef/#function-glibcheapunsortedbinscommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function GlibcHeapUnsortedBinsCommand.wrapper"},{"location":"api/gef/#function-glibcheapunsortedbinscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GlibcHeapUnsortedBinsCommand.get_setting"},{"location":"api/gef/#function-glibcheapunsortedbinscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GlibcHeapUnsortedBinsCommand.has_setting"},{"location":"api/gef/#function-glibcheapunsortedbinscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GlibcHeapUnsortedBinsCommand.invoke"},{"location":"api/gef/#function-glibcheapunsortedbinscommandpost_load","text":"post_load() \u2192 None","title":"function GlibcHeapUnsortedBinsCommand.post_load"},{"location":"api/gef/#function-glibcheapunsortedbinscommandpre_load","text":"pre_load() \u2192 None","title":"function GlibcHeapUnsortedBinsCommand.pre_load"},{"location":"api/gef/#function-glibcheapunsortedbinscommandusage","text":"usage() \u2192 None","title":"function GlibcHeapUnsortedBinsCommand.usage"},{"location":"api/gef/#class-glibctcachechunk","text":"","title":"class GlibcTcacheChunk"},{"location":"api/gef/#function-glibctcachechunk__init__","text":"__init__( addr: int, from_base: bool = False, allow_unaligned: bool = True ) \u2192 None","title":"function GlibcTcacheChunk.__init__"},{"location":"api/gef/#property-glibctcachechunkbk","text":"","title":"property GlibcTcacheChunk.bk"},{"location":"api/gef/#property-glibctcachechunkbk_nextsize","text":"","title":"property GlibcTcacheChunk.bk_nextsize"},{"location":"api/gef/#property-glibctcachechunkfd","text":"","title":"property GlibcTcacheChunk.fd"},{"location":"api/gef/#property-glibctcachechunkfd_nextsize","text":"","title":"property GlibcTcacheChunk.fd_nextsize"},{"location":"api/gef/#property-glibctcachechunkflags","text":"","title":"property GlibcTcacheChunk.flags"},{"location":"api/gef/#property-glibctcachechunkprev_size","text":"","title":"property GlibcTcacheChunk.prev_size"},{"location":"api/gef/#property-glibctcachechunksize","text":"","title":"property GlibcTcacheChunk.size"},{"location":"api/gef/#property-glibctcachechunkusable_size","text":"","title":"property GlibcTcacheChunk.usable_size"},{"location":"api/gef/#function-glibctcachechunkget_next_chunk","text":"get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk","title":"function GlibcTcacheChunk.get_next_chunk"},{"location":"api/gef/#function-glibctcachechunkget_next_chunk_addr","text":"get_next_chunk_addr() \u2192 int","title":"function GlibcTcacheChunk.get_next_chunk_addr"},{"location":"api/gef/#function-glibctcachechunkget_prev_chunk_size","text":"get_prev_chunk_size() \u2192 int","title":"function GlibcTcacheChunk.get_prev_chunk_size"},{"location":"api/gef/#function-glibctcachechunkget_usable_size","text":"get_usable_size() \u2192 int","title":"function GlibcTcacheChunk.get_usable_size"},{"location":"api/gef/#function-glibctcachechunkhas_m_bit","text":"has_m_bit() \u2192 bool","title":"function GlibcTcacheChunk.has_m_bit"},{"location":"api/gef/#function-glibctcachechunkhas_n_bit","text":"has_n_bit() \u2192 bool","title":"function GlibcTcacheChunk.has_n_bit"},{"location":"api/gef/#function-glibctcachechunkhas_p_bit","text":"has_p_bit() \u2192 bool","title":"function GlibcTcacheChunk.has_p_bit"},{"location":"api/gef/#function-glibctcachechunkis_used","text":"is_used() \u2192 bool Check if the current block is used by: - checking the M bit is true - or checking that next chunk PREV_INUSE flag is true","title":"function GlibcTcacheChunk.is_used"},{"location":"api/gef/#function-glibctcachechunkmalloc_chunk_t","text":"malloc_chunk_t() \u2192 Type[_ctypes.Structure]","title":"function GlibcTcacheChunk.malloc_chunk_t"},{"location":"api/gef/#function-glibctcachechunkprotect_ptr","text":"protect_ptr(pos: int, pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339","title":"function GlibcTcacheChunk.protect_ptr"},{"location":"api/gef/#function-glibctcachechunkpsprint","text":"psprint() \u2192 str","title":"function GlibcTcacheChunk.psprint"},{"location":"api/gef/#function-glibctcachechunkreset","text":"reset()","title":"function GlibcTcacheChunk.reset"},{"location":"api/gef/#function-glibctcachechunkreveal_ptr","text":"reveal_ptr(pointer: int) \u2192 int https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341","title":"function GlibcTcacheChunk.reveal_ptr"},{"location":"api/gef/#class-gotbasefunction","text":"Return the current GOT base address plus the given offset.","title":"class GotBaseFunction"},{"location":"api/gef/#function-gotbasefunction__init__","text":"__init__() \u2192 None","title":"function GotBaseFunction.__init__"},{"location":"api/gef/#function-gotbasefunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function GotBaseFunction.arg_to_long"},{"location":"api/gef/#function-gotbasefunctiondo_invoke","text":"do_invoke(args: List) \u2192 int","title":"function GotBaseFunction.do_invoke"},{"location":"api/gef/#function-gotbasefunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function GotBaseFunction.invoke"},{"location":"api/gef/#class-gotcommand","text":"Display current status of the got inside the process.","title":"class GotCommand"},{"location":"api/gef/#function-gotcommand__init__","text":"__init__()","title":"function GotCommand.__init__"},{"location":"api/gef/#property-gotcommandsettings","text":"Return the list of settings for this command.","title":"property GotCommand.settings"},{"location":"api/gef/#function-gotcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function GotCommand.add_setting"},{"location":"api/gef/#function-gotcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function GotCommand.del_setting"},{"location":"api/gef/#function-gotcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function GotCommand.do_invoke"},{"location":"api/gef/#function-gotcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function GotCommand.get_setting"},{"location":"api/gef/#function-gotcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function GotCommand.has_setting"},{"location":"api/gef/#function-gotcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function GotCommand.invoke"},{"location":"api/gef/#function-gotcommandpost_load","text":"post_load() \u2192 None","title":"function GotCommand.post_load"},{"location":"api/gef/#function-gotcommandpre_load","text":"pre_load() \u2192 None","title":"function GotCommand.pre_load"},{"location":"api/gef/#function-gotcommandusage","text":"usage() \u2192 None","title":"function GotCommand.usage"},{"location":"api/gef/#class-heapanalysiscommand","text":"Heap vulnerability analysis helper: this command aims to track dynamic heap allocation done through malloc()/free() to provide some insights on possible heap vulnerabilities. The following vulnerabilities are checked: - NULL free - Use-after-Free - Double Free - Heap overlap","title":"class HeapAnalysisCommand"},{"location":"api/gef/#function-heapanalysiscommand__init__","text":"__init__() \u2192 None","title":"function HeapAnalysisCommand.__init__"},{"location":"api/gef/#property-heapanalysiscommandsettings","text":"Return the list of settings for this command.","title":"property HeapAnalysisCommand.settings"},{"location":"api/gef/#function-heapanalysiscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HeapAnalysisCommand.add_setting"},{"location":"api/gef/#function-heapanalysiscommandclean","text":"clean(_: 'gdb.Event') \u2192 None","title":"function HeapAnalysisCommand.clean"},{"location":"api/gef/#function-heapanalysiscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HeapAnalysisCommand.del_setting"},{"location":"api/gef/#function-heapanalysiscommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function HeapAnalysisCommand.do_invoke"},{"location":"api/gef/#function-heapanalysiscommanddump_tracked_allocations","text":"dump_tracked_allocations() \u2192 None","title":"function HeapAnalysisCommand.dump_tracked_allocations"},{"location":"api/gef/#function-heapanalysiscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HeapAnalysisCommand.get_setting"},{"location":"api/gef/#function-heapanalysiscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HeapAnalysisCommand.has_setting"},{"location":"api/gef/#function-heapanalysiscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HeapAnalysisCommand.invoke"},{"location":"api/gef/#function-heapanalysiscommandpost_load","text":"post_load() \u2192 None","title":"function HeapAnalysisCommand.post_load"},{"location":"api/gef/#function-heapanalysiscommandpre_load","text":"pre_load() \u2192 None","title":"function HeapAnalysisCommand.pre_load"},{"location":"api/gef/#function-heapanalysiscommandsetup","text":"setup() \u2192 None","title":"function HeapAnalysisCommand.setup"},{"location":"api/gef/#function-heapanalysiscommandusage","text":"usage() \u2192 None","title":"function HeapAnalysisCommand.usage"},{"location":"api/gef/#class-heapbasefunction","text":"Return the current heap base address plus an optional offset.","title":"class HeapBaseFunction"},{"location":"api/gef/#function-heapbasefunction__init__","text":"__init__() \u2192 None","title":"function HeapBaseFunction.__init__"},{"location":"api/gef/#function-heapbasefunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function HeapBaseFunction.arg_to_long"},{"location":"api/gef/#function-heapbasefunctiondo_invoke","text":"do_invoke(args: List) \u2192 int","title":"function HeapBaseFunction.do_invoke"},{"location":"api/gef/#function-heapbasefunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function HeapBaseFunction.invoke"},{"location":"api/gef/#class-hexdumpbytecommand","text":"Display SIZE lines of hexdump as BYTE from the memory location pointed by ADDRESS.","title":"class HexdumpByteCommand"},{"location":"api/gef/#function-hexdumpbytecommand__init__","text":"__init__() \u2192 None","title":"function HexdumpByteCommand.__init__"},{"location":"api/gef/#property-hexdumpbytecommandsettings","text":"Return the list of settings for this command.","title":"property HexdumpByteCommand.settings"},{"location":"api/gef/#function-hexdumpbytecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HexdumpByteCommand.add_setting"},{"location":"api/gef/#function-hexdumpbytecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HexdumpByteCommand.del_setting"},{"location":"api/gef/#function-hexdumpbytecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function HexdumpByteCommand.wrapper"},{"location":"api/gef/#function-hexdumpbytecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HexdumpByteCommand.get_setting"},{"location":"api/gef/#function-hexdumpbytecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HexdumpByteCommand.has_setting"},{"location":"api/gef/#function-hexdumpbytecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HexdumpByteCommand.invoke"},{"location":"api/gef/#function-hexdumpbytecommandpost_load","text":"post_load() \u2192 None","title":"function HexdumpByteCommand.post_load"},{"location":"api/gef/#function-hexdumpbytecommandpre_load","text":"pre_load() \u2192 None","title":"function HexdumpByteCommand.pre_load"},{"location":"api/gef/#function-hexdumpbytecommandusage","text":"usage() \u2192 None","title":"function HexdumpByteCommand.usage"},{"location":"api/gef/#class-hexdumpcommand","text":"Display SIZE lines of hexdump from the memory location pointed by LOCATION.","title":"class HexdumpCommand"},{"location":"api/gef/#function-hexdumpcommand__init__","text":"__init__() \u2192 None","title":"function HexdumpCommand.__init__"},{"location":"api/gef/#property-hexdumpcommandsettings","text":"Return the list of settings for this command.","title":"property HexdumpCommand.settings"},{"location":"api/gef/#function-hexdumpcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HexdumpCommand.add_setting"},{"location":"api/gef/#function-hexdumpcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HexdumpCommand.del_setting"},{"location":"api/gef/#function-hexdumpcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function HexdumpCommand.wrapper"},{"location":"api/gef/#function-hexdumpcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HexdumpCommand.get_setting"},{"location":"api/gef/#function-hexdumpcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HexdumpCommand.has_setting"},{"location":"api/gef/#function-hexdumpcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HexdumpCommand.invoke"},{"location":"api/gef/#function-hexdumpcommandpost_load","text":"post_load() \u2192 None","title":"function HexdumpCommand.post_load"},{"location":"api/gef/#function-hexdumpcommandpre_load","text":"pre_load() \u2192 None","title":"function HexdumpCommand.pre_load"},{"location":"api/gef/#function-hexdumpcommandusage","text":"usage() \u2192 None","title":"function HexdumpCommand.usage"},{"location":"api/gef/#class-hexdumpdwordcommand","text":"Display SIZE lines of hexdump as DWORD from the memory location pointed by ADDRESS.","title":"class HexdumpDwordCommand"},{"location":"api/gef/#function-hexdumpdwordcommand__init__","text":"__init__() \u2192 None","title":"function HexdumpDwordCommand.__init__"},{"location":"api/gef/#property-hexdumpdwordcommandsettings","text":"Return the list of settings for this command.","title":"property HexdumpDwordCommand.settings"},{"location":"api/gef/#function-hexdumpdwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HexdumpDwordCommand.add_setting"},{"location":"api/gef/#function-hexdumpdwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HexdumpDwordCommand.del_setting"},{"location":"api/gef/#function-hexdumpdwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function HexdumpDwordCommand.wrapper"},{"location":"api/gef/#function-hexdumpdwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HexdumpDwordCommand.get_setting"},{"location":"api/gef/#function-hexdumpdwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HexdumpDwordCommand.has_setting"},{"location":"api/gef/#function-hexdumpdwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HexdumpDwordCommand.invoke"},{"location":"api/gef/#function-hexdumpdwordcommandpost_load","text":"post_load() \u2192 None","title":"function HexdumpDwordCommand.post_load"},{"location":"api/gef/#function-hexdumpdwordcommandpre_load","text":"pre_load() \u2192 None","title":"function HexdumpDwordCommand.pre_load"},{"location":"api/gef/#function-hexdumpdwordcommandusage","text":"usage() \u2192 None","title":"function HexdumpDwordCommand.usage"},{"location":"api/gef/#class-hexdumpqwordcommand","text":"Display SIZE lines of hexdump as QWORD from the memory location pointed by ADDRESS.","title":"class HexdumpQwordCommand"},{"location":"api/gef/#function-hexdumpqwordcommand__init__","text":"__init__() \u2192 None","title":"function HexdumpQwordCommand.__init__"},{"location":"api/gef/#property-hexdumpqwordcommandsettings","text":"Return the list of settings for this command.","title":"property HexdumpQwordCommand.settings"},{"location":"api/gef/#function-hexdumpqwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HexdumpQwordCommand.add_setting"},{"location":"api/gef/#function-hexdumpqwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HexdumpQwordCommand.del_setting"},{"location":"api/gef/#function-hexdumpqwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function HexdumpQwordCommand.wrapper"},{"location":"api/gef/#function-hexdumpqwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HexdumpQwordCommand.get_setting"},{"location":"api/gef/#function-hexdumpqwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HexdumpQwordCommand.has_setting"},{"location":"api/gef/#function-hexdumpqwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HexdumpQwordCommand.invoke"},{"location":"api/gef/#function-hexdumpqwordcommandpost_load","text":"post_load() \u2192 None","title":"function HexdumpQwordCommand.post_load"},{"location":"api/gef/#function-hexdumpqwordcommandpre_load","text":"pre_load() \u2192 None","title":"function HexdumpQwordCommand.pre_load"},{"location":"api/gef/#function-hexdumpqwordcommandusage","text":"usage() \u2192 None","title":"function HexdumpQwordCommand.usage"},{"location":"api/gef/#class-hexdumpwordcommand","text":"Display SIZE lines of hexdump as WORD from the memory location pointed by ADDRESS.","title":"class HexdumpWordCommand"},{"location":"api/gef/#function-hexdumpwordcommand__init__","text":"__init__() \u2192 None","title":"function HexdumpWordCommand.__init__"},{"location":"api/gef/#property-hexdumpwordcommandsettings","text":"Return the list of settings for this command.","title":"property HexdumpWordCommand.settings"},{"location":"api/gef/#function-hexdumpwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HexdumpWordCommand.add_setting"},{"location":"api/gef/#function-hexdumpwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HexdumpWordCommand.del_setting"},{"location":"api/gef/#function-hexdumpwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function HexdumpWordCommand.wrapper"},{"location":"api/gef/#function-hexdumpwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HexdumpWordCommand.get_setting"},{"location":"api/gef/#function-hexdumpwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HexdumpWordCommand.has_setting"},{"location":"api/gef/#function-hexdumpwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HexdumpWordCommand.invoke"},{"location":"api/gef/#function-hexdumpwordcommandpost_load","text":"post_load() \u2192 None","title":"function HexdumpWordCommand.post_load"},{"location":"api/gef/#function-hexdumpwordcommandpre_load","text":"pre_load() \u2192 None","title":"function HexdumpWordCommand.pre_load"},{"location":"api/gef/#function-hexdumpwordcommandusage","text":"usage() \u2192 None","title":"function HexdumpWordCommand.usage"},{"location":"api/gef/#class-highlightaddcommand","text":"Add a match to the highlight table.","title":"class HighlightAddCommand"},{"location":"api/gef/#function-highlightaddcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function HighlightAddCommand.__init__"},{"location":"api/gef/#property-highlightaddcommandsettings","text":"Return the list of settings for this command.","title":"property HighlightAddCommand.settings"},{"location":"api/gef/#function-highlightaddcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HighlightAddCommand.add_setting"},{"location":"api/gef/#function-highlightaddcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HighlightAddCommand.del_setting"},{"location":"api/gef/#function-highlightaddcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function HighlightAddCommand.do_invoke"},{"location":"api/gef/#function-highlightaddcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HighlightAddCommand.get_setting"},{"location":"api/gef/#function-highlightaddcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HighlightAddCommand.has_setting"},{"location":"api/gef/#function-highlightaddcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HighlightAddCommand.invoke"},{"location":"api/gef/#function-highlightaddcommandpost_load","text":"post_load() \u2192 None","title":"function HighlightAddCommand.post_load"},{"location":"api/gef/#function-highlightaddcommandpre_load","text":"pre_load() \u2192 None","title":"function HighlightAddCommand.pre_load"},{"location":"api/gef/#function-highlightaddcommandusage","text":"usage() \u2192 None","title":"function HighlightAddCommand.usage"},{"location":"api/gef/#class-highlightclearcommand","text":"Clear the highlight table, remove all matches.","title":"class HighlightClearCommand"},{"location":"api/gef/#function-highlightclearcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function HighlightClearCommand.__init__"},{"location":"api/gef/#property-highlightclearcommandsettings","text":"Return the list of settings for this command.","title":"property HighlightClearCommand.settings"},{"location":"api/gef/#function-highlightclearcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HighlightClearCommand.add_setting"},{"location":"api/gef/#function-highlightclearcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HighlightClearCommand.del_setting"},{"location":"api/gef/#function-highlightclearcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function HighlightClearCommand.do_invoke"},{"location":"api/gef/#function-highlightclearcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HighlightClearCommand.get_setting"},{"location":"api/gef/#function-highlightclearcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HighlightClearCommand.has_setting"},{"location":"api/gef/#function-highlightclearcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HighlightClearCommand.invoke"},{"location":"api/gef/#function-highlightclearcommandpost_load","text":"post_load() \u2192 None","title":"function HighlightClearCommand.post_load"},{"location":"api/gef/#function-highlightclearcommandpre_load","text":"pre_load() \u2192 None","title":"function HighlightClearCommand.pre_load"},{"location":"api/gef/#function-highlightclearcommandusage","text":"usage() \u2192 None","title":"function HighlightClearCommand.usage"},{"location":"api/gef/#class-highlightcommand","text":"Highlight user-defined text matches in GEF output universally.","title":"class HighlightCommand"},{"location":"api/gef/#function-highlightcommand__init__","text":"__init__() \u2192 None","title":"function HighlightCommand.__init__"},{"location":"api/gef/#property-highlightcommandsettings","text":"Return the list of settings for this command.","title":"property HighlightCommand.settings"},{"location":"api/gef/#function-highlightcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HighlightCommand.add_setting"},{"location":"api/gef/#function-highlightcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HighlightCommand.del_setting"},{"location":"api/gef/#function-highlightcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function HighlightCommand.do_invoke"},{"location":"api/gef/#function-highlightcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HighlightCommand.get_setting"},{"location":"api/gef/#function-highlightcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HighlightCommand.has_setting"},{"location":"api/gef/#function-highlightcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HighlightCommand.invoke"},{"location":"api/gef/#function-highlightcommandpost_load","text":"post_load() \u2192 None","title":"function HighlightCommand.post_load"},{"location":"api/gef/#function-highlightcommandpre_load","text":"pre_load() \u2192 None","title":"function HighlightCommand.pre_load"},{"location":"api/gef/#function-highlightcommandusage","text":"usage() \u2192 None","title":"function HighlightCommand.usage"},{"location":"api/gef/#class-highlightlistcommand","text":"Show the current highlight table with matches to colors.","title":"class HighlightListCommand"},{"location":"api/gef/#function-highlightlistcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function HighlightListCommand.__init__"},{"location":"api/gef/#property-highlightlistcommandsettings","text":"Return the list of settings for this command.","title":"property HighlightListCommand.settings"},{"location":"api/gef/#function-highlightlistcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HighlightListCommand.add_setting"},{"location":"api/gef/#function-highlightlistcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HighlightListCommand.del_setting"},{"location":"api/gef/#function-highlightlistcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function HighlightListCommand.do_invoke"},{"location":"api/gef/#function-highlightlistcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HighlightListCommand.get_setting"},{"location":"api/gef/#function-highlightlistcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HighlightListCommand.has_setting"},{"location":"api/gef/#function-highlightlistcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HighlightListCommand.invoke"},{"location":"api/gef/#function-highlightlistcommandpost_load","text":"post_load() \u2192 None","title":"function HighlightListCommand.post_load"},{"location":"api/gef/#function-highlightlistcommandpre_load","text":"pre_load() \u2192 None","title":"function HighlightListCommand.pre_load"},{"location":"api/gef/#function-highlightlistcommandprint_highlight_table","text":"print_highlight_table() \u2192 None","title":"function HighlightListCommand.print_highlight_table"},{"location":"api/gef/#function-highlightlistcommandusage","text":"usage() \u2192 None","title":"function HighlightListCommand.usage"},{"location":"api/gef/#class-highlightremovecommand","text":"Remove a match in the highlight table.","title":"class HighlightRemoveCommand"},{"location":"api/gef/#function-highlightremovecommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function HighlightRemoveCommand.__init__"},{"location":"api/gef/#property-highlightremovecommandsettings","text":"Return the list of settings for this command.","title":"property HighlightRemoveCommand.settings"},{"location":"api/gef/#function-highlightremovecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function HighlightRemoveCommand.add_setting"},{"location":"api/gef/#function-highlightremovecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function HighlightRemoveCommand.del_setting"},{"location":"api/gef/#function-highlightremovecommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function HighlightRemoveCommand.do_invoke"},{"location":"api/gef/#function-highlightremovecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function HighlightRemoveCommand.get_setting"},{"location":"api/gef/#function-highlightremovecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function HighlightRemoveCommand.has_setting"},{"location":"api/gef/#function-highlightremovecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function HighlightRemoveCommand.invoke"},{"location":"api/gef/#function-highlightremovecommandpost_load","text":"post_load() \u2192 None","title":"function HighlightRemoveCommand.post_load"},{"location":"api/gef/#function-highlightremovecommandpre_load","text":"pre_load() \u2192 None","title":"function HighlightRemoveCommand.pre_load"},{"location":"api/gef/#function-highlightremovecommandusage","text":"usage() \u2192 None","title":"function HighlightRemoveCommand.usage"},{"location":"api/gef/#class-instruction","text":"GEF representation of a CPU instruction.","title":"class Instruction"},{"location":"api/gef/#function-instruction__init__","text":"__init__( address: int, location: str, mnemo: str, operands: List[str], opcodes: bytes ) \u2192 None","title":"function Instruction.__init__"},{"location":"api/gef/#function-instructionis_valid","text":"is_valid() \u2192 bool","title":"function Instruction.is_valid"},{"location":"api/gef/#function-instructionsize","text":"size() \u2192 int","title":"function Instruction.size"},{"location":"api/gef/#class-mips","text":"","title":"class MIPS"},{"location":"api/gef/#property-mipsendianness","text":"","title":"property MIPS.endianness"},{"location":"api/gef/#property-mipsfp","text":"","title":"property MIPS.fp"},{"location":"api/gef/#property-mipspc","text":"","title":"property MIPS.pc"},{"location":"api/gef/#property-mipsptrsize","text":"","title":"property MIPS.ptrsize"},{"location":"api/gef/#property-mipsregisters","text":"","title":"property MIPS.registers"},{"location":"api/gef/#property-mipssp","text":"","title":"property MIPS.sp"},{"location":"api/gef/#function-mipsflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function MIPS.flag_register_to_human"},{"location":"api/gef/#function-mipsget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function MIPS.get_ith_parameter"},{"location":"api/gef/#function-mipsget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function MIPS.get_ra"},{"location":"api/gef/#function-mipsis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function MIPS.is_branch_taken"},{"location":"api/gef/#function-mipsis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function MIPS.is_call"},{"location":"api/gef/#function-mipsis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function MIPS.is_conditional_branch"},{"location":"api/gef/#function-mipsis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function MIPS.is_ret"},{"location":"api/gef/#function-mipsmprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function MIPS.mprotect_asm"},{"location":"api/gef/#function-mipsregister","text":"register(name: str) \u2192 int","title":"function MIPS.register"},{"location":"api/gef/#function-mipsreset_caches","text":"reset_caches() \u2192 None","title":"function MIPS.reset_caches"},{"location":"api/gef/#function-mipssupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function MIPS.supports_gdb_arch"},{"location":"api/gef/#class-mips64","text":"","title":"class MIPS64"},{"location":"api/gef/#property-mips64endianness","text":"","title":"property MIPS64.endianness"},{"location":"api/gef/#property-mips64fp","text":"","title":"property MIPS64.fp"},{"location":"api/gef/#property-mips64pc","text":"","title":"property MIPS64.pc"},{"location":"api/gef/#property-mips64ptrsize","text":"","title":"property MIPS64.ptrsize"},{"location":"api/gef/#property-mips64registers","text":"","title":"property MIPS64.registers"},{"location":"api/gef/#property-mips64sp","text":"","title":"property MIPS64.sp"},{"location":"api/gef/#function-mips64flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function MIPS64.flag_register_to_human"},{"location":"api/gef/#function-mips64get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function MIPS64.get_ith_parameter"},{"location":"api/gef/#function-mips64get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function MIPS64.get_ra"},{"location":"api/gef/#function-mips64is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function MIPS64.is_branch_taken"},{"location":"api/gef/#function-mips64is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function MIPS64.is_call"},{"location":"api/gef/#function-mips64is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function MIPS64.is_conditional_branch"},{"location":"api/gef/#function-mips64is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function MIPS64.is_ret"},{"location":"api/gef/#function-mips64mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function MIPS64.mprotect_asm"},{"location":"api/gef/#function-mips64register","text":"register(name: str) \u2192 int","title":"function MIPS64.register"},{"location":"api/gef/#function-mips64reset_caches","text":"reset_caches() \u2192 None","title":"function MIPS64.reset_caches"},{"location":"api/gef/#function-mips64supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType]","title":"function MIPS64.supports_gdb_arch"},{"location":"api/gef/#class-memorycommand","text":"Add or remove address ranges to the memory view.","title":"class MemoryCommand"},{"location":"api/gef/#function-memorycommand__init__","text":"__init__() \u2192 None","title":"function MemoryCommand.__init__"},{"location":"api/gef/#property-memorycommandsettings","text":"Return the list of settings for this command.","title":"property MemoryCommand.settings"},{"location":"api/gef/#function-memorycommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function MemoryCommand.add_setting"},{"location":"api/gef/#function-memorycommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function MemoryCommand.del_setting"},{"location":"api/gef/#function-memorycommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function MemoryCommand.do_invoke"},{"location":"api/gef/#function-memorycommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function MemoryCommand.get_setting"},{"location":"api/gef/#function-memorycommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function MemoryCommand.has_setting"},{"location":"api/gef/#function-memorycommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function MemoryCommand.invoke"},{"location":"api/gef/#function-memorycommandpost_load","text":"post_load() \u2192 None","title":"function MemoryCommand.post_load"},{"location":"api/gef/#function-memorycommandpre_load","text":"pre_load() \u2192 None","title":"function MemoryCommand.pre_load"},{"location":"api/gef/#function-memorycommandusage","text":"usage() \u2192 None","title":"function MemoryCommand.usage"},{"location":"api/gef/#class-memoryunwatchcommand","text":"Removes address ranges to the memory view.","title":"class MemoryUnwatchCommand"},{"location":"api/gef/#function-memoryunwatchcommand__init__","text":"__init__() \u2192 None","title":"function MemoryUnwatchCommand.__init__"},{"location":"api/gef/#property-memoryunwatchcommandsettings","text":"Return the list of settings for this command.","title":"property MemoryUnwatchCommand.settings"},{"location":"api/gef/#function-memoryunwatchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function MemoryUnwatchCommand.add_setting"},{"location":"api/gef/#function-memoryunwatchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function MemoryUnwatchCommand.del_setting"},{"location":"api/gef/#function-memoryunwatchcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function MemoryUnwatchCommand.do_invoke"},{"location":"api/gef/#function-memoryunwatchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function MemoryUnwatchCommand.get_setting"},{"location":"api/gef/#function-memoryunwatchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function MemoryUnwatchCommand.has_setting"},{"location":"api/gef/#function-memoryunwatchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function MemoryUnwatchCommand.invoke"},{"location":"api/gef/#function-memoryunwatchcommandpost_load","text":"post_load() \u2192 None","title":"function MemoryUnwatchCommand.post_load"},{"location":"api/gef/#function-memoryunwatchcommandpre_load","text":"pre_load() \u2192 None","title":"function MemoryUnwatchCommand.pre_load"},{"location":"api/gef/#function-memoryunwatchcommandusage","text":"usage() \u2192 None","title":"function MemoryUnwatchCommand.usage"},{"location":"api/gef/#class-memorywatchcommand","text":"Adds address ranges to the memory view.","title":"class MemoryWatchCommand"},{"location":"api/gef/#function-memorywatchcommand__init__","text":"__init__() \u2192 None","title":"function MemoryWatchCommand.__init__"},{"location":"api/gef/#property-memorywatchcommandsettings","text":"Return the list of settings for this command.","title":"property MemoryWatchCommand.settings"},{"location":"api/gef/#function-memorywatchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function MemoryWatchCommand.add_setting"},{"location":"api/gef/#function-memorywatchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function MemoryWatchCommand.del_setting"},{"location":"api/gef/#function-memorywatchcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function MemoryWatchCommand.do_invoke"},{"location":"api/gef/#function-memorywatchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function MemoryWatchCommand.get_setting"},{"location":"api/gef/#function-memorywatchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function MemoryWatchCommand.has_setting"},{"location":"api/gef/#function-memorywatchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function MemoryWatchCommand.invoke"},{"location":"api/gef/#function-memorywatchcommandpost_load","text":"post_load() \u2192 None","title":"function MemoryWatchCommand.post_load"},{"location":"api/gef/#function-memorywatchcommandpre_load","text":"pre_load() \u2192 None","title":"function MemoryWatchCommand.pre_load"},{"location":"api/gef/#function-memorywatchcommandusage","text":"usage() \u2192 None","title":"function MemoryWatchCommand.usage"},{"location":"api/gef/#class-memorywatchlistcommand","text":"Lists all watchpoints to display in context layout.","title":"class MemoryWatchListCommand"},{"location":"api/gef/#function-memorywatchlistcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function MemoryWatchListCommand.__init__"},{"location":"api/gef/#property-memorywatchlistcommandsettings","text":"Return the list of settings for this command.","title":"property MemoryWatchListCommand.settings"},{"location":"api/gef/#function-memorywatchlistcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function MemoryWatchListCommand.add_setting"},{"location":"api/gef/#function-memorywatchlistcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function MemoryWatchListCommand.del_setting"},{"location":"api/gef/#function-memorywatchlistcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function MemoryWatchListCommand.do_invoke"},{"location":"api/gef/#function-memorywatchlistcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function MemoryWatchListCommand.get_setting"},{"location":"api/gef/#function-memorywatchlistcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function MemoryWatchListCommand.has_setting"},{"location":"api/gef/#function-memorywatchlistcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function MemoryWatchListCommand.invoke"},{"location":"api/gef/#function-memorywatchlistcommandpost_load","text":"post_load() \u2192 None","title":"function MemoryWatchListCommand.post_load"},{"location":"api/gef/#function-memorywatchlistcommandpre_load","text":"pre_load() \u2192 None","title":"function MemoryWatchListCommand.pre_load"},{"location":"api/gef/#function-memorywatchlistcommandusage","text":"usage() \u2192 None","title":"function MemoryWatchListCommand.usage"},{"location":"api/gef/#class-memorywatchresetcommand","text":"Removes all watchpoints.","title":"class MemoryWatchResetCommand"},{"location":"api/gef/#function-memorywatchresetcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function MemoryWatchResetCommand.__init__"},{"location":"api/gef/#property-memorywatchresetcommandsettings","text":"Return the list of settings for this command.","title":"property MemoryWatchResetCommand.settings"},{"location":"api/gef/#function-memorywatchresetcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function MemoryWatchResetCommand.add_setting"},{"location":"api/gef/#function-memorywatchresetcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function MemoryWatchResetCommand.del_setting"},{"location":"api/gef/#function-memorywatchresetcommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function MemoryWatchResetCommand.do_invoke"},{"location":"api/gef/#function-memorywatchresetcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function MemoryWatchResetCommand.get_setting"},{"location":"api/gef/#function-memorywatchresetcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function MemoryWatchResetCommand.has_setting"},{"location":"api/gef/#function-memorywatchresetcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function MemoryWatchResetCommand.invoke"},{"location":"api/gef/#function-memorywatchresetcommandpost_load","text":"post_load() \u2192 None","title":"function MemoryWatchResetCommand.post_load"},{"location":"api/gef/#function-memorywatchresetcommandpre_load","text":"pre_load() \u2192 None","title":"function MemoryWatchResetCommand.pre_load"},{"location":"api/gef/#function-memorywatchresetcommandusage","text":"usage() \u2192 None","title":"function MemoryWatchResetCommand.usage"},{"location":"api/gef/#class-namedbreakpoint","text":"Breakpoint which shows a specified name, when hit.","title":"class NamedBreakpoint"},{"location":"api/gef/#function-namedbreakpoint__init__","text":"__init__(location: str, name: str) \u2192 None","title":"function NamedBreakpoint.__init__"},{"location":"api/gef/#function-namedbreakpointstop","text":"stop() \u2192 bool","title":"function NamedBreakpoint.stop"},{"location":"api/gef/#class-namedbreakpointcommand","text":"Sets a breakpoint and assigns a name to it, which will be shown, when it's hit.","title":"class NamedBreakpointCommand"},{"location":"api/gef/#function-namedbreakpointcommand__init__","text":"__init__() \u2192 None","title":"function NamedBreakpointCommand.__init__"},{"location":"api/gef/#property-namedbreakpointcommandsettings","text":"Return the list of settings for this command.","title":"property NamedBreakpointCommand.settings"},{"location":"api/gef/#function-namedbreakpointcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function NamedBreakpointCommand.add_setting"},{"location":"api/gef/#function-namedbreakpointcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function NamedBreakpointCommand.del_setting"},{"location":"api/gef/#function-namedbreakpointcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function NamedBreakpointCommand.wrapper"},{"location":"api/gef/#function-namedbreakpointcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function NamedBreakpointCommand.get_setting"},{"location":"api/gef/#function-namedbreakpointcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function NamedBreakpointCommand.has_setting"},{"location":"api/gef/#function-namedbreakpointcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function NamedBreakpointCommand.invoke"},{"location":"api/gef/#function-namedbreakpointcommandpost_load","text":"post_load() \u2192 None","title":"function NamedBreakpointCommand.post_load"},{"location":"api/gef/#function-namedbreakpointcommandpre_load","text":"pre_load() \u2192 None","title":"function NamedBreakpointCommand.pre_load"},{"location":"api/gef/#function-namedbreakpointcommandusage","text":"usage() \u2192 None","title":"function NamedBreakpointCommand.usage"},{"location":"api/gef/#class-nopcommand","text":"Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture aware.","title":"class NopCommand"},{"location":"api/gef/#function-nopcommand__init__","text":"__init__() \u2192 None","title":"function NopCommand.__init__"},{"location":"api/gef/#property-nopcommandsettings","text":"Return the list of settings for this command.","title":"property NopCommand.settings"},{"location":"api/gef/#function-nopcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function NopCommand.add_setting"},{"location":"api/gef/#function-nopcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function NopCommand.del_setting"},{"location":"api/gef/#function-nopcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function NopCommand.wrapper"},{"location":"api/gef/#function-nopcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function NopCommand.get_setting"},{"location":"api/gef/#function-nopcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function NopCommand.has_setting"},{"location":"api/gef/#function-nopcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function NopCommand.invoke"},{"location":"api/gef/#function-nopcommandpost_load","text":"post_load() \u2192 None","title":"function NopCommand.post_load"},{"location":"api/gef/#function-nopcommandpre_load","text":"pre_load() \u2192 None","title":"function NopCommand.pre_load"},{"location":"api/gef/#function-nopcommandusage","text":"usage() \u2192 None","title":"function NopCommand.usage"},{"location":"api/gef/#class-pcustomcommand","text":"Dump user defined structure. This command attempts to reproduce WinDBG awesome dt command for GDB and allows to apply structures (from symbols or custom) directly to an address. Custom structures can be defined in pure Python using ctypes, and should be stored in a specific directory, whose path must be stored in the pcustom.struct_path configuration setting.","title":"class PCustomCommand"},{"location":"api/gef/#function-pcustomcommand__init__","text":"__init__() \u2192 None","title":"function PCustomCommand.__init__"},{"location":"api/gef/#property-pcustomcommandsettings","text":"Return the list of settings for this command.","title":"property PCustomCommand.settings"},{"location":"api/gef/#function-pcustomcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PCustomCommand.add_setting"},{"location":"api/gef/#function-pcustomcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PCustomCommand.del_setting"},{"location":"api/gef/#function-pcustomcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PCustomCommand.wrapper"},{"location":"api/gef/#function-pcustomcommandexplode_type","text":"explode_type(arg: str) \u2192 Tuple[str, str]","title":"function PCustomCommand.explode_type"},{"location":"api/gef/#function-pcustomcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PCustomCommand.get_setting"},{"location":"api/gef/#function-pcustomcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PCustomCommand.has_setting"},{"location":"api/gef/#function-pcustomcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PCustomCommand.invoke"},{"location":"api/gef/#function-pcustomcommandpost_load","text":"post_load() \u2192 None","title":"function PCustomCommand.post_load"},{"location":"api/gef/#function-pcustomcommandpre_load","text":"pre_load() \u2192 None","title":"function PCustomCommand.pre_load"},{"location":"api/gef/#function-pcustomcommandusage","text":"usage() \u2192 None","title":"function PCustomCommand.usage"},{"location":"api/gef/#class-pcustomeditcommand","text":"PCustom: edit the content of a given structure","title":"class PCustomEditCommand"},{"location":"api/gef/#function-pcustomeditcommand__init__","text":"__init__() \u2192 None","title":"function PCustomEditCommand.__init__"},{"location":"api/gef/#property-pcustomeditcommandsettings","text":"Return the list of settings for this command.","title":"property PCustomEditCommand.settings"},{"location":"api/gef/#function-pcustomeditcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PCustomEditCommand.add_setting"},{"location":"api/gef/#function-pcustomeditcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PCustomEditCommand.del_setting"},{"location":"api/gef/#function-pcustomeditcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PCustomEditCommand.do_invoke"},{"location":"api/gef/#function-pcustomeditcommandexplode_type","text":"explode_type(arg: str) \u2192 Tuple[str, str]","title":"function PCustomEditCommand.explode_type"},{"location":"api/gef/#function-pcustomeditcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PCustomEditCommand.get_setting"},{"location":"api/gef/#function-pcustomeditcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PCustomEditCommand.has_setting"},{"location":"api/gef/#function-pcustomeditcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PCustomEditCommand.invoke"},{"location":"api/gef/#function-pcustomeditcommandpost_load","text":"post_load() \u2192 None","title":"function PCustomEditCommand.post_load"},{"location":"api/gef/#function-pcustomeditcommandpre_load","text":"pre_load() \u2192 None","title":"function PCustomEditCommand.pre_load"},{"location":"api/gef/#function-pcustomeditcommandusage","text":"usage() \u2192 None","title":"function PCustomEditCommand.usage"},{"location":"api/gef/#class-pcustomlistcommand","text":"PCustom: list available structures","title":"class PCustomListCommand"},{"location":"api/gef/#function-pcustomlistcommand__init__","text":"__init__() \u2192 None","title":"function PCustomListCommand.__init__"},{"location":"api/gef/#property-pcustomlistcommandsettings","text":"Return the list of settings for this command.","title":"property PCustomListCommand.settings"},{"location":"api/gef/#function-pcustomlistcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PCustomListCommand.add_setting"},{"location":"api/gef/#function-pcustomlistcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PCustomListCommand.del_setting"},{"location":"api/gef/#function-pcustomlistcommanddo_invoke","text":"do_invoke(_: List) \u2192 None Dump the list of all the structures and their respective.","title":"function PCustomListCommand.do_invoke"},{"location":"api/gef/#function-pcustomlistcommandexplode_type","text":"explode_type(arg: str) \u2192 Tuple[str, str]","title":"function PCustomListCommand.explode_type"},{"location":"api/gef/#function-pcustomlistcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PCustomListCommand.get_setting"},{"location":"api/gef/#function-pcustomlistcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PCustomListCommand.has_setting"},{"location":"api/gef/#function-pcustomlistcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PCustomListCommand.invoke"},{"location":"api/gef/#function-pcustomlistcommandpost_load","text":"post_load() \u2192 None","title":"function PCustomListCommand.post_load"},{"location":"api/gef/#function-pcustomlistcommandpre_load","text":"pre_load() \u2192 None","title":"function PCustomListCommand.pre_load"},{"location":"api/gef/#function-pcustomlistcommandusage","text":"usage() \u2192 None","title":"function PCustomListCommand.usage"},{"location":"api/gef/#class-pcustomshowcommand","text":"PCustom: show the content of a given structure","title":"class PCustomShowCommand"},{"location":"api/gef/#function-pcustomshowcommand__init__","text":"__init__() \u2192 None","title":"function PCustomShowCommand.__init__"},{"location":"api/gef/#property-pcustomshowcommandsettings","text":"Return the list of settings for this command.","title":"property PCustomShowCommand.settings"},{"location":"api/gef/#function-pcustomshowcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PCustomShowCommand.add_setting"},{"location":"api/gef/#function-pcustomshowcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PCustomShowCommand.del_setting"},{"location":"api/gef/#function-pcustomshowcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PCustomShowCommand.do_invoke"},{"location":"api/gef/#function-pcustomshowcommandexplode_type","text":"explode_type(arg: str) \u2192 Tuple[str, str]","title":"function PCustomShowCommand.explode_type"},{"location":"api/gef/#function-pcustomshowcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PCustomShowCommand.get_setting"},{"location":"api/gef/#function-pcustomshowcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PCustomShowCommand.has_setting"},{"location":"api/gef/#function-pcustomshowcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PCustomShowCommand.invoke"},{"location":"api/gef/#function-pcustomshowcommandpost_load","text":"post_load() \u2192 None","title":"function PCustomShowCommand.post_load"},{"location":"api/gef/#function-pcustomshowcommandpre_load","text":"pre_load() \u2192 None","title":"function PCustomShowCommand.pre_load"},{"location":"api/gef/#function-pcustomshowcommandusage","text":"usage() \u2192 None","title":"function PCustomShowCommand.usage"},{"location":"api/gef/#class-patchbytecommand","text":"Write specified BYTE to the specified address.","title":"class PatchByteCommand"},{"location":"api/gef/#function-patchbytecommand__init__","text":"__init__() \u2192 None","title":"function PatchByteCommand.__init__"},{"location":"api/gef/#property-patchbytecommandsettings","text":"Return the list of settings for this command.","title":"property PatchByteCommand.settings"},{"location":"api/gef/#function-patchbytecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchByteCommand.add_setting"},{"location":"api/gef/#function-patchbytecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchByteCommand.del_setting"},{"location":"api/gef/#function-patchbytecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatchByteCommand.wrapper"},{"location":"api/gef/#function-patchbytecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchByteCommand.get_setting"},{"location":"api/gef/#function-patchbytecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchByteCommand.has_setting"},{"location":"api/gef/#function-patchbytecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchByteCommand.invoke"},{"location":"api/gef/#function-patchbytecommandpost_load","text":"post_load() \u2192 None","title":"function PatchByteCommand.post_load"},{"location":"api/gef/#function-patchbytecommandpre_load","text":"pre_load() \u2192 None","title":"function PatchByteCommand.pre_load"},{"location":"api/gef/#function-patchbytecommandusage","text":"usage() \u2192 None","title":"function PatchByteCommand.usage"},{"location":"api/gef/#class-patchcommand","text":"Write specified values to the specified address.","title":"class PatchCommand"},{"location":"api/gef/#function-patchcommand__init__","text":"__init__() \u2192 None","title":"function PatchCommand.__init__"},{"location":"api/gef/#property-patchcommandsettings","text":"Return the list of settings for this command.","title":"property PatchCommand.settings"},{"location":"api/gef/#function-patchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchCommand.add_setting"},{"location":"api/gef/#function-patchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchCommand.del_setting"},{"location":"api/gef/#function-patchcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatchCommand.wrapper"},{"location":"api/gef/#function-patchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchCommand.get_setting"},{"location":"api/gef/#function-patchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchCommand.has_setting"},{"location":"api/gef/#function-patchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchCommand.invoke"},{"location":"api/gef/#function-patchcommandpost_load","text":"post_load() \u2192 None","title":"function PatchCommand.post_load"},{"location":"api/gef/#function-patchcommandpre_load","text":"pre_load() \u2192 None","title":"function PatchCommand.pre_load"},{"location":"api/gef/#function-patchcommandusage","text":"usage() \u2192 None","title":"function PatchCommand.usage"},{"location":"api/gef/#class-patchdwordcommand","text":"Write specified DWORD to the specified address.","title":"class PatchDwordCommand"},{"location":"api/gef/#function-patchdwordcommand__init__","text":"__init__() \u2192 None","title":"function PatchDwordCommand.__init__"},{"location":"api/gef/#property-patchdwordcommandsettings","text":"Return the list of settings for this command.","title":"property PatchDwordCommand.settings"},{"location":"api/gef/#function-patchdwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchDwordCommand.add_setting"},{"location":"api/gef/#function-patchdwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchDwordCommand.del_setting"},{"location":"api/gef/#function-patchdwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatchDwordCommand.wrapper"},{"location":"api/gef/#function-patchdwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchDwordCommand.get_setting"},{"location":"api/gef/#function-patchdwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchDwordCommand.has_setting"},{"location":"api/gef/#function-patchdwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchDwordCommand.invoke"},{"location":"api/gef/#function-patchdwordcommandpost_load","text":"post_load() \u2192 None","title":"function PatchDwordCommand.post_load"},{"location":"api/gef/#function-patchdwordcommandpre_load","text":"pre_load() \u2192 None","title":"function PatchDwordCommand.pre_load"},{"location":"api/gef/#function-patchdwordcommandusage","text":"usage() \u2192 None","title":"function PatchDwordCommand.usage"},{"location":"api/gef/#class-patchqwordcommand","text":"Write specified QWORD to the specified address.","title":"class PatchQwordCommand"},{"location":"api/gef/#function-patchqwordcommand__init__","text":"__init__() \u2192 None","title":"function PatchQwordCommand.__init__"},{"location":"api/gef/#property-patchqwordcommandsettings","text":"Return the list of settings for this command.","title":"property PatchQwordCommand.settings"},{"location":"api/gef/#function-patchqwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchQwordCommand.add_setting"},{"location":"api/gef/#function-patchqwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchQwordCommand.del_setting"},{"location":"api/gef/#function-patchqwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatchQwordCommand.wrapper"},{"location":"api/gef/#function-patchqwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchQwordCommand.get_setting"},{"location":"api/gef/#function-patchqwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchQwordCommand.has_setting"},{"location":"api/gef/#function-patchqwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchQwordCommand.invoke"},{"location":"api/gef/#function-patchqwordcommandpost_load","text":"post_load() \u2192 None","title":"function PatchQwordCommand.post_load"},{"location":"api/gef/#function-patchqwordcommandpre_load","text":"pre_load() \u2192 None","title":"function PatchQwordCommand.pre_load"},{"location":"api/gef/#function-patchqwordcommandusage","text":"usage() \u2192 None","title":"function PatchQwordCommand.usage"},{"location":"api/gef/#class-patchstringcommand","text":"Write specified string to the specified memory location pointed by ADDRESS.","title":"class PatchStringCommand"},{"location":"api/gef/#function-patchstringcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PatchStringCommand.__init__"},{"location":"api/gef/#property-patchstringcommandsettings","text":"Return the list of settings for this command.","title":"property PatchStringCommand.settings"},{"location":"api/gef/#function-patchstringcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchStringCommand.add_setting"},{"location":"api/gef/#function-patchstringcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchStringCommand.del_setting"},{"location":"api/gef/#function-patchstringcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PatchStringCommand.do_invoke"},{"location":"api/gef/#function-patchstringcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchStringCommand.get_setting"},{"location":"api/gef/#function-patchstringcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchStringCommand.has_setting"},{"location":"api/gef/#function-patchstringcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchStringCommand.invoke"},{"location":"api/gef/#function-patchstringcommandpost_load","text":"post_load() \u2192 None","title":"function PatchStringCommand.post_load"},{"location":"api/gef/#function-patchstringcommandpre_load","text":"pre_load() \u2192 None","title":"function PatchStringCommand.pre_load"},{"location":"api/gef/#function-patchstringcommandusage","text":"usage() \u2192 None","title":"function PatchStringCommand.usage"},{"location":"api/gef/#class-patchwordcommand","text":"Write specified WORD to the specified address.","title":"class PatchWordCommand"},{"location":"api/gef/#function-patchwordcommand__init__","text":"__init__() \u2192 None","title":"function PatchWordCommand.__init__"},{"location":"api/gef/#property-patchwordcommandsettings","text":"Return the list of settings for this command.","title":"property PatchWordCommand.settings"},{"location":"api/gef/#function-patchwordcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatchWordCommand.add_setting"},{"location":"api/gef/#function-patchwordcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatchWordCommand.del_setting"},{"location":"api/gef/#function-patchwordcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatchWordCommand.wrapper"},{"location":"api/gef/#function-patchwordcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatchWordCommand.get_setting"},{"location":"api/gef/#function-patchwordcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatchWordCommand.has_setting"},{"location":"api/gef/#function-patchwordcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatchWordCommand.invoke"},{"location":"api/gef/#function-patchwordcommandpost_load","text":"post_load() \u2192 None","title":"function PatchWordCommand.post_load"},{"location":"api/gef/#function-patchwordcommandpre_load","text":"pre_load() \u2192 None","title":"function PatchWordCommand.pre_load"},{"location":"api/gef/#function-patchwordcommandusage","text":"usage() \u2192 None","title":"function PatchWordCommand.usage"},{"location":"api/gef/#class-patterncommand","text":"Generate or Search a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture.","title":"class PatternCommand"},{"location":"api/gef/#function-patterncommand__init__","text":"__init__() \u2192 None","title":"function PatternCommand.__init__"},{"location":"api/gef/#property-patterncommandsettings","text":"Return the list of settings for this command.","title":"property PatternCommand.settings"},{"location":"api/gef/#function-patterncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatternCommand.add_setting"},{"location":"api/gef/#function-patterncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatternCommand.del_setting"},{"location":"api/gef/#function-patterncommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function PatternCommand.do_invoke"},{"location":"api/gef/#function-patterncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatternCommand.get_setting"},{"location":"api/gef/#function-patterncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatternCommand.has_setting"},{"location":"api/gef/#function-patterncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatternCommand.invoke"},{"location":"api/gef/#function-patterncommandpost_load","text":"post_load() \u2192 None","title":"function PatternCommand.post_load"},{"location":"api/gef/#function-patterncommandpre_load","text":"pre_load() \u2192 None","title":"function PatternCommand.pre_load"},{"location":"api/gef/#function-patterncommandusage","text":"usage() \u2192 None","title":"function PatternCommand.usage"},{"location":"api/gef/#class-patterncreatecommand","text":"Generate a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture.","title":"class PatternCreateCommand"},{"location":"api/gef/#function-patterncreatecommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PatternCreateCommand.__init__"},{"location":"api/gef/#property-patterncreatecommandsettings","text":"Return the list of settings for this command.","title":"property PatternCreateCommand.settings"},{"location":"api/gef/#function-patterncreatecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatternCreateCommand.add_setting"},{"location":"api/gef/#function-patterncreatecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatternCreateCommand.del_setting"},{"location":"api/gef/#function-patterncreatecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatternCreateCommand.wrapper"},{"location":"api/gef/#function-patterncreatecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatternCreateCommand.get_setting"},{"location":"api/gef/#function-patterncreatecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatternCreateCommand.has_setting"},{"location":"api/gef/#function-patterncreatecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatternCreateCommand.invoke"},{"location":"api/gef/#function-patterncreatecommandpost_load","text":"post_load() \u2192 None","title":"function PatternCreateCommand.post_load"},{"location":"api/gef/#function-patterncreatecommandpre_load","text":"pre_load() \u2192 None","title":"function PatternCreateCommand.pre_load"},{"location":"api/gef/#function-patterncreatecommandusage","text":"usage() \u2192 None","title":"function PatternCreateCommand.usage"},{"location":"api/gef/#class-patternsearchcommand","text":"Search a De Bruijn Sequence of unique substrings of length N and a maximum total length of MAX_LENGTH. The default value of N is set to match the currently loaded architecture. The PATTERN argument can be a GDB symbol (such as a register name), a string or a hexadecimal value","title":"class PatternSearchCommand"},{"location":"api/gef/#function-patternsearchcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PatternSearchCommand.__init__"},{"location":"api/gef/#property-patternsearchcommandsettings","text":"Return the list of settings for this command.","title":"property PatternSearchCommand.settings"},{"location":"api/gef/#function-patternsearchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PatternSearchCommand.add_setting"},{"location":"api/gef/#function-patternsearchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PatternSearchCommand.del_setting"},{"location":"api/gef/#function-patternsearchcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PatternSearchCommand.wrapper"},{"location":"api/gef/#function-patternsearchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PatternSearchCommand.get_setting"},{"location":"api/gef/#function-patternsearchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PatternSearchCommand.has_setting"},{"location":"api/gef/#function-patternsearchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PatternSearchCommand.invoke"},{"location":"api/gef/#function-patternsearchcommandpost_load","text":"post_load() \u2192 None","title":"function PatternSearchCommand.post_load"},{"location":"api/gef/#function-patternsearchcommandpre_load","text":"pre_load() \u2192 None","title":"function PatternSearchCommand.pre_load"},{"location":"api/gef/#function-patternsearchcommandsearch","text":"search(pattern: str, size: int, period: int) \u2192 None","title":"function PatternSearchCommand.search"},{"location":"api/gef/#function-patternsearchcommandusage","text":"usage() \u2192 None","title":"function PatternSearchCommand.usage"},{"location":"api/gef/#class-permission","text":"GEF representation of Linux permission.","title":"class Permission"},{"location":"api/gef/#class-phdr","text":"","title":"class Phdr"},{"location":"api/gef/#function-phdr__init__","text":"__init__(elf: __main__.Elf, off: int) \u2192 None","title":"function Phdr.__init__"},{"location":"api/gef/#class-pieattachcommand","text":"Do attach with PIE breakpoint support.","title":"class PieAttachCommand"},{"location":"api/gef/#function-pieattachcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieAttachCommand.__init__"},{"location":"api/gef/#property-pieattachcommandsettings","text":"Return the list of settings for this command.","title":"property PieAttachCommand.settings"},{"location":"api/gef/#function-pieattachcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieAttachCommand.add_setting"},{"location":"api/gef/#function-pieattachcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieAttachCommand.del_setting"},{"location":"api/gef/#function-pieattachcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PieAttachCommand.do_invoke"},{"location":"api/gef/#function-pieattachcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieAttachCommand.get_setting"},{"location":"api/gef/#function-pieattachcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieAttachCommand.has_setting"},{"location":"api/gef/#function-pieattachcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieAttachCommand.invoke"},{"location":"api/gef/#function-pieattachcommandpost_load","text":"post_load() \u2192 None","title":"function PieAttachCommand.post_load"},{"location":"api/gef/#function-pieattachcommandpre_load","text":"pre_load() \u2192 None","title":"function PieAttachCommand.pre_load"},{"location":"api/gef/#function-pieattachcommandusage","text":"usage() \u2192 None","title":"function PieAttachCommand.usage"},{"location":"api/gef/#class-piebreakpointcommand","text":"Set a PIE breakpoint at an offset from the target binaries base address.","title":"class PieBreakpointCommand"},{"location":"api/gef/#function-piebreakpointcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieBreakpointCommand.__init__"},{"location":"api/gef/#property-piebreakpointcommandsettings","text":"Return the list of settings for this command.","title":"property PieBreakpointCommand.settings"},{"location":"api/gef/#function-piebreakpointcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieBreakpointCommand.add_setting"},{"location":"api/gef/#function-piebreakpointcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieBreakpointCommand.del_setting"},{"location":"api/gef/#function-piebreakpointcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PieBreakpointCommand.wrapper"},{"location":"api/gef/#function-piebreakpointcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieBreakpointCommand.get_setting"},{"location":"api/gef/#function-piebreakpointcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieBreakpointCommand.has_setting"},{"location":"api/gef/#function-piebreakpointcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieBreakpointCommand.invoke"},{"location":"api/gef/#function-piebreakpointcommandpost_load","text":"post_load() \u2192 None","title":"function PieBreakpointCommand.post_load"},{"location":"api/gef/#function-piebreakpointcommandpre_load","text":"pre_load() \u2192 None","title":"function PieBreakpointCommand.pre_load"},{"location":"api/gef/#function-piebreakpointcommandset_pie_breakpoint","text":"set_pie_breakpoint(set_func: Callable[[int], str], addr: int) \u2192 None","title":"function PieBreakpointCommand.set_pie_breakpoint"},{"location":"api/gef/#function-piebreakpointcommandusage","text":"usage() \u2192 None","title":"function PieBreakpointCommand.usage"},{"location":"api/gef/#class-piecommand","text":"PIE breakpoint support.","title":"class PieCommand"},{"location":"api/gef/#function-piecommand__init__","text":"__init__() \u2192 None","title":"function PieCommand.__init__"},{"location":"api/gef/#property-piecommandsettings","text":"Return the list of settings for this command.","title":"property PieCommand.settings"},{"location":"api/gef/#function-piecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieCommand.add_setting"},{"location":"api/gef/#function-piecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieCommand.del_setting"},{"location":"api/gef/#function-piecommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PieCommand.do_invoke"},{"location":"api/gef/#function-piecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieCommand.get_setting"},{"location":"api/gef/#function-piecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieCommand.has_setting"},{"location":"api/gef/#function-piecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieCommand.invoke"},{"location":"api/gef/#function-piecommandpost_load","text":"post_load() \u2192 None","title":"function PieCommand.post_load"},{"location":"api/gef/#function-piecommandpre_load","text":"pre_load() \u2192 None","title":"function PieCommand.pre_load"},{"location":"api/gef/#function-piecommandusage","text":"usage() \u2192 None","title":"function PieCommand.usage"},{"location":"api/gef/#class-piedeletecommand","text":"Delete a PIE breakpoint.","title":"class PieDeleteCommand"},{"location":"api/gef/#function-piedeletecommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieDeleteCommand.__init__"},{"location":"api/gef/#property-piedeletecommandsettings","text":"Return the list of settings for this command.","title":"property PieDeleteCommand.settings"},{"location":"api/gef/#function-piedeletecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieDeleteCommand.add_setting"},{"location":"api/gef/#function-piedeletecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieDeleteCommand.del_setting"},{"location":"api/gef/#function-piedeletecommanddelete_bp","text":"delete_bp(breakpoints: List[__main__.PieVirtualBreakpoint]) \u2192 None","title":"function PieDeleteCommand.delete_bp"},{"location":"api/gef/#function-piedeletecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PieDeleteCommand.wrapper"},{"location":"api/gef/#function-piedeletecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieDeleteCommand.get_setting"},{"location":"api/gef/#function-piedeletecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieDeleteCommand.has_setting"},{"location":"api/gef/#function-piedeletecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieDeleteCommand.invoke"},{"location":"api/gef/#function-piedeletecommandpost_load","text":"post_load() \u2192 None","title":"function PieDeleteCommand.post_load"},{"location":"api/gef/#function-piedeletecommandpre_load","text":"pre_load() \u2192 None","title":"function PieDeleteCommand.pre_load"},{"location":"api/gef/#function-piedeletecommandusage","text":"usage() \u2192 None","title":"function PieDeleteCommand.usage"},{"location":"api/gef/#class-pieinfocommand","text":"Display breakpoint info.","title":"class PieInfoCommand"},{"location":"api/gef/#function-pieinfocommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieInfoCommand.__init__"},{"location":"api/gef/#property-pieinfocommandsettings","text":"Return the list of settings for this command.","title":"property PieInfoCommand.settings"},{"location":"api/gef/#function-pieinfocommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieInfoCommand.add_setting"},{"location":"api/gef/#function-pieinfocommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieInfoCommand.del_setting"},{"location":"api/gef/#function-pieinfocommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PieInfoCommand.wrapper"},{"location":"api/gef/#function-pieinfocommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieInfoCommand.get_setting"},{"location":"api/gef/#function-pieinfocommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieInfoCommand.has_setting"},{"location":"api/gef/#function-pieinfocommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieInfoCommand.invoke"},{"location":"api/gef/#function-pieinfocommandpost_load","text":"post_load() \u2192 None","title":"function PieInfoCommand.post_load"},{"location":"api/gef/#function-pieinfocommandpre_load","text":"pre_load() \u2192 None","title":"function PieInfoCommand.pre_load"},{"location":"api/gef/#function-pieinfocommandusage","text":"usage() \u2192 None","title":"function PieInfoCommand.usage"},{"location":"api/gef/#class-pieremotecommand","text":"Attach to a remote connection with PIE breakpoint support.","title":"class PieRemoteCommand"},{"location":"api/gef/#function-pieremotecommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieRemoteCommand.__init__"},{"location":"api/gef/#property-pieremotecommandsettings","text":"Return the list of settings for this command.","title":"property PieRemoteCommand.settings"},{"location":"api/gef/#function-pieremotecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieRemoteCommand.add_setting"},{"location":"api/gef/#function-pieremotecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieRemoteCommand.del_setting"},{"location":"api/gef/#function-pieremotecommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PieRemoteCommand.do_invoke"},{"location":"api/gef/#function-pieremotecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieRemoteCommand.get_setting"},{"location":"api/gef/#function-pieremotecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieRemoteCommand.has_setting"},{"location":"api/gef/#function-pieremotecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieRemoteCommand.invoke"},{"location":"api/gef/#function-pieremotecommandpost_load","text":"post_load() \u2192 None","title":"function PieRemoteCommand.post_load"},{"location":"api/gef/#function-pieremotecommandpre_load","text":"pre_load() \u2192 None","title":"function PieRemoteCommand.pre_load"},{"location":"api/gef/#function-pieremotecommandusage","text":"usage() \u2192 None","title":"function PieRemoteCommand.usage"},{"location":"api/gef/#class-pieruncommand","text":"Run process with PIE breakpoint support.","title":"class PieRunCommand"},{"location":"api/gef/#function-pieruncommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function PieRunCommand.__init__"},{"location":"api/gef/#property-pieruncommandsettings","text":"Return the list of settings for this command.","title":"property PieRunCommand.settings"},{"location":"api/gef/#function-pieruncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PieRunCommand.add_setting"},{"location":"api/gef/#function-pieruncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PieRunCommand.del_setting"},{"location":"api/gef/#function-pieruncommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function PieRunCommand.do_invoke"},{"location":"api/gef/#function-pieruncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PieRunCommand.get_setting"},{"location":"api/gef/#function-pieruncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PieRunCommand.has_setting"},{"location":"api/gef/#function-pieruncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PieRunCommand.invoke"},{"location":"api/gef/#function-pieruncommandpost_load","text":"post_load() \u2192 None","title":"function PieRunCommand.post_load"},{"location":"api/gef/#function-pieruncommandpre_load","text":"pre_load() \u2192 None","title":"function PieRunCommand.pre_load"},{"location":"api/gef/#function-pieruncommandusage","text":"usage() \u2192 None","title":"function PieRunCommand.usage"},{"location":"api/gef/#class-pievirtualbreakpoint","text":"PIE virtual breakpoint (not real breakpoint).","title":"class PieVirtualBreakpoint"},{"location":"api/gef/#function-pievirtualbreakpoint__init__","text":"__init__(set_func: Callable[[int], str], vbp_num: int, addr: int) \u2192 None","title":"function PieVirtualBreakpoint.__init__"},{"location":"api/gef/#function-pievirtualbreakpointdestroy","text":"destroy() \u2192 None","title":"function PieVirtualBreakpoint.destroy"},{"location":"api/gef/#function-pievirtualbreakpointinstantiate","text":"instantiate(base: int) \u2192 None","title":"function PieVirtualBreakpoint.instantiate"},{"location":"api/gef/#class-powerpc","text":"","title":"class PowerPC"},{"location":"api/gef/#property-powerpcendianness","text":"","title":"property PowerPC.endianness"},{"location":"api/gef/#property-powerpcfp","text":"","title":"property PowerPC.fp"},{"location":"api/gef/#property-powerpcpc","text":"","title":"property PowerPC.pc"},{"location":"api/gef/#property-powerpcregisters","text":"","title":"property PowerPC.registers"},{"location":"api/gef/#property-powerpcsp","text":"","title":"property PowerPC.sp"},{"location":"api/gef/#function-powerpcflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function PowerPC.flag_register_to_human"},{"location":"api/gef/#function-powerpcget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function PowerPC.get_ith_parameter"},{"location":"api/gef/#function-powerpcget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function PowerPC.get_ra"},{"location":"api/gef/#function-powerpcis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function PowerPC.is_branch_taken"},{"location":"api/gef/#function-powerpcis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC.is_call"},{"location":"api/gef/#function-powerpcis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC.is_conditional_branch"},{"location":"api/gef/#function-powerpcis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC.is_ret"},{"location":"api/gef/#function-powerpcmprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function PowerPC.mprotect_asm"},{"location":"api/gef/#function-powerpcregister","text":"register(name: str) \u2192 int","title":"function PowerPC.register"},{"location":"api/gef/#function-powerpcreset_caches","text":"reset_caches() \u2192 None","title":"function PowerPC.reset_caches"},{"location":"api/gef/#function-powerpcsupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function PowerPC.supports_gdb_arch"},{"location":"api/gef/#class-powerpc64","text":"","title":"class PowerPC64"},{"location":"api/gef/#property-powerpc64endianness","text":"","title":"property PowerPC64.endianness"},{"location":"api/gef/#property-powerpc64fp","text":"","title":"property PowerPC64.fp"},{"location":"api/gef/#property-powerpc64pc","text":"","title":"property PowerPC64.pc"},{"location":"api/gef/#property-powerpc64registers","text":"","title":"property PowerPC64.registers"},{"location":"api/gef/#property-powerpc64sp","text":"","title":"property PowerPC64.sp"},{"location":"api/gef/#function-powerpc64flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function PowerPC64.flag_register_to_human"},{"location":"api/gef/#function-powerpc64get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function PowerPC64.get_ith_parameter"},{"location":"api/gef/#function-powerpc64get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function PowerPC64.get_ra"},{"location":"api/gef/#function-powerpc64is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function PowerPC64.is_branch_taken"},{"location":"api/gef/#function-powerpc64is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC64.is_call"},{"location":"api/gef/#function-powerpc64is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC64.is_conditional_branch"},{"location":"api/gef/#function-powerpc64is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function PowerPC64.is_ret"},{"location":"api/gef/#function-powerpc64mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function PowerPC64.mprotect_asm"},{"location":"api/gef/#function-powerpc64register","text":"register(name: str) \u2192 int","title":"function PowerPC64.register"},{"location":"api/gef/#function-powerpc64reset_caches","text":"reset_caches() \u2192 None","title":"function PowerPC64.reset_caches"},{"location":"api/gef/#function-powerpc64supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function PowerPC64.supports_gdb_arch"},{"location":"api/gef/#class-printformatcommand","text":"Print bytes format in commonly used formats, such as literals in high level languages.","title":"class PrintFormatCommand"},{"location":"api/gef/#function-printformatcommand__init__","text":"__init__() \u2192 None","title":"function PrintFormatCommand.__init__"},{"location":"api/gef/#property-printformatcommandformat_matrix","text":"","title":"property PrintFormatCommand.format_matrix"},{"location":"api/gef/#property-printformatcommandsettings","text":"Return the list of settings for this command.","title":"property PrintFormatCommand.settings"},{"location":"api/gef/#function-printformatcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function PrintFormatCommand.add_setting"},{"location":"api/gef/#function-printformatcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function PrintFormatCommand.del_setting"},{"location":"api/gef/#function-printformatcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function PrintFormatCommand.wrapper"},{"location":"api/gef/#function-printformatcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function PrintFormatCommand.get_setting"},{"location":"api/gef/#function-printformatcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function PrintFormatCommand.has_setting"},{"location":"api/gef/#function-printformatcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function PrintFormatCommand.invoke"},{"location":"api/gef/#function-printformatcommandpost_load","text":"post_load() \u2192 None","title":"function PrintFormatCommand.post_load"},{"location":"api/gef/#function-printformatcommandpre_load","text":"pre_load() \u2192 None","title":"function PrintFormatCommand.pre_load"},{"location":"api/gef/#function-printformatcommandusage","text":"usage() \u2192 None","title":"function PrintFormatCommand.usage"},{"location":"api/gef/#class-processlistingcommand","text":"List and filter process. If a PATTERN is given as argument, results shown will be grepped by this pattern.","title":"class ProcessListingCommand"},{"location":"api/gef/#function-processlistingcommand__init__","text":"__init__() \u2192 None","title":"function ProcessListingCommand.__init__"},{"location":"api/gef/#property-processlistingcommandsettings","text":"Return the list of settings for this command.","title":"property ProcessListingCommand.settings"},{"location":"api/gef/#function-processlistingcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ProcessListingCommand.add_setting"},{"location":"api/gef/#function-processlistingcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ProcessListingCommand.del_setting"},{"location":"api/gef/#function-processlistingcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function ProcessListingCommand.wrapper"},{"location":"api/gef/#function-processlistingcommandget_processes","text":"get_processes() \u2192 Generator[Dict[str, str], NoneType, NoneType]","title":"function ProcessListingCommand.get_processes"},{"location":"api/gef/#function-processlistingcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ProcessListingCommand.get_setting"},{"location":"api/gef/#function-processlistingcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ProcessListingCommand.has_setting"},{"location":"api/gef/#function-processlistingcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ProcessListingCommand.invoke"},{"location":"api/gef/#function-processlistingcommandpost_load","text":"post_load() \u2192 None","title":"function ProcessListingCommand.post_load"},{"location":"api/gef/#function-processlistingcommandpre_load","text":"pre_load() \u2192 None","title":"function ProcessListingCommand.pre_load"},{"location":"api/gef/#function-processlistingcommandusage","text":"usage() \u2192 None","title":"function ProcessListingCommand.usage"},{"location":"api/gef/#class-processstatuscommand","text":"Extends the info given by GDB info proc , by giving an exhaustive description of the process status (file descriptors, ancestor, descendants, etc.).","title":"class ProcessStatusCommand"},{"location":"api/gef/#function-processstatuscommand__init__","text":"__init__() \u2192 None","title":"function ProcessStatusCommand.__init__"},{"location":"api/gef/#property-processstatuscommandsettings","text":"Return the list of settings for this command.","title":"property ProcessStatusCommand.settings"},{"location":"api/gef/#function-processstatuscommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ProcessStatusCommand.add_setting"},{"location":"api/gef/#function-processstatuscommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ProcessStatusCommand.del_setting"},{"location":"api/gef/#function-processstatuscommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ProcessStatusCommand.do_invoke"},{"location":"api/gef/#function-processstatuscommandget_children_pids","text":"get_children_pids(pid: int) \u2192 List[int]","title":"function ProcessStatusCommand.get_children_pids"},{"location":"api/gef/#function-processstatuscommandget_cmdline_of","text":"get_cmdline_of(pid: int) \u2192 str","title":"function ProcessStatusCommand.get_cmdline_of"},{"location":"api/gef/#function-processstatuscommandget_process_path_of","text":"get_process_path_of(pid: int) \u2192 str","title":"function ProcessStatusCommand.get_process_path_of"},{"location":"api/gef/#function-processstatuscommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ProcessStatusCommand.get_setting"},{"location":"api/gef/#function-processstatuscommandget_state_of","text":"get_state_of(pid: int) \u2192 Dict[str, str]","title":"function ProcessStatusCommand.get_state_of"},{"location":"api/gef/#function-processstatuscommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ProcessStatusCommand.has_setting"},{"location":"api/gef/#function-processstatuscommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ProcessStatusCommand.invoke"},{"location":"api/gef/#function-processstatuscommandlist_sockets","text":"list_sockets(pid: int) \u2192 List[int]","title":"function ProcessStatusCommand.list_sockets"},{"location":"api/gef/#function-processstatuscommandparse_ip_port","text":"parse_ip_port(addr: str) \u2192 Tuple[str, int]","title":"function ProcessStatusCommand.parse_ip_port"},{"location":"api/gef/#function-processstatuscommandpost_load","text":"post_load() \u2192 None","title":"function ProcessStatusCommand.post_load"},{"location":"api/gef/#function-processstatuscommandpre_load","text":"pre_load() \u2192 None","title":"function ProcessStatusCommand.pre_load"},{"location":"api/gef/#function-processstatuscommandshow_ancestor","text":"show_ancestor() \u2192 None","title":"function ProcessStatusCommand.show_ancestor"},{"location":"api/gef/#function-processstatuscommandshow_connections","text":"show_connections() \u2192 None","title":"function ProcessStatusCommand.show_connections"},{"location":"api/gef/#function-processstatuscommandshow_descendants","text":"show_descendants() \u2192 None","title":"function ProcessStatusCommand.show_descendants"},{"location":"api/gef/#function-processstatuscommandshow_fds","text":"show_fds() \u2192 None","title":"function ProcessStatusCommand.show_fds"},{"location":"api/gef/#function-processstatuscommandshow_info_proc","text":"show_info_proc() \u2192 None","title":"function ProcessStatusCommand.show_info_proc"},{"location":"api/gef/#function-processstatuscommandusage","text":"usage() \u2192 None","title":"function ProcessStatusCommand.usage"},{"location":"api/gef/#class-riscv","text":"","title":"class RISCV"},{"location":"api/gef/#property-riscvendianness","text":"","title":"property RISCV.endianness"},{"location":"api/gef/#property-riscvfp","text":"","title":"property RISCV.fp"},{"location":"api/gef/#property-riscvinstruction_length","text":"","title":"property RISCV.instruction_length"},{"location":"api/gef/#property-riscvpc","text":"","title":"property RISCV.pc"},{"location":"api/gef/#property-riscvptrsize","text":"","title":"property RISCV.ptrsize"},{"location":"api/gef/#property-riscvregisters","text":"","title":"property RISCV.registers"},{"location":"api/gef/#property-riscvsp","text":"","title":"property RISCV.sp"},{"location":"api/gef/#function-riscvflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function RISCV.flag_register_to_human"},{"location":"api/gef/#function-riscvget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function RISCV.get_ith_parameter"},{"location":"api/gef/#function-riscvget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function RISCV.get_ra"},{"location":"api/gef/#function-riscvis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function RISCV.is_branch_taken"},{"location":"api/gef/#function-riscvis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function RISCV.is_call"},{"location":"api/gef/#function-riscvis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function RISCV.is_conditional_branch"},{"location":"api/gef/#function-riscvis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function RISCV.is_ret"},{"location":"api/gef/#function-riscvmprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function RISCV.mprotect_asm"},{"location":"api/gef/#function-riscvregister","text":"register(name: str) \u2192 int","title":"function RISCV.register"},{"location":"api/gef/#function-riscvreset_caches","text":"reset_caches() \u2192 None","title":"function RISCV.reset_caches"},{"location":"api/gef/#function-riscvsupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function RISCV.supports_gdb_arch"},{"location":"api/gef/#class-redirectoutputcontext","text":"","title":"class RedirectOutputContext"},{"location":"api/gef/#function-redirectoutputcontext__init__","text":"__init__(to: str = '/dev/null') \u2192 None","title":"function RedirectOutputContext.__init__"},{"location":"api/gef/#class-remotecommand","text":"GDB target remote command on steroids. This command will use the remote procfs to create a local copy of the execution environment, including the target binary and its libraries in the local temporary directory (the value by default is in gef.config.tempdir ). Additionally, it will fetch all the /proc/PID/maps and loads all its information. If procfs is not available remotely, the command will likely fail. You can however still use the limited command provided by GDB target remote .","title":"class RemoteCommand"},{"location":"api/gef/#function-remotecommand__init__","text":"__init__() \u2192 None","title":"function RemoteCommand.__init__"},{"location":"api/gef/#property-remotecommandsettings","text":"Return the list of settings for this command.","title":"property RemoteCommand.settings"},{"location":"api/gef/#function-remotecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function RemoteCommand.add_setting"},{"location":"api/gef/#function-remotecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function RemoteCommand.del_setting"},{"location":"api/gef/#function-remotecommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function RemoteCommand.wrapper"},{"location":"api/gef/#function-remotecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function RemoteCommand.get_setting"},{"location":"api/gef/#function-remotecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function RemoteCommand.has_setting"},{"location":"api/gef/#function-remotecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function RemoteCommand.invoke"},{"location":"api/gef/#function-remotecommandpost_load","text":"post_load() \u2192 None","title":"function RemoteCommand.post_load"},{"location":"api/gef/#function-remotecommandpre_load","text":"pre_load() \u2192 None","title":"function RemoteCommand.pre_load"},{"location":"api/gef/#function-remotecommandusage","text":"usage() \u2192 None","title":"function RemoteCommand.usage"},{"location":"api/gef/#class-resetcachecommand","text":"Reset cache of all stored data. This command is here for debugging and test purposes, GEF handles properly the cache reset under \"normal\" scenario.","title":"class ResetCacheCommand"},{"location":"api/gef/#function-resetcachecommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ResetCacheCommand.__init__"},{"location":"api/gef/#property-resetcachecommandsettings","text":"Return the list of settings for this command.","title":"property ResetCacheCommand.settings"},{"location":"api/gef/#function-resetcachecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ResetCacheCommand.add_setting"},{"location":"api/gef/#function-resetcachecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ResetCacheCommand.del_setting"},{"location":"api/gef/#function-resetcachecommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function ResetCacheCommand.do_invoke"},{"location":"api/gef/#function-resetcachecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ResetCacheCommand.get_setting"},{"location":"api/gef/#function-resetcachecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ResetCacheCommand.has_setting"},{"location":"api/gef/#function-resetcachecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ResetCacheCommand.invoke"},{"location":"api/gef/#function-resetcachecommandpost_load","text":"post_load() \u2192 None","title":"function ResetCacheCommand.post_load"},{"location":"api/gef/#function-resetcachecommandpre_load","text":"pre_load() \u2192 None","title":"function ResetCacheCommand.pre_load"},{"location":"api/gef/#function-resetcachecommandusage","text":"usage() \u2192 None","title":"function ResetCacheCommand.usage"},{"location":"api/gef/#class-sparc","text":"Refs: - https://www.cse.scu.edu/~atkinson/teaching/sp05/259/sparc.pdf","title":"class SPARC"},{"location":"api/gef/#property-sparcendianness","text":"","title":"property SPARC.endianness"},{"location":"api/gef/#property-sparcfp","text":"","title":"property SPARC.fp"},{"location":"api/gef/#property-sparcpc","text":"","title":"property SPARC.pc"},{"location":"api/gef/#property-sparcptrsize","text":"","title":"property SPARC.ptrsize"},{"location":"api/gef/#property-sparcregisters","text":"","title":"property SPARC.registers"},{"location":"api/gef/#property-sparcsp","text":"","title":"property SPARC.sp"},{"location":"api/gef/#function-sparcflag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function SPARC.flag_register_to_human"},{"location":"api/gef/#function-sparcget_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function SPARC.get_ith_parameter"},{"location":"api/gef/#function-sparcget_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function SPARC.get_ra"},{"location":"api/gef/#function-sparcis_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function SPARC.is_branch_taken"},{"location":"api/gef/#function-sparcis_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function SPARC.is_call"},{"location":"api/gef/#function-sparcis_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function SPARC.is_conditional_branch"},{"location":"api/gef/#function-sparcis_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function SPARC.is_ret"},{"location":"api/gef/#function-sparcmprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function SPARC.mprotect_asm"},{"location":"api/gef/#function-sparcregister","text":"register(name: str) \u2192 int","title":"function SPARC.register"},{"location":"api/gef/#function-sparcreset_caches","text":"reset_caches() \u2192 None","title":"function SPARC.reset_caches"},{"location":"api/gef/#function-sparcsupports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function SPARC.supports_gdb_arch"},{"location":"api/gef/#class-sparc64","text":"Refs: - http://math-atlas.sourceforge.net/devel/assembly/abi_sysV_sparc.pdf - https://cr.yp.to/2005-590/sparcv9.pdf","title":"class SPARC64"},{"location":"api/gef/#property-sparc64endianness","text":"","title":"property SPARC64.endianness"},{"location":"api/gef/#property-sparc64fp","text":"","title":"property SPARC64.fp"},{"location":"api/gef/#property-sparc64pc","text":"","title":"property SPARC64.pc"},{"location":"api/gef/#property-sparc64ptrsize","text":"","title":"property SPARC64.ptrsize"},{"location":"api/gef/#property-sparc64registers","text":"","title":"property SPARC64.registers"},{"location":"api/gef/#property-sparc64sp","text":"","title":"property SPARC64.sp"},{"location":"api/gef/#function-sparc64flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function SPARC64.flag_register_to_human"},{"location":"api/gef/#function-sparc64get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function SPARC64.get_ith_parameter"},{"location":"api/gef/#function-sparc64get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function SPARC64.get_ra"},{"location":"api/gef/#function-sparc64is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function SPARC64.is_branch_taken"},{"location":"api/gef/#function-sparc64is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function SPARC64.is_call"},{"location":"api/gef/#function-sparc64is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function SPARC64.is_conditional_branch"},{"location":"api/gef/#function-sparc64is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function SPARC64.is_ret"},{"location":"api/gef/#function-sparc64mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function SPARC64.mprotect_asm"},{"location":"api/gef/#function-sparc64register","text":"register(name: str) \u2192 int","title":"function SPARC64.register"},{"location":"api/gef/#function-sparc64reset_caches","text":"reset_caches() \u2192 None","title":"function SPARC64.reset_caches"},{"location":"api/gef/#function-sparc64supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function SPARC64.supports_gdb_arch"},{"location":"api/gef/#class-scansectioncommand","text":"Search for addresses that are located in a memory mapping (haystack) that belonging to another (needle).","title":"class ScanSectionCommand"},{"location":"api/gef/#function-scansectioncommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ScanSectionCommand.__init__"},{"location":"api/gef/#property-scansectioncommandsettings","text":"Return the list of settings for this command.","title":"property ScanSectionCommand.settings"},{"location":"api/gef/#function-scansectioncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ScanSectionCommand.add_setting"},{"location":"api/gef/#function-scansectioncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ScanSectionCommand.del_setting"},{"location":"api/gef/#function-scansectioncommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ScanSectionCommand.do_invoke"},{"location":"api/gef/#function-scansectioncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ScanSectionCommand.get_setting"},{"location":"api/gef/#function-scansectioncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ScanSectionCommand.has_setting"},{"location":"api/gef/#function-scansectioncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ScanSectionCommand.invoke"},{"location":"api/gef/#function-scansectioncommandpost_load","text":"post_load() \u2192 None","title":"function ScanSectionCommand.post_load"},{"location":"api/gef/#function-scansectioncommandpre_load","text":"pre_load() \u2192 None","title":"function ScanSectionCommand.pre_load"},{"location":"api/gef/#function-scansectioncommandusage","text":"usage() \u2192 None","title":"function ScanSectionCommand.usage"},{"location":"api/gef/#class-searchpatterncommand","text":"SearchPatternCommand: search a pattern in memory. If given an hex value (starting with 0x) the command will also try to look for upwards cross-references to this address.","title":"class SearchPatternCommand"},{"location":"api/gef/#function-searchpatterncommand__init__","text":"__init__() \u2192 None","title":"function SearchPatternCommand.__init__"},{"location":"api/gef/#property-searchpatterncommandsettings","text":"Return the list of settings for this command.","title":"property SearchPatternCommand.settings"},{"location":"api/gef/#function-searchpatterncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function SearchPatternCommand.add_setting"},{"location":"api/gef/#function-searchpatterncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function SearchPatternCommand.del_setting"},{"location":"api/gef/#function-searchpatterncommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function SearchPatternCommand.do_invoke"},{"location":"api/gef/#function-searchpatterncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function SearchPatternCommand.get_setting"},{"location":"api/gef/#function-searchpatterncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function SearchPatternCommand.has_setting"},{"location":"api/gef/#function-searchpatterncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function SearchPatternCommand.invoke"},{"location":"api/gef/#function-searchpatterncommandpost_load","text":"post_load() \u2192 None","title":"function SearchPatternCommand.post_load"},{"location":"api/gef/#function-searchpatterncommandpre_load","text":"pre_load() \u2192 None","title":"function SearchPatternCommand.pre_load"},{"location":"api/gef/#function-searchpatterncommandprint_loc","text":"print_loc(loc: Tuple[int, int, str]) \u2192 None","title":"function SearchPatternCommand.print_loc"},{"location":"api/gef/#function-searchpatterncommandprint_section","text":"print_section(section: __main__.Section) \u2192 None","title":"function SearchPatternCommand.print_section"},{"location":"api/gef/#function-searchpatterncommandsearch_binpattern_by_address","text":"search_binpattern_by_address( binpattern: bytes, start_address: int, end_address: int ) \u2192 List[Tuple[int, int, Union[str, NoneType]]] Search a binary pattern within a range defined by arguments.","title":"function SearchPatternCommand.search_binpattern_by_address"},{"location":"api/gef/#function-searchpatterncommandsearch_pattern","text":"search_pattern(pattern: str, section_name: str) \u2192 None Search a pattern within the whole userland memory.","title":"function SearchPatternCommand.search_pattern"},{"location":"api/gef/#function-searchpatterncommandsearch_pattern_by_address","text":"search_pattern_by_address( pattern: str, start_address: int, end_address: int ) \u2192 List[Tuple[int, int, Union[str, NoneType]]] Search a pattern within a range defined by arguments.","title":"function SearchPatternCommand.search_pattern_by_address"},{"location":"api/gef/#function-searchpatterncommandusage","text":"usage() \u2192 None","title":"function SearchPatternCommand.usage"},{"location":"api/gef/#class-section","text":"GEF representation of process memory sections.","title":"class Section"},{"location":"api/gef/#function-section__init__","text":"__init__(**kwargs: Any) \u2192 None","title":"function Section.__init__"},{"location":"api/gef/#property-sectionrealpath","text":"","title":"property Section.realpath"},{"location":"api/gef/#property-sectionsize","text":"","title":"property Section.size"},{"location":"api/gef/#function-sectionis_executable","text":"is_executable() \u2192 bool","title":"function Section.is_executable"},{"location":"api/gef/#function-sectionis_readable","text":"is_readable() \u2192 bool","title":"function Section.is_readable"},{"location":"api/gef/#function-sectionis_writable","text":"is_writable() \u2192 bool","title":"function Section.is_writable"},{"location":"api/gef/#class-sectionbasefunction","text":"Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped","title":"class SectionBaseFunction"},{"location":"api/gef/#function-sectionbasefunction__init__","text":"__init__() \u2192 None","title":"function SectionBaseFunction.__init__"},{"location":"api/gef/#function-sectionbasefunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function SectionBaseFunction.arg_to_long"},{"location":"api/gef/#function-sectionbasefunctiondo_invoke","text":"do_invoke(args: List) \u2192 int","title":"function SectionBaseFunction.do_invoke"},{"location":"api/gef/#function-sectionbasefunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function SectionBaseFunction.invoke"},{"location":"api/gef/#class-shdr","text":"","title":"class Shdr"},{"location":"api/gef/#function-shdr__init__","text":"__init__(elf: Optional[__main__.Elf], off: int) \u2192 None","title":"function Shdr.__init__"},{"location":"api/gef/#class-shellcodecommand","text":"ShellcodeCommand uses @JonathanSalwan simple-yet-awesome shellcode API to download shellcodes.","title":"class ShellcodeCommand"},{"location":"api/gef/#function-shellcodecommand__init__","text":"__init__() \u2192 None","title":"function ShellcodeCommand.__init__"},{"location":"api/gef/#property-shellcodecommandsettings","text":"Return the list of settings for this command.","title":"property ShellcodeCommand.settings"},{"location":"api/gef/#function-shellcodecommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ShellcodeCommand.add_setting"},{"location":"api/gef/#function-shellcodecommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ShellcodeCommand.del_setting"},{"location":"api/gef/#function-shellcodecommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function ShellcodeCommand.do_invoke"},{"location":"api/gef/#function-shellcodecommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ShellcodeCommand.get_setting"},{"location":"api/gef/#function-shellcodecommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ShellcodeCommand.has_setting"},{"location":"api/gef/#function-shellcodecommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ShellcodeCommand.invoke"},{"location":"api/gef/#function-shellcodecommandpost_load","text":"post_load() \u2192 None","title":"function ShellcodeCommand.post_load"},{"location":"api/gef/#function-shellcodecommandpre_load","text":"pre_load() \u2192 None","title":"function ShellcodeCommand.pre_load"},{"location":"api/gef/#function-shellcodecommandusage","text":"usage() \u2192 None","title":"function ShellcodeCommand.usage"},{"location":"api/gef/#class-shellcodegetcommand","text":"Download shellcode from shell-storm's shellcode database.","title":"class ShellcodeGetCommand"},{"location":"api/gef/#function-shellcodegetcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ShellcodeGetCommand.__init__"},{"location":"api/gef/#property-shellcodegetcommandsettings","text":"Return the list of settings for this command.","title":"property ShellcodeGetCommand.settings"},{"location":"api/gef/#function-shellcodegetcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ShellcodeGetCommand.add_setting"},{"location":"api/gef/#function-shellcodegetcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ShellcodeGetCommand.del_setting"},{"location":"api/gef/#function-shellcodegetcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ShellcodeGetCommand.do_invoke"},{"location":"api/gef/#function-shellcodegetcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ShellcodeGetCommand.get_setting"},{"location":"api/gef/#function-shellcodegetcommandget_shellcode","text":"get_shellcode(sid: int) \u2192 None","title":"function ShellcodeGetCommand.get_shellcode"},{"location":"api/gef/#function-shellcodegetcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ShellcodeGetCommand.has_setting"},{"location":"api/gef/#function-shellcodegetcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ShellcodeGetCommand.invoke"},{"location":"api/gef/#function-shellcodegetcommandpost_load","text":"post_load() \u2192 None","title":"function ShellcodeGetCommand.post_load"},{"location":"api/gef/#function-shellcodegetcommandpre_load","text":"pre_load() \u2192 None","title":"function ShellcodeGetCommand.pre_load"},{"location":"api/gef/#function-shellcodegetcommandusage","text":"usage() \u2192 None","title":"function ShellcodeGetCommand.usage"},{"location":"api/gef/#class-shellcodesearchcommand","text":"Search pattern in shell-storm's shellcode database.","title":"class ShellcodeSearchCommand"},{"location":"api/gef/#function-shellcodesearchcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function ShellcodeSearchCommand.__init__"},{"location":"api/gef/#property-shellcodesearchcommandsettings","text":"Return the list of settings for this command.","title":"property ShellcodeSearchCommand.settings"},{"location":"api/gef/#function-shellcodesearchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function ShellcodeSearchCommand.add_setting"},{"location":"api/gef/#function-shellcodesearchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function ShellcodeSearchCommand.del_setting"},{"location":"api/gef/#function-shellcodesearchcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function ShellcodeSearchCommand.do_invoke"},{"location":"api/gef/#function-shellcodesearchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function ShellcodeSearchCommand.get_setting"},{"location":"api/gef/#function-shellcodesearchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function ShellcodeSearchCommand.has_setting"},{"location":"api/gef/#function-shellcodesearchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function ShellcodeSearchCommand.invoke"},{"location":"api/gef/#function-shellcodesearchcommandpost_load","text":"post_load() \u2192 None","title":"function ShellcodeSearchCommand.post_load"},{"location":"api/gef/#function-shellcodesearchcommandpre_load","text":"pre_load() \u2192 None","title":"function ShellcodeSearchCommand.pre_load"},{"location":"api/gef/#function-shellcodesearchcommandsearch_shellcode","text":"search_shellcode(search_options: List) \u2192 None","title":"function ShellcodeSearchCommand.search_shellcode"},{"location":"api/gef/#function-shellcodesearchcommandusage","text":"usage() \u2192 None","title":"function ShellcodeSearchCommand.usage"},{"location":"api/gef/#class-smartevalcommand","text":"SmartEval: Smart eval (vague approach to mimic WinDBG ? ).","title":"class SmartEvalCommand"},{"location":"api/gef/#function-smartevalcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function SmartEvalCommand.__init__"},{"location":"api/gef/#property-smartevalcommandsettings","text":"Return the list of settings for this command.","title":"property SmartEvalCommand.settings"},{"location":"api/gef/#function-smartevalcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function SmartEvalCommand.add_setting"},{"location":"api/gef/#function-smartevalcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function SmartEvalCommand.del_setting"},{"location":"api/gef/#function-smartevalcommanddistance","text":"distance(args: Tuple[str, str]) \u2192 None","title":"function SmartEvalCommand.distance"},{"location":"api/gef/#function-smartevalcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function SmartEvalCommand.do_invoke"},{"location":"api/gef/#function-smartevalcommandevaluate","text":"evaluate(expr: List[str]) \u2192 None","title":"function SmartEvalCommand.evaluate"},{"location":"api/gef/#function-smartevalcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function SmartEvalCommand.get_setting"},{"location":"api/gef/#function-smartevalcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function SmartEvalCommand.has_setting"},{"location":"api/gef/#function-smartevalcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function SmartEvalCommand.invoke"},{"location":"api/gef/#function-smartevalcommandpost_load","text":"post_load() \u2192 None","title":"function SmartEvalCommand.post_load"},{"location":"api/gef/#function-smartevalcommandpre_load","text":"pre_load() \u2192 None","title":"function SmartEvalCommand.pre_load"},{"location":"api/gef/#function-smartevalcommandusage","text":"usage() \u2192 None","title":"function SmartEvalCommand.usage"},{"location":"api/gef/#class-solvekernelsymbolcommand","text":"Solve kernel symbols from kallsyms table.","title":"class SolveKernelSymbolCommand"},{"location":"api/gef/#function-solvekernelsymbolcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function SolveKernelSymbolCommand.__init__"},{"location":"api/gef/#property-solvekernelsymbolcommandsettings","text":"Return the list of settings for this command.","title":"property SolveKernelSymbolCommand.settings"},{"location":"api/gef/#function-solvekernelsymbolcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function SolveKernelSymbolCommand.add_setting"},{"location":"api/gef/#function-solvekernelsymbolcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function SolveKernelSymbolCommand.del_setting"},{"location":"api/gef/#function-solvekernelsymbolcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function SolveKernelSymbolCommand.wrapper"},{"location":"api/gef/#function-solvekernelsymbolcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function SolveKernelSymbolCommand.get_setting"},{"location":"api/gef/#function-solvekernelsymbolcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function SolveKernelSymbolCommand.has_setting"},{"location":"api/gef/#function-solvekernelsymbolcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function SolveKernelSymbolCommand.invoke"},{"location":"api/gef/#function-solvekernelsymbolcommandpost_load","text":"post_load() \u2192 None","title":"function SolveKernelSymbolCommand.post_load"},{"location":"api/gef/#function-solvekernelsymbolcommandpre_load","text":"pre_load() \u2192 None","title":"function SolveKernelSymbolCommand.pre_load"},{"location":"api/gef/#function-solvekernelsymbolcommandusage","text":"usage() \u2192 None","title":"function SolveKernelSymbolCommand.usage"},{"location":"api/gef/#class-stackoffsetfunction","text":"Return the current stack base address plus an optional offset.","title":"class StackOffsetFunction"},{"location":"api/gef/#function-stackoffsetfunction__init__","text":"__init__() \u2192 None","title":"function StackOffsetFunction.__init__"},{"location":"api/gef/#function-stackoffsetfunctionarg_to_long","text":"arg_to_long(args: List, index: int, default: int = 0) \u2192 int","title":"function StackOffsetFunction.arg_to_long"},{"location":"api/gef/#function-stackoffsetfunctiondo_invoke","text":"do_invoke(args: List) \u2192 int","title":"function StackOffsetFunction.do_invoke"},{"location":"api/gef/#function-stackoffsetfunctioninvoke","text":"invoke(*args: Any) \u2192 int","title":"function StackOffsetFunction.invoke"},{"location":"api/gef/#class-stubbreakpoint","text":"Create a breakpoint to permanently disable a call (fork/alarm/signal/etc.).","title":"class StubBreakpoint"},{"location":"api/gef/#function-stubbreakpoint__init__","text":"__init__(func: str, retval: Optional[int]) \u2192 None","title":"function StubBreakpoint.__init__"},{"location":"api/gef/#function-stubbreakpointstop","text":"stop() \u2192 bool","title":"function StubBreakpoint.stop"},{"location":"api/gef/#class-stubcommand","text":"Stub out the specified function. This function is useful when needing to skip one function to be called and disrupt your runtime flow (ex. fork).","title":"class StubCommand"},{"location":"api/gef/#function-stubcommand__init__","text":"__init__() \u2192 None","title":"function StubCommand.__init__"},{"location":"api/gef/#property-stubcommandsettings","text":"Return the list of settings for this command.","title":"property StubCommand.settings"},{"location":"api/gef/#function-stubcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function StubCommand.add_setting"},{"location":"api/gef/#function-stubcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function StubCommand.del_setting"},{"location":"api/gef/#function-stubcommandwrapper","text":"wrapper(*args: Any, **kwargs: Any) \u2192 Callable","title":"function StubCommand.wrapper"},{"location":"api/gef/#function-stubcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function StubCommand.get_setting"},{"location":"api/gef/#function-stubcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function StubCommand.has_setting"},{"location":"api/gef/#function-stubcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function StubCommand.invoke"},{"location":"api/gef/#function-stubcommandpost_load","text":"post_load() \u2192 None","title":"function StubCommand.post_load"},{"location":"api/gef/#function-stubcommandpre_load","text":"pre_load() \u2192 None","title":"function StubCommand.pre_load"},{"location":"api/gef/#function-stubcommandusage","text":"usage() \u2192 None","title":"function StubCommand.usage"},{"location":"api/gef/#class-tracefreebreakpoint","text":"Track calls to free() and attempts to detect inconsistencies.","title":"class TraceFreeBreakpoint"},{"location":"api/gef/#function-tracefreebreakpoint__init__","text":"__init__() \u2192 None","title":"function TraceFreeBreakpoint.__init__"},{"location":"api/gef/#function-tracefreebreakpointstop","text":"stop() \u2192 bool","title":"function TraceFreeBreakpoint.stop"},{"location":"api/gef/#class-tracefreeretbreakpoint","text":"Internal temporary breakpoint to track free()d values.","title":"class TraceFreeRetBreakpoint"},{"location":"api/gef/#function-tracefreeretbreakpoint__init__","text":"__init__(addr: int) \u2192 None","title":"function TraceFreeRetBreakpoint.__init__"},{"location":"api/gef/#function-tracefreeretbreakpointstop","text":"stop() \u2192 bool","title":"function TraceFreeRetBreakpoint.stop"},{"location":"api/gef/#class-tracemallocbreakpoint","text":"Track allocations done with malloc() or calloc().","title":"class TraceMallocBreakpoint"},{"location":"api/gef/#function-tracemallocbreakpoint__init__","text":"__init__(name: str) \u2192 None","title":"function TraceMallocBreakpoint.__init__"},{"location":"api/gef/#function-tracemallocbreakpointstop","text":"stop() \u2192 bool","title":"function TraceMallocBreakpoint.stop"},{"location":"api/gef/#class-tracemallocretbreakpoint","text":"Internal temporary breakpoint to retrieve the return value of malloc().","title":"class TraceMallocRetBreakpoint"},{"location":"api/gef/#function-tracemallocretbreakpoint__init__","text":"__init__(size: int, name: str) \u2192 None","title":"function TraceMallocRetBreakpoint.__init__"},{"location":"api/gef/#function-tracemallocretbreakpointstop","text":"stop() \u2192 bool","title":"function TraceMallocRetBreakpoint.stop"},{"location":"api/gef/#class-tracereallocbreakpoint","text":"Track re-allocations done with realloc().","title":"class TraceReallocBreakpoint"},{"location":"api/gef/#function-tracereallocbreakpoint__init__","text":"__init__() \u2192 None","title":"function TraceReallocBreakpoint.__init__"},{"location":"api/gef/#function-tracereallocbreakpointstop","text":"stop() \u2192 bool","title":"function TraceReallocBreakpoint.stop"},{"location":"api/gef/#class-tracereallocretbreakpoint","text":"Internal temporary breakpoint to retrieve the return value of realloc().","title":"class TraceReallocRetBreakpoint"},{"location":"api/gef/#function-tracereallocretbreakpoint__init__","text":"__init__(ptr: int, size: int) \u2192 None","title":"function TraceReallocRetBreakpoint.__init__"},{"location":"api/gef/#function-tracereallocretbreakpointstop","text":"stop() \u2192 bool","title":"function TraceReallocRetBreakpoint.stop"},{"location":"api/gef/#class-traceruncommand","text":"Create a runtime trace of all instructions executed from $pc to LOCATION specified. The trace is stored in a text file that can be next imported in IDA Pro to visualize the runtime path.","title":"class TraceRunCommand"},{"location":"api/gef/#function-traceruncommand__init__","text":"__init__() \u2192 None","title":"function TraceRunCommand.__init__"},{"location":"api/gef/#property-traceruncommandsettings","text":"Return the list of settings for this command.","title":"property TraceRunCommand.settings"},{"location":"api/gef/#function-traceruncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function TraceRunCommand.add_setting"},{"location":"api/gef/#function-traceruncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function TraceRunCommand.del_setting"},{"location":"api/gef/#function-traceruncommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function TraceRunCommand.do_invoke"},{"location":"api/gef/#function-traceruncommandget_frames_size","text":"get_frames_size() \u2192 int","title":"function TraceRunCommand.get_frames_size"},{"location":"api/gef/#function-traceruncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function TraceRunCommand.get_setting"},{"location":"api/gef/#function-traceruncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function TraceRunCommand.has_setting"},{"location":"api/gef/#function-traceruncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function TraceRunCommand.invoke"},{"location":"api/gef/#function-traceruncommandpost_load","text":"post_load() \u2192 None","title":"function TraceRunCommand.post_load"},{"location":"api/gef/#function-traceruncommandpre_load","text":"pre_load() \u2192 None","title":"function TraceRunCommand.pre_load"},{"location":"api/gef/#function-traceruncommandstart_tracing","text":"start_tracing(loc_start: int, loc_end: int, depth: int) \u2192 None","title":"function TraceRunCommand.start_tracing"},{"location":"api/gef/#function-traceruncommandtrace","text":"trace(loc_start: int, loc_end: int, depth: int) \u2192 None","title":"function TraceRunCommand.trace"},{"location":"api/gef/#function-traceruncommandusage","text":"usage() \u2192 None","title":"function TraceRunCommand.usage"},{"location":"api/gef/#class-uafwatchpoint","text":"Custom watchpoints set TraceFreeBreakpoint() to monitor free()d pointers being used.","title":"class UafWatchpoint"},{"location":"api/gef/#function-uafwatchpoint__init__","text":"__init__(addr: int) \u2192 None","title":"function UafWatchpoint.__init__"},{"location":"api/gef/#function-uafwatchpointstop","text":"stop() \u2192 bool If this method is triggered, we likely have a UaF. Break the execution and report it.","title":"function UafWatchpoint.stop"},{"location":"api/gef/#class-vmmapcommand","text":"Display a comprehensive layout of the virtual memory mapping. If a filter argument, GEF will filter out the mapping whose pathname do not match that filter.","title":"class VMMapCommand"},{"location":"api/gef/#function-vmmapcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function VMMapCommand.__init__"},{"location":"api/gef/#property-vmmapcommandsettings","text":"Return the list of settings for this command.","title":"property VMMapCommand.settings"},{"location":"api/gef/#function-vmmapcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function VMMapCommand.add_setting"},{"location":"api/gef/#function-vmmapcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function VMMapCommand.del_setting"},{"location":"api/gef/#function-vmmapcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function VMMapCommand.do_invoke"},{"location":"api/gef/#function-vmmapcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function VMMapCommand.get_setting"},{"location":"api/gef/#function-vmmapcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function VMMapCommand.has_setting"},{"location":"api/gef/#function-vmmapcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function VMMapCommand.invoke"},{"location":"api/gef/#function-vmmapcommandis_integer","text":"is_integer(n: str) \u2192 bool","title":"function VMMapCommand.is_integer"},{"location":"api/gef/#function-vmmapcommandpost_load","text":"post_load() \u2192 None","title":"function VMMapCommand.post_load"},{"location":"api/gef/#function-vmmapcommandpre_load","text":"pre_load() \u2192 None","title":"function VMMapCommand.pre_load"},{"location":"api/gef/#function-vmmapcommandprint_entry","text":"print_entry(entry: __main__.Section) \u2192 None","title":"function VMMapCommand.print_entry"},{"location":"api/gef/#function-vmmapcommandshow_legend","text":"show_legend() \u2192 None","title":"function VMMapCommand.show_legend"},{"location":"api/gef/#function-vmmapcommandusage","text":"usage() \u2192 None","title":"function VMMapCommand.usage"},{"location":"api/gef/#class-versioncommand","text":"Display GEF version info.","title":"class VersionCommand"},{"location":"api/gef/#function-versioncommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function VersionCommand.__init__"},{"location":"api/gef/#property-versioncommandsettings","text":"Return the list of settings for this command.","title":"property VersionCommand.settings"},{"location":"api/gef/#function-versioncommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function VersionCommand.add_setting"},{"location":"api/gef/#function-versioncommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function VersionCommand.del_setting"},{"location":"api/gef/#function-versioncommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function VersionCommand.do_invoke"},{"location":"api/gef/#function-versioncommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function VersionCommand.get_setting"},{"location":"api/gef/#function-versioncommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function VersionCommand.has_setting"},{"location":"api/gef/#function-versioncommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function VersionCommand.invoke"},{"location":"api/gef/#function-versioncommandpost_load","text":"post_load() \u2192 None","title":"function VersionCommand.post_load"},{"location":"api/gef/#function-versioncommandpre_load","text":"pre_load() \u2192 None","title":"function VersionCommand.pre_load"},{"location":"api/gef/#function-versioncommandusage","text":"usage() \u2192 None","title":"function VersionCommand.usage"},{"location":"api/gef/#class-x86","text":"","title":"class X86"},{"location":"api/gef/#property-x86endianness","text":"","title":"property X86.endianness"},{"location":"api/gef/#property-x86fp","text":"","title":"property X86.fp"},{"location":"api/gef/#property-x86pc","text":"","title":"property X86.pc"},{"location":"api/gef/#property-x86ptrsize","text":"","title":"property X86.ptrsize"},{"location":"api/gef/#property-x86registers","text":"","title":"property X86.registers"},{"location":"api/gef/#property-x86sp","text":"","title":"property X86.sp"},{"location":"api/gef/#function-x86flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function X86.flag_register_to_human"},{"location":"api/gef/#function-x86get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]]","title":"function X86.get_ith_parameter"},{"location":"api/gef/#function-x86get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function X86.get_ra"},{"location":"api/gef/#function-x86is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function X86.is_branch_taken"},{"location":"api/gef/#function-x86is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function X86.is_call"},{"location":"api/gef/#function-x86is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function X86.is_conditional_branch"},{"location":"api/gef/#function-x86is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function X86.is_ret"},{"location":"api/gef/#function-x86mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function X86.mprotect_asm"},{"location":"api/gef/#function-x86register","text":"register(name: str) \u2192 int","title":"function X86.register"},{"location":"api/gef/#function-x86reset_caches","text":"reset_caches() \u2192 None","title":"function X86.reset_caches"},{"location":"api/gef/#function-x86supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function X86.supports_gdb_arch"},{"location":"api/gef/#class-x86_64","text":"","title":"class X86_64"},{"location":"api/gef/#property-x86_64endianness","text":"","title":"property X86_64.endianness"},{"location":"api/gef/#property-x86_64fp","text":"","title":"property X86_64.fp"},{"location":"api/gef/#property-x86_64pc","text":"","title":"property X86_64.pc"},{"location":"api/gef/#property-x86_64ptrsize","text":"","title":"property X86_64.ptrsize"},{"location":"api/gef/#property-x86_64registers","text":"","title":"property X86_64.registers"},{"location":"api/gef/#property-x86_64sp","text":"","title":"property X86_64.sp"},{"location":"api/gef/#function-x86_64flag_register_to_human","text":"flag_register_to_human(val: Optional[int] = None) \u2192 str","title":"function X86_64.flag_register_to_human"},{"location":"api/gef/#function-x86_64get_ith_parameter","text":"get_ith_parameter( i: int, in_func: bool = True ) \u2192 Tuple[str, Union[int, NoneType]] Retrieves the correct parameter used for the current function call.","title":"function X86_64.get_ith_parameter"},{"location":"api/gef/#function-x86_64get_ra","text":"get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 Union[int, NoneType]","title":"function X86_64.get_ra"},{"location":"api/gef/#function-x86_64is_branch_taken","text":"is_branch_taken(insn: __main__.Instruction) \u2192 Tuple[bool, str]","title":"function X86_64.is_branch_taken"},{"location":"api/gef/#function-x86_64is_call","text":"is_call(insn: __main__.Instruction) \u2192 bool","title":"function X86_64.is_call"},{"location":"api/gef/#function-x86_64is_conditional_branch","text":"is_conditional_branch(insn: __main__.Instruction) \u2192 bool","title":"function X86_64.is_conditional_branch"},{"location":"api/gef/#function-x86_64is_ret","text":"is_ret(insn: __main__.Instruction) \u2192 bool","title":"function X86_64.is_ret"},{"location":"api/gef/#function-x86_64mprotect_asm","text":"mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str","title":"function X86_64.mprotect_asm"},{"location":"api/gef/#function-x86_64register","text":"register(name: str) \u2192 int","title":"function X86_64.register"},{"location":"api/gef/#function-x86_64reset_caches","text":"reset_caches() \u2192 None","title":"function X86_64.reset_caches"},{"location":"api/gef/#function-x86_64supports_gdb_arch","text":"supports_gdb_arch(gdb_arch: str) \u2192 Union[bool, NoneType] If implemented by a child Architecture , this function dictates if the current class supports the loaded ELF file (which can be accessed via gef.binary ). This callback function will override any assumption made by GEF to determine the architecture.","title":"function X86_64.supports_gdb_arch"},{"location":"api/gef/#class-xaddressinfocommand","text":"Retrieve and display runtime information for the location(s) given as parameter.","title":"class XAddressInfoCommand"},{"location":"api/gef/#function-xaddressinfocommand__init__","text":"__init__() \u2192 None","title":"function XAddressInfoCommand.__init__"},{"location":"api/gef/#property-xaddressinfocommandsettings","text":"Return the list of settings for this command.","title":"property XAddressInfoCommand.settings"},{"location":"api/gef/#function-xaddressinfocommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function XAddressInfoCommand.add_setting"},{"location":"api/gef/#function-xaddressinfocommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function XAddressInfoCommand.del_setting"},{"location":"api/gef/#function-xaddressinfocommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function XAddressInfoCommand.do_invoke"},{"location":"api/gef/#function-xaddressinfocommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function XAddressInfoCommand.get_setting"},{"location":"api/gef/#function-xaddressinfocommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function XAddressInfoCommand.has_setting"},{"location":"api/gef/#function-xaddressinfocommandinfos","text":"infos(address: int) \u2192 None","title":"function XAddressInfoCommand.infos"},{"location":"api/gef/#function-xaddressinfocommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function XAddressInfoCommand.invoke"},{"location":"api/gef/#function-xaddressinfocommandpost_load","text":"post_load() \u2192 None","title":"function XAddressInfoCommand.post_load"},{"location":"api/gef/#function-xaddressinfocommandpre_load","text":"pre_load() \u2192 None","title":"function XAddressInfoCommand.pre_load"},{"location":"api/gef/#function-xaddressinfocommandusage","text":"usage() \u2192 None","title":"function XAddressInfoCommand.usage"},{"location":"api/gef/#class-xfilescommand","text":"Shows all libraries (and sections) loaded by binary. This command extends the GDB command info files , by retrieving more information from extra sources, and providing a better display. If an argument FILE is given, the output will grep information related to only that file. If an argument name is also given, the output will grep to the name within FILE.","title":"class XFilesCommand"},{"location":"api/gef/#function-xfilescommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function XFilesCommand.__init__"},{"location":"api/gef/#property-xfilescommandsettings","text":"Return the list of settings for this command.","title":"property XFilesCommand.settings"},{"location":"api/gef/#function-xfilescommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function XFilesCommand.add_setting"},{"location":"api/gef/#function-xfilescommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function XFilesCommand.del_setting"},{"location":"api/gef/#function-xfilescommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function XFilesCommand.do_invoke"},{"location":"api/gef/#function-xfilescommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function XFilesCommand.get_setting"},{"location":"api/gef/#function-xfilescommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function XFilesCommand.has_setting"},{"location":"api/gef/#function-xfilescommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function XFilesCommand.invoke"},{"location":"api/gef/#function-xfilescommandpost_load","text":"post_load() \u2192 None","title":"function XFilesCommand.post_load"},{"location":"api/gef/#function-xfilescommandpre_load","text":"pre_load() \u2192 None","title":"function XFilesCommand.pre_load"},{"location":"api/gef/#function-xfilescommandusage","text":"usage() \u2192 None","title":"function XFilesCommand.usage"},{"location":"api/gef/#class-xormemorycommand","text":"XOR a block of memory. The command allows to simply display the result, or patch it runtime at runtime.","title":"class XorMemoryCommand"},{"location":"api/gef/#function-xormemorycommand__init__","text":"__init__() \u2192 None","title":"function XorMemoryCommand.__init__"},{"location":"api/gef/#property-xormemorycommandsettings","text":"Return the list of settings for this command.","title":"property XorMemoryCommand.settings"},{"location":"api/gef/#function-xormemorycommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function XorMemoryCommand.add_setting"},{"location":"api/gef/#function-xormemorycommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function XorMemoryCommand.del_setting"},{"location":"api/gef/#function-xormemorycommanddo_invoke","text":"do_invoke(_: List[str]) \u2192 None","title":"function XorMemoryCommand.do_invoke"},{"location":"api/gef/#function-xormemorycommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function XorMemoryCommand.get_setting"},{"location":"api/gef/#function-xormemorycommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function XorMemoryCommand.has_setting"},{"location":"api/gef/#function-xormemorycommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function XorMemoryCommand.invoke"},{"location":"api/gef/#function-xormemorycommandpost_load","text":"post_load() \u2192 None","title":"function XorMemoryCommand.post_load"},{"location":"api/gef/#function-xormemorycommandpre_load","text":"pre_load() \u2192 None","title":"function XorMemoryCommand.pre_load"},{"location":"api/gef/#function-xormemorycommandusage","text":"usage() \u2192 None","title":"function XorMemoryCommand.usage"},{"location":"api/gef/#class-xormemorydisplaycommand","text":"Display a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format.","title":"class XorMemoryDisplayCommand"},{"location":"api/gef/#function-xormemorydisplaycommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function XorMemoryDisplayCommand.__init__"},{"location":"api/gef/#property-xormemorydisplaycommandsettings","text":"Return the list of settings for this command.","title":"property XorMemoryDisplayCommand.settings"},{"location":"api/gef/#function-xormemorydisplaycommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function XorMemoryDisplayCommand.add_setting"},{"location":"api/gef/#function-xormemorydisplaycommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function XorMemoryDisplayCommand.del_setting"},{"location":"api/gef/#function-xormemorydisplaycommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function XorMemoryDisplayCommand.do_invoke"},{"location":"api/gef/#function-xormemorydisplaycommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function XorMemoryDisplayCommand.get_setting"},{"location":"api/gef/#function-xormemorydisplaycommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function XorMemoryDisplayCommand.has_setting"},{"location":"api/gef/#function-xormemorydisplaycommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function XorMemoryDisplayCommand.invoke"},{"location":"api/gef/#function-xormemorydisplaycommandpost_load","text":"post_load() \u2192 None","title":"function XorMemoryDisplayCommand.post_load"},{"location":"api/gef/#function-xormemorydisplaycommandpre_load","text":"pre_load() \u2192 None","title":"function XorMemoryDisplayCommand.pre_load"},{"location":"api/gef/#function-xormemorydisplaycommandusage","text":"usage() \u2192 None","title":"function XorMemoryDisplayCommand.usage"},{"location":"api/gef/#class-xormemorypatchcommand","text":"Patch a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format.","title":"class XorMemoryPatchCommand"},{"location":"api/gef/#function-xormemorypatchcommand__init__","text":"__init__(*args: Any, **kwargs: Any) \u2192 None","title":"function XorMemoryPatchCommand.__init__"},{"location":"api/gef/#property-xormemorypatchcommandsettings","text":"Return the list of settings for this command.","title":"property XorMemoryPatchCommand.settings"},{"location":"api/gef/#function-xormemorypatchcommandadd_setting","text":"add_setting( name: str, value: Tuple[Any, type, str], description: str = '' ) \u2192 None add_setting is DEPRECATED and will be removed in the future. Use self[setting_name] = value instead","title":"function XorMemoryPatchCommand.add_setting"},{"location":"api/gef/#function-xormemorypatchcommanddel_setting","text":"del_setting(name: str) \u2192 None del_setting is DEPRECATED and will be removed in the future. Use del self[setting_name] instead","title":"function XorMemoryPatchCommand.del_setting"},{"location":"api/gef/#function-xormemorypatchcommanddo_invoke","text":"do_invoke(argv: List[str]) \u2192 None","title":"function XorMemoryPatchCommand.do_invoke"},{"location":"api/gef/#function-xormemorypatchcommandget_setting","text":"get_setting(name: str) \u2192 Any get_setting is DEPRECATED and will be removed in the future. Use self[setting_name] instead","title":"function XorMemoryPatchCommand.get_setting"},{"location":"api/gef/#function-xormemorypatchcommandhas_setting","text":"has_setting(name: str) \u2192 bool has_setting is DEPRECATED and will be removed in the future. Use setting_name in self instead","title":"function XorMemoryPatchCommand.has_setting"},{"location":"api/gef/#function-xormemorypatchcommandinvoke","text":"invoke(args: str, from_tty: bool) \u2192 None","title":"function XorMemoryPatchCommand.invoke"},{"location":"api/gef/#function-xormemorypatchcommandpost_load","text":"post_load() \u2192 None","title":"function XorMemoryPatchCommand.post_load"},{"location":"api/gef/#function-xormemorypatchcommandpre_load","text":"pre_load() \u2192 None","title":"function XorMemoryPatchCommand.pre_load"},{"location":"api/gef/#function-xormemorypatchcommandusage","text":"usage() \u2192 None","title":"function XorMemoryPatchCommand.usage"},{"location":"api/gef/#class-zone","text":"Zone(name, zone_start, zone_end, filename)","title":"class Zone"},{"location":"api/gef/#class-classproperty","text":"Make the attribute a classproperty . This file was automatically generated via lazydocs .","title":"class classproperty"},{"location":"commands/aliases/","text":"Command aliases Base command to add, remove, and list GEF defined aliases. gef\u27a4 aliases aliases (add|rm|list) Adding/Removing Aliases GEF defines its own aliasing mechanism which overrides the traditional alias that GDB provides through the built-in command alias . To add a new alias, simply use the aliases add command. The \"command\" parameter may contain spaces. aliases add [alias] [command] To remove an alias, simply use the aliases rm command. aliases rm [alias] Listing Aliases One can list aliases by using the aliases ls command. Some sample output of this command is seen below. [+] Aliases defined: fmtstr-helper \u2192 format-string-helper telescope \u2192 dereference dps \u2192 dereference dq \u2192 hexdump qword dd \u2192 hexdump dword dw \u2192 hexdump word dc \u2192 hexdump byte cs-dis \u2192 capstone-disassemble ctx \u2192 context start-break \u2192 entry-break ps \u2192 process-search [...] Using the Configuration File Users can also create/modify/delete aliases by editing the GEF configuration file, by default located at ~/.gef.rc . The aliases must be in the aliases section of the configuration file. Creating a new alias is as simple as creating a new entry in this section: $ nano ~/.gef.rc [...] [aliases] my-new-alias = gdb-or-gef-command <arg1> <arg2> <etc...> Bringing some PEDA and WinDBG flavours into GEF For example, for those (like me) who use WinDBG and like its bindings, they can be integrated into GDB via GEF aliases like this: $ nano ~/.gef.rc [...] [aliases] # some windbg aliases dps = dereference dq = hexdump qword dd = hexdump dword dw = hexdump word dc = hexdump byte dt = pcustom bl = info breakpoints bp = break be = enable breakpoints bd = disable breakpoints bc = delete breakpoints tbp = tbreak tba = thbreak pa = advance ptc = finish t = stepi p = nexti g = gef run uf = disassemble Or here are some PEDA aliases for people used to using PEDA who made the smart move to GEF . # some peda aliases telescope = dereference start = entry-break stack = dereference -l 10 $sp argv = show args kp = info stack findmem = search-pattern The aliases will be loaded next time you load GDB (and GEF ). Or you can force GEF to reload the settings with the command: gef\u27a4 gef restore","title":"aliases"},{"location":"commands/aliases/#command-aliases","text":"Base command to add, remove, and list GEF defined aliases. gef\u27a4 aliases aliases (add|rm|list)","title":"Command aliases"},{"location":"commands/aliases/#addingremoving-aliases","text":"GEF defines its own aliasing mechanism which overrides the traditional alias that GDB provides through the built-in command alias . To add a new alias, simply use the aliases add command. The \"command\" parameter may contain spaces. aliases add [alias] [command] To remove an alias, simply use the aliases rm command. aliases rm [alias]","title":"Adding/Removing Aliases"},{"location":"commands/aliases/#listing-aliases","text":"One can list aliases by using the aliases ls command. Some sample output of this command is seen below. [+] Aliases defined: fmtstr-helper \u2192 format-string-helper telescope \u2192 dereference dps \u2192 dereference dq \u2192 hexdump qword dd \u2192 hexdump dword dw \u2192 hexdump word dc \u2192 hexdump byte cs-dis \u2192 capstone-disassemble ctx \u2192 context start-break \u2192 entry-break ps \u2192 process-search [...]","title":"Listing Aliases"},{"location":"commands/aliases/#using-the-configuration-file","text":"Users can also create/modify/delete aliases by editing the GEF configuration file, by default located at ~/.gef.rc . The aliases must be in the aliases section of the configuration file. Creating a new alias is as simple as creating a new entry in this section: $ nano ~/.gef.rc [...] [aliases] my-new-alias = gdb-or-gef-command <arg1> <arg2> <etc...>","title":"Using the Configuration File"},{"location":"commands/aliases/#bringing-some-peda-and-windbg-flavours-into-gef","text":"For example, for those (like me) who use WinDBG and like its bindings, they can be integrated into GDB via GEF aliases like this: $ nano ~/.gef.rc [...] [aliases] # some windbg aliases dps = dereference dq = hexdump qword dd = hexdump dword dw = hexdump word dc = hexdump byte dt = pcustom bl = info breakpoints bp = break be = enable breakpoints bd = disable breakpoints bc = delete breakpoints tbp = tbreak tba = thbreak pa = advance ptc = finish t = stepi p = nexti g = gef run uf = disassemble Or here are some PEDA aliases for people used to using PEDA who made the smart move to GEF . # some peda aliases telescope = dereference start = entry-break stack = dereference -l 10 $sp argv = show args kp = info stack findmem = search-pattern The aliases will be loaded next time you load GDB (and GEF ). Or you can force GEF to reload the settings with the command: gef\u27a4 gef restore","title":"Bringing some PEDA and WinDBG flavours into GEF"},{"location":"commands/aslr/","text":"Command aslr Easily check, enable or disable ASLR on the debugged binary. Check the status: gef\u27a4 aslr ASLR is currently disabled Activate ASLR: gef\u27a4 aslr on [+] Enabling ASLR gef\u27a4 aslr ASLR is currently enabled De-activate ASLR: gef\u27a4 aslr off [+] Disabling ASLR Note : This command cannot affect a process that has already been loaded, to which GDB attached to later. The only way to disable this randomization is by setting the kernel setting /proc/sys/kernel/randomize_va_space to 0..","title":"aslr"},{"location":"commands/aslr/#command-aslr","text":"Easily check, enable or disable ASLR on the debugged binary. Check the status: gef\u27a4 aslr ASLR is currently disabled Activate ASLR: gef\u27a4 aslr on [+] Enabling ASLR gef\u27a4 aslr ASLR is currently enabled De-activate ASLR: gef\u27a4 aslr off [+] Disabling ASLR Note : This command cannot affect a process that has already been loaded, to which GDB attached to later. The only way to disable this randomization is by setting the kernel setting /proc/sys/kernel/randomize_va_space to 0..","title":"Command aslr"},{"location":"commands/canary/","text":"Command canary If the currently debugged process was compiled with the Smash Stack Protector (SSP) - i.e. the -fstack-protector flag was passed to the compiler, this command will display the value of the canary. This makes it convenient to avoid manually searching for this value in memory. The command canary does not take any arguments. gef\u27a4 canary","title":"canary"},{"location":"commands/canary/#command-canary","text":"If the currently debugged process was compiled with the Smash Stack Protector (SSP) - i.e. the -fstack-protector flag was passed to the compiler, this command will display the value of the canary. This makes it convenient to avoid manually searching for this value in memory. The command canary does not take any arguments. gef\u27a4 canary","title":"Command canary"},{"location":"commands/checksec/","text":"Command checksec The checksec command is inspired from checksec.sh . It provides a convenient way to determine which security protections are enabled in a binary. You can use the command on the currently debugged process: gef\u27a4 checksec [+] checksec for '/vagrant/test-bin' Canary: No NX Support: Yes PIE Support: No No RPATH: Yes No RUNPATH: Yes Partial RelRO: Yes Full RelRO: No Or specify directly the binary to check, for example: $ gdb -ex \"checksec ./tests/test-x86\"","title":"checksec"},{"location":"commands/checksec/#command-checksec","text":"The checksec command is inspired from checksec.sh . It provides a convenient way to determine which security protections are enabled in a binary. You can use the command on the currently debugged process: gef\u27a4 checksec [+] checksec for '/vagrant/test-bin' Canary: No NX Support: Yes PIE Support: No No RPATH: Yes No RUNPATH: Yes Partial RelRO: Yes Full RelRO: No Or specify directly the binary to check, for example: $ gdb -ex \"checksec ./tests/test-x86\"","title":"Command checksec"},{"location":"commands/config/","text":"Command gef config gef reads its config from a file which is by default located at ~/.gef.rc , but which can also be specified via the GEF_RC environment variable. In addition, gef can also be configured at runtime with the gef config command. To view all settings for all commands loaded: gef\u27a4 gef config Or to get one setting value: gef\u27a4 gef config pcustom.struct_path Of course you can edit the values. For example, if you want the screen to be cleared before displaying the current context when reaching a breakpoing: gef\u27a4 gef config context.clear_screen 1 To save the current settings for GEF to the file system to have those options persist across all your future GEF sessions, simply run: gef\u27a4 gef save [+] Configuration saved to '/home/vagrant/.gef.rc' Upon startup, if $GEF_RC points to an existing file, or otherwise if ${HOME}/.gef.rc exists, gef will automatically load its values. To reload the settings during the session, just run: gef\u27a4 gef restore [+] Configuration from '/home/hugsy/.gef.rc' restored You can tweak this configuration file outside your gdb session to suit your needs.","title":"config"},{"location":"commands/config/#command-gef-config","text":"gef reads its config from a file which is by default located at ~/.gef.rc , but which can also be specified via the GEF_RC environment variable. In addition, gef can also be configured at runtime with the gef config command. To view all settings for all commands loaded: gef\u27a4 gef config Or to get one setting value: gef\u27a4 gef config pcustom.struct_path Of course you can edit the values. For example, if you want the screen to be cleared before displaying the current context when reaching a breakpoing: gef\u27a4 gef config context.clear_screen 1 To save the current settings for GEF to the file system to have those options persist across all your future GEF sessions, simply run: gef\u27a4 gef save [+] Configuration saved to '/home/vagrant/.gef.rc' Upon startup, if $GEF_RC points to an existing file, or otherwise if ${HOME}/.gef.rc exists, gef will automatically load its values. To reload the settings during the session, just run: gef\u27a4 gef restore [+] Configuration from '/home/hugsy/.gef.rc' restored You can tweak this configuration file outside your gdb session to suit your needs.","title":"Command gef config"},{"location":"commands/context/","text":"Command context gef (not unlike PEDA or fG! famous gdbinit ) provides comprehensive context menu when hitting a breakpoint. The register context box displays current register values. Values in red indicate that this register has had its value changed since the last time execution stopped. It makes it convenient to track values. Register values can be also accessed and/or dereferenced through the reg command. The stack context box shows the 10 (by default but can be tweaked) entries in memory pointed by the stack pointer register. If those values are pointers, they are successively dereferenced. The code context box shows the 10 (by default but can be tweaked) next instructions to be executed. Adding custom context panes As well as using the built-in context panes, you can add your own custom pane that will be displayed at each break -like event with all the other panes. Custom panes can be added using the API: register_external_context_pane(pane_name, display_pane_function, pane_title_function) Check the API documentation to see a full usage of the registration API. Editing context layout gef allows you to configure your own setup for the display, by re-arranging the order with which contexts will be displayed. gef\u27a4 gef config context.layout There are currently 6 sections that can be displayed: legend : a text explanation of the color code regs : the state of registers stack : the content of memory pointed by $sp register code : the code being executed args : if stopping at a function calls, print the call arguments source : if compiled with source, this will show the corresponding line of source code threads : all the threads trace : the execution call trace extra : if an automatic behavior is detected (vulnerable format string, heap vulnerability, etc.) it will be displayed in this pane memory : peek into arbitrary memory locations To hide a section, simply use the context.layout setting, and prepend the section name with - or just omit it. gef\u27a4 gef config context.layout \"-legend regs stack code args -source -threads -trace extra memory\" This configuration will not display the legend , source , threads , and trace sections. The memory pane will display the content of all locations specified by the memory command. For instance, gef\u27a4 memory watch $sp 0x40 byte will print a hexdump version of 0x40 bytes of the stack. This command makes it convenient for tracking the evolution of arbitrary locations in memory. Tracked locations can be removed one by one using memory unwatch , or altogether with memory reset . The size of most sections are also customizable: nb_lines_stack configures how many lines of the stack to show. nb_lines_backtrack configures how many lines of the backtrace to show. nb_lines_code and nb_lines_code_prev configure how many lines to show after and before the PC, respectively. context.nb_lines_threads determines the number of lines to display inside the thread pane. This is convenient when debugging heavily multi-threaded applications (apache2, firefox, etc.). It receives an integer as value: if this value is -1 then all threads state will be displayed. Otherwise, if the value is set to N , then at most N thread states will be shown. To have the stack displayed with the largest stack addresses on top (i.e., grow the stack downward), enable the following setting: gef\u27a4 gef config context.grow_stack_down True If the saved instruction pointer is not within the portion of the stack being displayed, then a section is created that includes the saved ip and depending on the architecture the frame pointer. 0x00007fffffffc9e8\u2502+0x00: 0x00007ffff7a2d830 \u2192 <__main+240> mov edi, eax ($current_frame_savedip) 0x00007fffffffc9e0\u2502+0x00: 0x00000000004008c0 \u2192 <__init+0> push r15 \u2190 $rbp . . . (440 bytes skipped) 0x00007fffffffc7e8\u2502+0x38: 0x0000000000000000 0x00007fffffffc7e0\u2502+0x30: 0x0000000000000026 (\"&\"?) 0x00007fffffffc7d8\u2502+0x28: 0x0000000001958ac0 0x00007fffffffc7d0\u2502+0x20: 0x00007ffff7ffa2b0 \u2192 0x5f6f7364765f5f00 0x00007fffffffc7c8\u2502+0x18: 0x00007fff00000000 0x00007fffffffc7c0\u2502+0x10: 0x00007fffffffc950 \u2192 0x0000000000000000 0x00007fffffffc7b8\u2502+0x08: 0x0000000000000000 0x00007fffffffc7b0\u2502+0x00: 0x00007fffffffc7e4 \u2192 0x0000000000000000 \u2190 $rsp Redirecting context output to another tty/file By default, the gef context will be displayed on the current TTY. This can be overridden by setting context.redirect variable to have the context sent to another section. To do so, select the TTY/file/socket/etc. you want the context redirected to with gef config . Enter the command tty in the prompt: $ tty /dev/pts/0 Then tell gef about it! gef\u27a4 gef config context.redirect /dev/pts/0 Enjoy: To go back to normal, remove the value: gef\u27a4 gef config context.redirect \"\" Display individual sections You can display a single section by specifying it as an argument: gef\u27a4 context regs Multiple sections can be provided, even if they are not part of the current layout: gef\u27a4 context regs stack Examples Display the code section first, then register, and stack, hiding everything else: gef\u27a4 gef config context.layout \"code regs stack\" Stop showing the context sections when breaking: gef\u27a4 gef config context.enable 0 Clear the screen before showing the context sections when breaking: gef\u27a4 gef config context.clear_screen 1 Don't dereference the registers in the regs section (more compact): gef\u27a4 gef config context.show_registers_raw 1 Number of bytes of opcodes to display next to the disassembly. gef\u27a4 gef config context.show_opcodes_size 4 Don't 'peek' into the start of functions that are called. gef\u27a4 gef config context.peek_calls False Hide specific registers from the registers view. gef\u27a4 gef config context.ignore_registers \"$cs $ds $gs\" Hide the extra pc context info from the source code view. gef\u27a4 gef config context.show_source_code_variable_values 0 Show better definitions for call to libc functions. gef\u27a4 gef config context.libc_args True gef\u27a4 gef config context.libc_args_path /path/to/gef-extras/libc_args","title":"context"},{"location":"commands/context/#command-context","text":"gef (not unlike PEDA or fG! famous gdbinit ) provides comprehensive context menu when hitting a breakpoint. The register context box displays current register values. Values in red indicate that this register has had its value changed since the last time execution stopped. It makes it convenient to track values. Register values can be also accessed and/or dereferenced through the reg command. The stack context box shows the 10 (by default but can be tweaked) entries in memory pointed by the stack pointer register. If those values are pointers, they are successively dereferenced. The code context box shows the 10 (by default but can be tweaked) next instructions to be executed.","title":"Command context"},{"location":"commands/context/#adding-custom-context-panes","text":"As well as using the built-in context panes, you can add your own custom pane that will be displayed at each break -like event with all the other panes. Custom panes can be added using the API: register_external_context_pane(pane_name, display_pane_function, pane_title_function) Check the API documentation to see a full usage of the registration API.","title":"Adding custom context panes"},{"location":"commands/context/#editing-context-layout","text":"gef allows you to configure your own setup for the display, by re-arranging the order with which contexts will be displayed. gef\u27a4 gef config context.layout There are currently 6 sections that can be displayed: legend : a text explanation of the color code regs : the state of registers stack : the content of memory pointed by $sp register code : the code being executed args : if stopping at a function calls, print the call arguments source : if compiled with source, this will show the corresponding line of source code threads : all the threads trace : the execution call trace extra : if an automatic behavior is detected (vulnerable format string, heap vulnerability, etc.) it will be displayed in this pane memory : peek into arbitrary memory locations To hide a section, simply use the context.layout setting, and prepend the section name with - or just omit it. gef\u27a4 gef config context.layout \"-legend regs stack code args -source -threads -trace extra memory\" This configuration will not display the legend , source , threads , and trace sections. The memory pane will display the content of all locations specified by the memory command. For instance, gef\u27a4 memory watch $sp 0x40 byte will print a hexdump version of 0x40 bytes of the stack. This command makes it convenient for tracking the evolution of arbitrary locations in memory. Tracked locations can be removed one by one using memory unwatch , or altogether with memory reset . The size of most sections are also customizable: nb_lines_stack configures how many lines of the stack to show. nb_lines_backtrack configures how many lines of the backtrace to show. nb_lines_code and nb_lines_code_prev configure how many lines to show after and before the PC, respectively. context.nb_lines_threads determines the number of lines to display inside the thread pane. This is convenient when debugging heavily multi-threaded applications (apache2, firefox, etc.). It receives an integer as value: if this value is -1 then all threads state will be displayed. Otherwise, if the value is set to N , then at most N thread states will be shown. To have the stack displayed with the largest stack addresses on top (i.e., grow the stack downward), enable the following setting: gef\u27a4 gef config context.grow_stack_down True If the saved instruction pointer is not within the portion of the stack being displayed, then a section is created that includes the saved ip and depending on the architecture the frame pointer. 0x00007fffffffc9e8\u2502+0x00: 0x00007ffff7a2d830 \u2192 <__main+240> mov edi, eax ($current_frame_savedip) 0x00007fffffffc9e0\u2502+0x00: 0x00000000004008c0 \u2192 <__init+0> push r15 \u2190 $rbp . . . (440 bytes skipped) 0x00007fffffffc7e8\u2502+0x38: 0x0000000000000000 0x00007fffffffc7e0\u2502+0x30: 0x0000000000000026 (\"&\"?) 0x00007fffffffc7d8\u2502+0x28: 0x0000000001958ac0 0x00007fffffffc7d0\u2502+0x20: 0x00007ffff7ffa2b0 \u2192 0x5f6f7364765f5f00 0x00007fffffffc7c8\u2502+0x18: 0x00007fff00000000 0x00007fffffffc7c0\u2502+0x10: 0x00007fffffffc950 \u2192 0x0000000000000000 0x00007fffffffc7b8\u2502+0x08: 0x0000000000000000 0x00007fffffffc7b0\u2502+0x00: 0x00007fffffffc7e4 \u2192 0x0000000000000000 \u2190 $rsp","title":"Editing context layout"},{"location":"commands/context/#redirecting-context-output-to-another-ttyfile","text":"By default, the gef context will be displayed on the current TTY. This can be overridden by setting context.redirect variable to have the context sent to another section. To do so, select the TTY/file/socket/etc. you want the context redirected to with gef config . Enter the command tty in the prompt: $ tty /dev/pts/0 Then tell gef about it! gef\u27a4 gef config context.redirect /dev/pts/0 Enjoy: To go back to normal, remove the value: gef\u27a4 gef config context.redirect \"\"","title":"Redirecting context output to another tty/file"},{"location":"commands/context/#display-individual-sections","text":"You can display a single section by specifying it as an argument: gef\u27a4 context regs Multiple sections can be provided, even if they are not part of the current layout: gef\u27a4 context regs stack","title":"Display individual sections"},{"location":"commands/context/#examples","text":"Display the code section first, then register, and stack, hiding everything else: gef\u27a4 gef config context.layout \"code regs stack\" Stop showing the context sections when breaking: gef\u27a4 gef config context.enable 0 Clear the screen before showing the context sections when breaking: gef\u27a4 gef config context.clear_screen 1 Don't dereference the registers in the regs section (more compact): gef\u27a4 gef config context.show_registers_raw 1 Number of bytes of opcodes to display next to the disassembly. gef\u27a4 gef config context.show_opcodes_size 4 Don't 'peek' into the start of functions that are called. gef\u27a4 gef config context.peek_calls False Hide specific registers from the registers view. gef\u27a4 gef config context.ignore_registers \"$cs $ds $gs\" Hide the extra pc context info from the source code view. gef\u27a4 gef config context.show_source_code_variable_values 0 Show better definitions for call to libc functions. gef\u27a4 gef config context.libc_args True gef\u27a4 gef config context.libc_args_path /path/to/gef-extras/libc_args","title":"Examples"},{"location":"commands/dereference/","text":"Command dereference The dereference command (also aliased telescope for PEDA former users) aims to simplify the dereferencing of an address in GDB to determine the content it actually points to. It is a useful convienence function to spare to process of manually tracking values with successive x/x in GDB. dereference takes three optional arguments, a start address (or symbol or register, etc) to dereference (by default, $sp ), the number of consecutive addresses to dereference (by default, 10 ) and the base location for offset calculation (by default the same as the start address): gef\u27a4 dereference 0x00007fffffffdec0\u2502+0x0000: 0x00007ffff7ffe190 \u2192 0x0000555555554000 \u2192 jg 0x555555554047 \u2190 $rsp, $r13 0x00007fffffffdec8\u2502+0x0008: 0x00007ffff7ffe730 \u2192 0x00007ffff7fd3000 \u2192 0x00010102464c457f 0x00007fffffffded0\u2502+0x0010: 0x00007ffff7faa000 \u2192 0x00007ffff7de9000 \u2192 0x03010102464c457f 0x00007fffffffded8\u2502+0x0018: 0x00007ffff7ffd9f0 \u2192 0x00007ffff7fd5000 \u2192 0x00010102464c457f 0x00007fffffffdee0\u2502+0x0020: 0x00007fffffffdee0 \u2192 [loop detected] 0x00007fffffffdee8\u2502+0x0028: 0x00007fffffffdee0 \u2192 0x00007fffffffdee0 \u2192 [loop detected] 0x00007fffffffdef0\u2502+0x0030: 0x00000000f7fa57e3 0x00007fffffffdef8\u2502+0x0038: 0x0000555555755d60 \u2192 0x0000555555554a40 \u2192 cmp BYTE PTR [rip+0x201601], 0x0 # 0x555555756048 0x00007fffffffdf00\u2502+0x0040: 0x0000000000000004 0x00007fffffffdf08\u2502+0x0048: 0x0000000000000001 Here is an example with arguments: gef\u27a4 telescope $rbp+0x10 -l 8 0x00007fffffffdf40\u2502+0x0000: 0x00007ffff7fa5760 \u2192 0x00000000fbad2887 0x00007fffffffdf48\u2502+0x0008: 0x00000001f7e65b63 0x00007fffffffdf50\u2502+0x0010: 0x0000000000000004 0x00007fffffffdf58\u2502+0x0018: 0x0000000000000000 0x00007fffffffdf60\u2502+0x0020: 0x00007fffffffdfa0 \u2192 0x0000555555554fd0 \u2192 push r15 0x00007fffffffdf68\u2502+0x0028: 0x0000555555554980 \u2192 xor ebp, ebp 0x00007fffffffdf70\u2502+0x0030: 0x00007fffffffe080 \u2192 0x0000000000000001 0x00007fffffffdf78\u2502+0x0038: 0x0000000000000000 It also optionally accepts a second argument, the number of consecutive addresses to dereference (by default, 10 ). For example, if you want to dereference all the stack entries inside a function context (on a 64bit architecture): gef\u27a4 p ($rbp - $rsp)/8 $3 = 4 gef\u27a4 dereference -l 5 0x00007fffffffe170\u2502+0x0000: 0x0000000000400690 \u2192 push r15 \u2190 $rsp 0x00007fffffffe178\u2502+0x0008: 0x0000000000400460 \u2192 xor ebp, ebp 0x00007fffffffe180\u2502+0x0010: 0x00007fffffffe270 \u2192 0x1 0x00007fffffffe188\u2502+0x0018: 0x1 0x00007fffffffe190\u2502+0x0020: 0x0000000000400690 \u2192 push r15 \u2190 $rbp It is possible to change the offset calculation to use a different address than the start address: gef\u27a4 dereference $sp -l 7 -r $rbp 0x00007ffe6ddaa3e0\u2502-0x0030: 0x0000000000000000 \u2190 $rsp 0x00007ffe6ddaa3e8\u2502-0x0028: 0x0000000000400970 \u2192 <__libc_csu_init+0> push r15 0x00007ffe6ddaa3f0\u2502-0x0020: 0x0000000000000000 0x00007ffe6ddaa3f8\u2502-0x0018: 0x00000000004006e0 \u2192 <_start+0> xor ebp, ebp 0x00007ffe6ddaa400\u2502-0x0010: 0x00007ffe6ddaa500 \u2192 0x0000000000000001 0x00007ffe6ddaa408\u2502-0x0008: 0xa42456b3ee465800 0x00007ffe6ddaa410\u2502+0x0000: 0x0000000000000000 \u2190 $rbp","title":"dereference"},{"location":"commands/dereference/#command-dereference","text":"The dereference command (also aliased telescope for PEDA former users) aims to simplify the dereferencing of an address in GDB to determine the content it actually points to. It is a useful convienence function to spare to process of manually tracking values with successive x/x in GDB. dereference takes three optional arguments, a start address (or symbol or register, etc) to dereference (by default, $sp ), the number of consecutive addresses to dereference (by default, 10 ) and the base location for offset calculation (by default the same as the start address): gef\u27a4 dereference 0x00007fffffffdec0\u2502+0x0000: 0x00007ffff7ffe190 \u2192 0x0000555555554000 \u2192 jg 0x555555554047 \u2190 $rsp, $r13 0x00007fffffffdec8\u2502+0x0008: 0x00007ffff7ffe730 \u2192 0x00007ffff7fd3000 \u2192 0x00010102464c457f 0x00007fffffffded0\u2502+0x0010: 0x00007ffff7faa000 \u2192 0x00007ffff7de9000 \u2192 0x03010102464c457f 0x00007fffffffded8\u2502+0x0018: 0x00007ffff7ffd9f0 \u2192 0x00007ffff7fd5000 \u2192 0x00010102464c457f 0x00007fffffffdee0\u2502+0x0020: 0x00007fffffffdee0 \u2192 [loop detected] 0x00007fffffffdee8\u2502+0x0028: 0x00007fffffffdee0 \u2192 0x00007fffffffdee0 \u2192 [loop detected] 0x00007fffffffdef0\u2502+0x0030: 0x00000000f7fa57e3 0x00007fffffffdef8\u2502+0x0038: 0x0000555555755d60 \u2192 0x0000555555554a40 \u2192 cmp BYTE PTR [rip+0x201601], 0x0 # 0x555555756048 0x00007fffffffdf00\u2502+0x0040: 0x0000000000000004 0x00007fffffffdf08\u2502+0x0048: 0x0000000000000001 Here is an example with arguments: gef\u27a4 telescope $rbp+0x10 -l 8 0x00007fffffffdf40\u2502+0x0000: 0x00007ffff7fa5760 \u2192 0x00000000fbad2887 0x00007fffffffdf48\u2502+0x0008: 0x00000001f7e65b63 0x00007fffffffdf50\u2502+0x0010: 0x0000000000000004 0x00007fffffffdf58\u2502+0x0018: 0x0000000000000000 0x00007fffffffdf60\u2502+0x0020: 0x00007fffffffdfa0 \u2192 0x0000555555554fd0 \u2192 push r15 0x00007fffffffdf68\u2502+0x0028: 0x0000555555554980 \u2192 xor ebp, ebp 0x00007fffffffdf70\u2502+0x0030: 0x00007fffffffe080 \u2192 0x0000000000000001 0x00007fffffffdf78\u2502+0x0038: 0x0000000000000000 It also optionally accepts a second argument, the number of consecutive addresses to dereference (by default, 10 ). For example, if you want to dereference all the stack entries inside a function context (on a 64bit architecture): gef\u27a4 p ($rbp - $rsp)/8 $3 = 4 gef\u27a4 dereference -l 5 0x00007fffffffe170\u2502+0x0000: 0x0000000000400690 \u2192 push r15 \u2190 $rsp 0x00007fffffffe178\u2502+0x0008: 0x0000000000400460 \u2192 xor ebp, ebp 0x00007fffffffe180\u2502+0x0010: 0x00007fffffffe270 \u2192 0x1 0x00007fffffffe188\u2502+0x0018: 0x1 0x00007fffffffe190\u2502+0x0020: 0x0000000000400690 \u2192 push r15 \u2190 $rbp It is possible to change the offset calculation to use a different address than the start address: gef\u27a4 dereference $sp -l 7 -r $rbp 0x00007ffe6ddaa3e0\u2502-0x0030: 0x0000000000000000 \u2190 $rsp 0x00007ffe6ddaa3e8\u2502-0x0028: 0x0000000000400970 \u2192 <__libc_csu_init+0> push r15 0x00007ffe6ddaa3f0\u2502-0x0020: 0x0000000000000000 0x00007ffe6ddaa3f8\u2502-0x0018: 0x00000000004006e0 \u2192 <_start+0> xor ebp, ebp 0x00007ffe6ddaa400\u2502-0x0010: 0x00007ffe6ddaa500 \u2192 0x0000000000000001 0x00007ffe6ddaa408\u2502-0x0008: 0xa42456b3ee465800 0x00007ffe6ddaa410\u2502+0x0000: 0x0000000000000000 \u2190 $rbp","title":"Command dereference"},{"location":"commands/edit-flags/","text":"Command edit-flags The edit-flags command (alias: flags ) provides a quick and comprehensible way to view and edit the flag register for the architectures that support it. Without argument, the command will simply return a human-friendly display of the register flags. One or many arguments can be provided, following the syntax below: gef\u27a4 flags [(+|-|~)FLAGNAME ...] Where FLAGNAME is the name of the flag (case insensitive), and +|-|~ indicates the action on whether to set, unset, or toggle the flag. For instance, on x86 architecture, if we don't want to take a conditional jump (e.g. a jz instruction), but we want to have the Carry flag set, simply go with: gef\u27a4 flags -ZERO +CARRY","title":"edit-flags"},{"location":"commands/edit-flags/#command-edit-flags","text":"The edit-flags command (alias: flags ) provides a quick and comprehensible way to view and edit the flag register for the architectures that support it. Without argument, the command will simply return a human-friendly display of the register flags. One or many arguments can be provided, following the syntax below: gef\u27a4 flags [(+|-|~)FLAGNAME ...] Where FLAGNAME is the name of the flag (case insensitive), and +|-|~ indicates the action on whether to set, unset, or toggle the flag. For instance, on x86 architecture, if we don't want to take a conditional jump (e.g. a jz instruction), but we want to have the Carry flag set, simply go with: gef\u27a4 flags -ZERO +CARRY","title":"Command edit-flags"},{"location":"commands/elf-info/","text":"Command elf-info elf-info (alias elf ) provides some basic information on the currently loaded ELF binary: gef\u27a4 elf Magic : 7f 45 4c 46 Class : 0x2 - 64-bit Endianness : 0x1 - Little-Endian Version : 0x1 OS ABI : 0x0 - System V ABI Version : 0x0 Type : 0x2 - Executable Machine : 0x3e - x86-64 Program Header Table : 0x0000000000000040 Section Header Table : 0x00000000000021a8 Header Table : 0x0000000000000040 ELF Version : 0x1 Header size : 64 (0x40) Entry point : 0x0000000000400750 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Program Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ #] Type Offset Virtaddr Physaddr FileSiz MemSiz Flags Align [ 0] PHDR 0x40 0x400040 0x400040 0x1f8 0x1f8 R-X 0x8 [ 1] INTERP 0x238 0x400238 0x400238 0x1c 0x1c R-- 0x1 [ 2] LOAD 0x0 0x400000 0x400000 0x1414 0x1414 R-X 0x200000 [ 3] LOAD 0x1e10 0x601e10 0x601e10 0x268 0x330 RW- 0x200000 [ 4] DYNAMIC 0x1e28 0x601e28 0x601e28 0x1d0 0x1d0 RW- 0x8 [ 5] NOTE 0x254 0x400254 0x400254 0x44 0x44 R-- 0x4 [ 6] GNU_EH_FLAME 0x11a0 0x4011a0 0x4011a0 0x74 0x74 R-- 0x4 [ 7] GNU_STACK 0x0 0x0 0x0 0x0 0x0 RW- 0x10 [ 8] GNU_RELRO 0x1e10 0x601e10 0x601e10 0x1f0 0x1f0 R-- 0x1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Section Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ #] Name Type Address Offset Size EntSiz Flags Link Info Align [ 0] NULL 0x0 0x0 0x0 0x0 0x0 0x0 0x0 [ 1] .interp PROGBITS 0x400238 0x238 0x1c 0x0 A 0x0 0x0 0x1 [ 2] .note.ABI-tag NOTE 0x400254 0x254 0x20 0x0 A 0x0 0x0 0x4 [ 3] .note.gnu.build-id NOTE 0x400274 0x274 0x24 0x0 A 0x0 0x0 0x4 [ 4] .gnu.hash GNU_HASH 0x400298 0x298 0x30 0x0 A 0x5 0x0 0x8 [ 5] .dynsym DYNSYM 0x4002c8 0x2c8 0x168 0x18 A 0x6 0x1 0x8 [ 6] .dynstr STRTAB 0x400430 0x430 0x96 0x0 A 0x0 0x0 0x1 [ 7] .gnu.version HIOS 0x4004c6 0x4c6 0x1e 0x2 A 0x5 0x0 0x2 [ 8] .gnu.version_r GNU_verneed 0x4004e8 0x4e8 0x30 0x0 A 0x6 0x1 0x8 [ 9] .rela.dyn RELA 0x400518 0x518 0x60 0x18 A 0x5 0x0 0x8 [10] .rela.plt RELA 0x400578 0x578 0xf0 0x18 AI 0x5 0x18 0x8 [11] .init PROGBITS 0x400668 0x668 0x1a 0x0 AX 0x0 0x0 0x4 [12] .plt PROGBITS 0x400690 0x690 0xb0 0x10 AX 0x0 0x0 0x10 [13] .plt.got PROGBITS 0x400740 0x740 0x8 0x0 AX 0x0 0x0 0x8 [14] .text PROGBITS 0x400750 0x750 0x842 0x0 AX 0x0 0x0 0x10 [15] .fini PROGBITS 0x400f94 0xf94 0x9 0x0 AX 0x0 0x0 0x4 [16] .rodata PROGBITS 0x400fa0 0xfa0 0x200 0x0 A 0x0 0x0 0x8 [17] .eh_frame_hdr PROGBITS 0x4011a0 0x11a0 0x74 0x0 A 0x0 0x0 0x4 [18] .eh_frame PROGBITS 0x401218 0x1218 0x1fc 0x0 A 0x0 0x0 0x8 [19] .init_array INIT_ARRAY 0x601e10 0x1e10 0x8 0x0 WA 0x0 0x0 0x8 [20] .fini_array FINI_ARRAY 0x601e18 0x1e18 0x8 0x0 WA 0x0 0x0 0x8 [21] .jcr PROGBITS 0x601e20 0x1e20 0x8 0x0 WA 0x0 0x0 0x8 [22] .dynamic DYNAMIC 0x601e28 0x1e28 0x1d0 0x10 WA 0x6 0x0 0x8 [23] .got PROGBITS 0x601ff8 0x1ff8 0x8 0x8 WA 0x0 0x0 0x8 [24] .got.plt PROGBITS 0x602000 0x2000 0x68 0x8 WA 0x0 0x0 0x8 [25] .data PROGBITS 0x602068 0x2068 0x10 0x0 WA 0x0 0x0 0x8 [26] .bss NOBITS 0x602080 0x2078 0xc0 0x0 WA 0x0 0x0 0x20 [27] .comment PROGBITS 0x0 0x2078 0x34 0x1 MS 0x0 0x0 0x1 [28] .shstrtab STRTAB 0x0 0x20ac 0xfc 0x0 0x0 0x0 0x1 Optionally a filepath to another ELF binary can be provided to view the basic information for that binary instead. gef\u27a4 elf-info --filename /path/to/elf/executable","title":"elf-info"},{"location":"commands/elf-info/#command-elf-info","text":"elf-info (alias elf ) provides some basic information on the currently loaded ELF binary: gef\u27a4 elf Magic : 7f 45 4c 46 Class : 0x2 - 64-bit Endianness : 0x1 - Little-Endian Version : 0x1 OS ABI : 0x0 - System V ABI Version : 0x0 Type : 0x2 - Executable Machine : 0x3e - x86-64 Program Header Table : 0x0000000000000040 Section Header Table : 0x00000000000021a8 Header Table : 0x0000000000000040 ELF Version : 0x1 Header size : 64 (0x40) Entry point : 0x0000000000400750 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Program Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ #] Type Offset Virtaddr Physaddr FileSiz MemSiz Flags Align [ 0] PHDR 0x40 0x400040 0x400040 0x1f8 0x1f8 R-X 0x8 [ 1] INTERP 0x238 0x400238 0x400238 0x1c 0x1c R-- 0x1 [ 2] LOAD 0x0 0x400000 0x400000 0x1414 0x1414 R-X 0x200000 [ 3] LOAD 0x1e10 0x601e10 0x601e10 0x268 0x330 RW- 0x200000 [ 4] DYNAMIC 0x1e28 0x601e28 0x601e28 0x1d0 0x1d0 RW- 0x8 [ 5] NOTE 0x254 0x400254 0x400254 0x44 0x44 R-- 0x4 [ 6] GNU_EH_FLAME 0x11a0 0x4011a0 0x4011a0 0x74 0x74 R-- 0x4 [ 7] GNU_STACK 0x0 0x0 0x0 0x0 0x0 RW- 0x10 [ 8] GNU_RELRO 0x1e10 0x601e10 0x601e10 0x1f0 0x1f0 R-- 0x1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Section Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ #] Name Type Address Offset Size EntSiz Flags Link Info Align [ 0] NULL 0x0 0x0 0x0 0x0 0x0 0x0 0x0 [ 1] .interp PROGBITS 0x400238 0x238 0x1c 0x0 A 0x0 0x0 0x1 [ 2] .note.ABI-tag NOTE 0x400254 0x254 0x20 0x0 A 0x0 0x0 0x4 [ 3] .note.gnu.build-id NOTE 0x400274 0x274 0x24 0x0 A 0x0 0x0 0x4 [ 4] .gnu.hash GNU_HASH 0x400298 0x298 0x30 0x0 A 0x5 0x0 0x8 [ 5] .dynsym DYNSYM 0x4002c8 0x2c8 0x168 0x18 A 0x6 0x1 0x8 [ 6] .dynstr STRTAB 0x400430 0x430 0x96 0x0 A 0x0 0x0 0x1 [ 7] .gnu.version HIOS 0x4004c6 0x4c6 0x1e 0x2 A 0x5 0x0 0x2 [ 8] .gnu.version_r GNU_verneed 0x4004e8 0x4e8 0x30 0x0 A 0x6 0x1 0x8 [ 9] .rela.dyn RELA 0x400518 0x518 0x60 0x18 A 0x5 0x0 0x8 [10] .rela.plt RELA 0x400578 0x578 0xf0 0x18 AI 0x5 0x18 0x8 [11] .init PROGBITS 0x400668 0x668 0x1a 0x0 AX 0x0 0x0 0x4 [12] .plt PROGBITS 0x400690 0x690 0xb0 0x10 AX 0x0 0x0 0x10 [13] .plt.got PROGBITS 0x400740 0x740 0x8 0x0 AX 0x0 0x0 0x8 [14] .text PROGBITS 0x400750 0x750 0x842 0x0 AX 0x0 0x0 0x10 [15] .fini PROGBITS 0x400f94 0xf94 0x9 0x0 AX 0x0 0x0 0x4 [16] .rodata PROGBITS 0x400fa0 0xfa0 0x200 0x0 A 0x0 0x0 0x8 [17] .eh_frame_hdr PROGBITS 0x4011a0 0x11a0 0x74 0x0 A 0x0 0x0 0x4 [18] .eh_frame PROGBITS 0x401218 0x1218 0x1fc 0x0 A 0x0 0x0 0x8 [19] .init_array INIT_ARRAY 0x601e10 0x1e10 0x8 0x0 WA 0x0 0x0 0x8 [20] .fini_array FINI_ARRAY 0x601e18 0x1e18 0x8 0x0 WA 0x0 0x0 0x8 [21] .jcr PROGBITS 0x601e20 0x1e20 0x8 0x0 WA 0x0 0x0 0x8 [22] .dynamic DYNAMIC 0x601e28 0x1e28 0x1d0 0x10 WA 0x6 0x0 0x8 [23] .got PROGBITS 0x601ff8 0x1ff8 0x8 0x8 WA 0x0 0x0 0x8 [24] .got.plt PROGBITS 0x602000 0x2000 0x68 0x8 WA 0x0 0x0 0x8 [25] .data PROGBITS 0x602068 0x2068 0x10 0x0 WA 0x0 0x0 0x8 [26] .bss NOBITS 0x602080 0x2078 0xc0 0x0 WA 0x0 0x0 0x20 [27] .comment PROGBITS 0x0 0x2078 0x34 0x1 MS 0x0 0x0 0x1 [28] .shstrtab STRTAB 0x0 0x20ac 0xfc 0x0 0x0 0x0 0x1 Optionally a filepath to another ELF binary can be provided to view the basic information for that binary instead. gef\u27a4 elf-info --filename /path/to/elf/executable","title":"Command elf-info"},{"location":"commands/entry-break/","text":"Command entry-break The entry-break (alias start ) command's goal is to find and break at the most obvious entry point available in the binary. Since the binary will start running, some of the PLT entries will also be resolved, making further debugging easier. It will perform the following actions: Look up a main symbol. If found, set a temporary breakpoint and go. Otherwise, it will look up for __libc_start_main . If found, set a temporary breakpoint and go. Finally, if the previous two symbols are not found, it will get the entry point from the ELF header, set a breakpoint and run. This case should never fail if the ELF binary has a valid structure.","title":"entry-break"},{"location":"commands/entry-break/#command-entry-break","text":"The entry-break (alias start ) command's goal is to find and break at the most obvious entry point available in the binary. Since the binary will start running, some of the PLT entries will also be resolved, making further debugging easier. It will perform the following actions: Look up a main symbol. If found, set a temporary breakpoint and go. Otherwise, it will look up for __libc_start_main . If found, set a temporary breakpoint and go. Finally, if the previous two symbols are not found, it will get the entry point from the ELF header, set a breakpoint and run. This case should never fail if the ELF binary has a valid structure.","title":"Command entry-break"},{"location":"commands/eval/","text":"Command $ The $ command attempts to mimic WinDBG ? command. When provided one argument, it will evaluate the expression, and try to display the result with various formats: gef\u27a4 $ $pc+1 93824992252977 0x555555559431 0b10101010101010101010101010101011001010000110001 b'UUUU\\x941' b'1\\x94UUUU' gef\u27a4 $ -0x1000 -4096 0xfffffffffffff000 0b1111111111111111111111111111111111111111111111111111000000000000 b'\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00' b'\\x00\\xf0\\xff\\xff\\xff\\xff\\xff\\xff' With two arguments, it will simply compute the delta between them: gef\u27a4 vmmap libc Start End Offset Perm 0x00007ffff7812000 0x00007ffff79a7000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff79a7000 0x00007ffff7ba7000 0x0000000000195000 --- /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff7ba7000 0x00007ffff7bab000 0x0000000000195000 r-- /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff7bab000 0x00007ffff7bad000 0x0000000000199000 rw- /lib/x86_64-linux-gnu/libc-2.24.so gef\u27a4 $ 0x00007ffff7812000 0x00007ffff79a7000 -1658880 1658880 gef\u27a4 $ 1658880 1658880 0x195000 0b110010101000000000000 b'\\x19P\\x00' b'\\x00P\\x19'","title":"eval"},{"location":"commands/eval/#command","text":"The $ command attempts to mimic WinDBG ? command. When provided one argument, it will evaluate the expression, and try to display the result with various formats: gef\u27a4 $ $pc+1 93824992252977 0x555555559431 0b10101010101010101010101010101011001010000110001 b'UUUU\\x941' b'1\\x94UUUU' gef\u27a4 $ -0x1000 -4096 0xfffffffffffff000 0b1111111111111111111111111111111111111111111111111111000000000000 b'\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00' b'\\x00\\xf0\\xff\\xff\\xff\\xff\\xff\\xff' With two arguments, it will simply compute the delta between them: gef\u27a4 vmmap libc Start End Offset Perm 0x00007ffff7812000 0x00007ffff79a7000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff79a7000 0x00007ffff7ba7000 0x0000000000195000 --- /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff7ba7000 0x00007ffff7bab000 0x0000000000195000 r-- /lib/x86_64-linux-gnu/libc-2.24.so 0x00007ffff7bab000 0x00007ffff7bad000 0x0000000000199000 rw- /lib/x86_64-linux-gnu/libc-2.24.so gef\u27a4 $ 0x00007ffff7812000 0x00007ffff79a7000 -1658880 1658880 gef\u27a4 $ 1658880 1658880 0x195000 0b110010101000000000000 b'\\x19P\\x00' b'\\x00P\\x19'","title":"Command $"},{"location":"commands/format-string-helper/","text":"Command format-string-helper The format-string-helper command will create a GEF specific type of breakpoints dedicated to detecting potentially insecure format string when using the GlibC library. It will use this new breakpoint against several targets, including: printf() sprintf() fprintf() snprintf() vsnprintf() Just call the command to enable this functionality. fmtstr-helper is a shorter alias. gef\u27a4 fmtstr-helper Then start the binary execution. gef\u27a4 r If a potentially insecure entry is found, the breakpoint will trigger, stop the process execution, display the reason for trigger and the associated context.","title":"format-string-helper"},{"location":"commands/format-string-helper/#command-format-string-helper","text":"The format-string-helper command will create a GEF specific type of breakpoints dedicated to detecting potentially insecure format string when using the GlibC library. It will use this new breakpoint against several targets, including: printf() sprintf() fprintf() snprintf() vsnprintf() Just call the command to enable this functionality. fmtstr-helper is a shorter alias. gef\u27a4 fmtstr-helper Then start the binary execution. gef\u27a4 r If a potentially insecure entry is found, the breakpoint will trigger, stop the process execution, display the reason for trigger and the associated context.","title":"Command format-string-helper"},{"location":"commands/functions/","text":"Command functions The functions command will list all of the convenience functions provided by GEF. $_base([filepath]) -- Return the matching file's base address plus an optional offset. Defaults to the current file. Note that quotes need to be escaped. $_bss([offset]) -- Return the current bss base address plus the given offset. $_got([offset]) -- Return the current bss base address plus the given offset. $_heap([offset]) -- Return the current heap base address plus an optional offset. $_stack([offset]) -- Return the current stack base address plus an optional offset. These functions can be used as arguments to other commands to dynamically calculate values. gef\u27a4 deref -l 4 $_heap() 0x0000000000602000\u2502+0x00: 0x0000000000000000 \u2190 $r8 0x0000000000602008\u2502+0x08: 0x0000000000000021 (\"!\"?) 0x0000000000602010\u2502+0x10: 0x0000000000000000 \u2190 $rax, $rdx 0x0000000000602018\u2502+0x18: 0x0000000000000000 gef\u27a4 deref -l 4 $_heap(0x20) 0x0000000000602020\u2502+0x00: 0x0000000000000000 \u2190 $rsi 0x0000000000602028\u2502+0x08: 0x0000000000020fe1 0x0000000000602030\u2502+0x10: 0x0000000000000000 0x0000000000602038\u2502+0x18: 0x0000000000000000 gef\u27a4 deref -l 4 $_base(\\\"libc\\\") 0x00007ffff7da9000\u2502+0x0000: 0x03010102464c457f 0x00007ffff7da9008\u2502+0x0008: 0x0000000000000000 0x00007ffff7da9010\u2502+0x0010: 0x00000001003e0003 0x00007ffff7da9018\u2502+0x0018: 0x0000000000027c60","title":"functions"},{"location":"commands/functions/#command-functions","text":"The functions command will list all of the convenience functions provided by GEF. $_base([filepath]) -- Return the matching file's base address plus an optional offset. Defaults to the current file. Note that quotes need to be escaped. $_bss([offset]) -- Return the current bss base address plus the given offset. $_got([offset]) -- Return the current bss base address plus the given offset. $_heap([offset]) -- Return the current heap base address plus an optional offset. $_stack([offset]) -- Return the current stack base address plus an optional offset. These functions can be used as arguments to other commands to dynamically calculate values. gef\u27a4 deref -l 4 $_heap() 0x0000000000602000\u2502+0x00: 0x0000000000000000 \u2190 $r8 0x0000000000602008\u2502+0x08: 0x0000000000000021 (\"!\"?) 0x0000000000602010\u2502+0x10: 0x0000000000000000 \u2190 $rax, $rdx 0x0000000000602018\u2502+0x18: 0x0000000000000000 gef\u27a4 deref -l 4 $_heap(0x20) 0x0000000000602020\u2502+0x00: 0x0000000000000000 \u2190 $rsi 0x0000000000602028\u2502+0x08: 0x0000000000020fe1 0x0000000000602030\u2502+0x10: 0x0000000000000000 0x0000000000602038\u2502+0x18: 0x0000000000000000 gef\u27a4 deref -l 4 $_base(\\\"libc\\\") 0x00007ffff7da9000\u2502+0x0000: 0x03010102464c457f 0x00007ffff7da9008\u2502+0x0008: 0x0000000000000000 0x00007ffff7da9010\u2502+0x0010: 0x00000001003e0003 0x00007ffff7da9018\u2502+0x0018: 0x0000000000027c60","title":"Command functions"},{"location":"commands/gef-remote/","text":"Command gef-remote target remote is the traditional GDB way of debugging process or system remotely. However this command by itself does a limited job (80's bandwith FTW) to collect more information about the target, making the process of debugging more cumbersome. GEF greatly improves that state with the gef-remote command. \ud83d\udcdd Note : If using GEF, gef-remote must be your way or debugging remote processes, never target remote . Maintainers will not provide support or help if you decide to use the traditional target remote command. For many reasons, you cannot use target remote alone with GEF. gef-remote can function in 2 ways: - remote which is meant to enrich use of GDB target remote command, when connecting to a \"real\" gdbserver instance - qemu-mode when connecting to GDB stab of either qemu-user or qemu-system . The reason for this difference being that Qemu provides a lot less information that GEF can extract to enrich debugging. Whereas GDBServer allows to download remote file (therefore allowing to create a small identical environment), GDB stub in Qemu does not support file transfer. As a consequence, in order to use GEF in qemu mode, it is required to provide the binary being debugged. GEF will create a mock (limited) environment so that all its most useful features are available. Remote mode remote If you want to remotely debug a binary that you already have, you simply need to tell to gdb where to find the debug information. For example, if we want to debug uname , we do on the server: $ gdbserver :1234 /tmp/default.out Process /tmp/default.out created; pid = 258932 Listening on port 1234 On the client, when the original gdb would use target remote , GEF's syntax is roughly similar (shown running in debug mode for more verbose output, but you don't have to): $ gdb -ex 'gef config gef.debug 1' GEF for linux ready, type `gef' to start, `gef config' to configure 90 commands loaded and 5 functions added for GDB 10.2 using Python engine 3.8 gef\u27a4 gef-remote localhost 1234 [=] [remote] initializing remote session with localhost:1234 under /tmp/tmp8qd0r7iw [=] [remote] Installing new objfile handlers [=] [remote] Enabling extended remote: False [=] [remote] Executing 'target remote localhost:1234' Reading /tmp/default.out from remote target... warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead. Reading /tmp/default.out from remote target... Reading symbols from target:/tmp/default.out... [=] [remote] in remote_objfile_handler(target:/tmp/default.out)) [=] [remote] downloading '/tmp/default.out' -> '/tmp/tmp8qd0r7iw/tmp/default.out' Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading /lib64/ld-linux-x86-64.so.2 from remote target... [=] [remote] in remote_objfile_handler(/usr/lib/debug/.build-id/45/87364908de169dec62ffa538170118c1c3a078.debug)) [=] [remote] in remote_objfile_handler(target:/lib64/ld-linux-x86-64.so.2)) [=] [remote] downloading '/lib64/ld-linux-x86-64.so.2' -> '/tmp/tmp8qd0r7iw/lib64/ld-linux-x86-64.so.2' [=] [remote] in remote_objfile_handler(system-supplied DSO at 0x7ffff7fcd000)) [*] [remote] skipping 'system-supplied DSO at 0x7ffff7fcd000' 0x00007ffff7fd0100 in _start () from target:/lib64/ld-linux-x86-64.so.2 [=] Setting up as remote session [=] [remote] downloading '/proc/258932/maps' -> '/tmp/tmp8qd0r7iw/proc/258932/maps' [=] [remote] downloading '/proc/258932/environ' -> '/tmp/tmp8qd0r7iw/proc/258932/environ' [=] [remote] downloading '/proc/258932/cmdline' -> '/tmp/tmp8qd0r7iw/proc/258932/cmdline' [...] And finally breaking into the program, showing the current context: You will also notice the prompt has changed to indicate the debugging mode is now \"remote\". Besides that, all of GEF features are available: remote-extended Extended mode works the same as remote . Being an extended session, gdbserver has not spawned or attached to any process. Therefore, all that's required is to add the --pid flag when calling gef-remote , along with the process ID of the process to debug. Qemu mode Qemu mode of gef-remote allows to connect to the Qemu GDB stub which allows to live debug into either a binary ( qemu-user ) or even the kernel ( qemu-system ), of any architecture supported by GEF, which makes now even more sense \ud83d\ude09 And using it is very straight forward. qemu-user Run qemu-x86_64 :1234 /bin/ls Use --qemu-user and --qemu-binary /bin/ls when starting gef-remote qemu-system To test locally, you can use the mini image linux x64 vm here . 1. Run ./run.sh 2. Use --qemu-user and --qemu-binary vmlinuz when starting gef-remote","title":"gef-remote"},{"location":"commands/gef-remote/#command-gef-remote","text":"target remote is the traditional GDB way of debugging process or system remotely. However this command by itself does a limited job (80's bandwith FTW) to collect more information about the target, making the process of debugging more cumbersome. GEF greatly improves that state with the gef-remote command. \ud83d\udcdd Note : If using GEF, gef-remote must be your way or debugging remote processes, never target remote . Maintainers will not provide support or help if you decide to use the traditional target remote command. For many reasons, you cannot use target remote alone with GEF. gef-remote can function in 2 ways: - remote which is meant to enrich use of GDB target remote command, when connecting to a \"real\" gdbserver instance - qemu-mode when connecting to GDB stab of either qemu-user or qemu-system . The reason for this difference being that Qemu provides a lot less information that GEF can extract to enrich debugging. Whereas GDBServer allows to download remote file (therefore allowing to create a small identical environment), GDB stub in Qemu does not support file transfer. As a consequence, in order to use GEF in qemu mode, it is required to provide the binary being debugged. GEF will create a mock (limited) environment so that all its most useful features are available.","title":"Command gef-remote"},{"location":"commands/gef-remote/#remote-mode","text":"","title":"Remote mode"},{"location":"commands/gef-remote/#remote","text":"If you want to remotely debug a binary that you already have, you simply need to tell to gdb where to find the debug information. For example, if we want to debug uname , we do on the server: $ gdbserver :1234 /tmp/default.out Process /tmp/default.out created; pid = 258932 Listening on port 1234 On the client, when the original gdb would use target remote , GEF's syntax is roughly similar (shown running in debug mode for more verbose output, but you don't have to): $ gdb -ex 'gef config gef.debug 1' GEF for linux ready, type `gef' to start, `gef config' to configure 90 commands loaded and 5 functions added for GDB 10.2 using Python engine 3.8 gef\u27a4 gef-remote localhost 1234 [=] [remote] initializing remote session with localhost:1234 under /tmp/tmp8qd0r7iw [=] [remote] Installing new objfile handlers [=] [remote] Enabling extended remote: False [=] [remote] Executing 'target remote localhost:1234' Reading /tmp/default.out from remote target... warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead. Reading /tmp/default.out from remote target... Reading symbols from target:/tmp/default.out... [=] [remote] in remote_objfile_handler(target:/tmp/default.out)) [=] [remote] downloading '/tmp/default.out' -> '/tmp/tmp8qd0r7iw/tmp/default.out' Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading /lib64/ld-linux-x86-64.so.2 from remote target... [=] [remote] in remote_objfile_handler(/usr/lib/debug/.build-id/45/87364908de169dec62ffa538170118c1c3a078.debug)) [=] [remote] in remote_objfile_handler(target:/lib64/ld-linux-x86-64.so.2)) [=] [remote] downloading '/lib64/ld-linux-x86-64.so.2' -> '/tmp/tmp8qd0r7iw/lib64/ld-linux-x86-64.so.2' [=] [remote] in remote_objfile_handler(system-supplied DSO at 0x7ffff7fcd000)) [*] [remote] skipping 'system-supplied DSO at 0x7ffff7fcd000' 0x00007ffff7fd0100 in _start () from target:/lib64/ld-linux-x86-64.so.2 [=] Setting up as remote session [=] [remote] downloading '/proc/258932/maps' -> '/tmp/tmp8qd0r7iw/proc/258932/maps' [=] [remote] downloading '/proc/258932/environ' -> '/tmp/tmp8qd0r7iw/proc/258932/environ' [=] [remote] downloading '/proc/258932/cmdline' -> '/tmp/tmp8qd0r7iw/proc/258932/cmdline' [...] And finally breaking into the program, showing the current context: You will also notice the prompt has changed to indicate the debugging mode is now \"remote\". Besides that, all of GEF features are available:","title":"remote"},{"location":"commands/gef-remote/#remote-extended","text":"Extended mode works the same as remote . Being an extended session, gdbserver has not spawned or attached to any process. Therefore, all that's required is to add the --pid flag when calling gef-remote , along with the process ID of the process to debug.","title":"remote-extended"},{"location":"commands/gef-remote/#qemu-mode","text":"Qemu mode of gef-remote allows to connect to the Qemu GDB stub which allows to live debug into either a binary ( qemu-user ) or even the kernel ( qemu-system ), of any architecture supported by GEF, which makes now even more sense \ud83d\ude09 And using it is very straight forward.","title":"Qemu mode"},{"location":"commands/gef-remote/#qemu-user","text":"Run qemu-x86_64 :1234 /bin/ls Use --qemu-user and --qemu-binary /bin/ls when starting gef-remote","title":"qemu-user"},{"location":"commands/gef-remote/#qemu-system","text":"To test locally, you can use the mini image linux x64 vm here . 1. Run ./run.sh 2. Use --qemu-user and --qemu-binary vmlinuz when starting gef-remote","title":"qemu-system"},{"location":"commands/gef/","text":"Command gef GEF Base Command Displays a list of GEF commands and their descriptions. gef\u27a4 gef \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF - GDB Enhanced Features \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 $ -- SmartEval: Smart eval (vague approach to mimic WinDBG `?`). aslr -- View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not attached). This command allows to change that setting. assemble -- Inline code assemble. Architecture can be set in GEF runtime config (default x86-32). (alias: asm) bincompare -- BincompareCommand: compare an binary file with the memory position looking for badchars. bytearray -- BytearrayCommand: Generate a bytearray to be compared with possible badchars. [...snip...] GEF Missing Command GEF is fully battery-included. However in some rare cases, it is possible that not all commands be loaded. If that's the case the command gef missing will detail which command failed to load, along with a (likely) reason. Read the documentation for a solution, or reach out on the Discord. gef\u27a4 gef missing [*] Command `XXXX` is missing, reason \u2192 YYYYY. GEF Config Command Allows the user to set/view settings for the current debugging session. For making the changes persistent see the gef save entry. Using gef config by itself just shows all of the available settings and their values. gef\u27a4 gef config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 context.clear_screen (bool) = False context.enable (bool) = True context.grow_stack_down (bool) = False context.ignore_registers (str) = \"\" context.layout (str) = \"-code -stack\" context.libc_args (bool) = False [...snip...] To filter the config settings you can use gef config [setting] . gef\u27a4 gef config theme \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings matching 'theme' \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 theme.context_title_line (str) = \"gray\" theme.context_title_message (str) = \"cyan\" theme.default_title_line (str) = \"gray\" theme.default_title_message (str) = \"cyan\" [...snip...] You can use gef config [setting] [value] to set a setting for the current session (see example below). gef\u27a4 gef config theme.address_stack blue GEF Save Command The gef save command saves the current settings (set with gef config ) to the user's ~/.gef.rc file (making the changes persistent). gef\u27a4 gef save [+] Configuration saved to '/home/michael/.gef.rc' GEF Restore Command Using gef restore loads and applies settings from the ~/.gef.rc file to the current session. This is useful if you are modifying your GEF configuration file and want to see the changes without completely reloading GEF. gef\u27a4 gef restore [+] Configuration from '/home/michael/.gef.rc' restored GEF Set Command The GEF set command allows the user to use GEF context within GDB set commands. This is useful when you want to make a convenient variable which can be set and referenced later. gef\u27a4 gef set $a=1 GEF Run Command The GEF run command is a wrapper around GDB's run command, allowing the user to use GEF context within the command. gef\u27a4 gef run ./binary GEF Install Command gef install allows to install one (or more) specific script(s) from gef-extras . The new scripts will be downloaded and sourced to be used immediately after by GEF. The syntax is straight forward: gef\u27a4 gef install SCRIPTNAME1 [SCRIPTNAME2...] Where SCRIPTNAME1 ... are the names of script from the gef-extras repository . gef\u27a4 gef install remote windbg stack [+] Searching for 'remote.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/remote.py', new command(s) available: `rpyc-remote` [+] Searching for 'windbg.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/windbg.py', new command(s) available: `pt`, `hh`, `tt`, `ptc`, `sxe`, `u`, `xs`, `tc`, `pc`, `g`, `r` [+] Searching for 'stack.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/stack.py', new command(s) available: `current-stack-frame` gef\u27a4 This makes it easier to deploy new functionalities in limited environment. By default, the command looks up for script names in the main branch of gef-extras . However you can change specify a different branch through the gef.default_branch configuration setting: gef\u27a4 gef config gef.default_branch dev The files will be dowloaded in the path configured in the gef.extra_plugins_dir setting, allowing to reload it easily without having to re-download.","title":"gef"},{"location":"commands/gef/#command-gef","text":"","title":"Command gef"},{"location":"commands/gef/#gef-base-command","text":"Displays a list of GEF commands and their descriptions. gef\u27a4 gef \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF - GDB Enhanced Features \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 $ -- SmartEval: Smart eval (vague approach to mimic WinDBG `?`). aslr -- View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not attached). This command allows to change that setting. assemble -- Inline code assemble. Architecture can be set in GEF runtime config (default x86-32). (alias: asm) bincompare -- BincompareCommand: compare an binary file with the memory position looking for badchars. bytearray -- BytearrayCommand: Generate a bytearray to be compared with possible badchars. [...snip...]","title":"GEF Base Command"},{"location":"commands/gef/#gef-missing-command","text":"GEF is fully battery-included. However in some rare cases, it is possible that not all commands be loaded. If that's the case the command gef missing will detail which command failed to load, along with a (likely) reason. Read the documentation for a solution, or reach out on the Discord. gef\u27a4 gef missing [*] Command `XXXX` is missing, reason \u2192 YYYYY.","title":"GEF Missing Command"},{"location":"commands/gef/#gef-config-command","text":"Allows the user to set/view settings for the current debugging session. For making the changes persistent see the gef save entry. Using gef config by itself just shows all of the available settings and their values. gef\u27a4 gef config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 context.clear_screen (bool) = False context.enable (bool) = True context.grow_stack_down (bool) = False context.ignore_registers (str) = \"\" context.layout (str) = \"-code -stack\" context.libc_args (bool) = False [...snip...] To filter the config settings you can use gef config [setting] . gef\u27a4 gef config theme \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings matching 'theme' \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 theme.context_title_line (str) = \"gray\" theme.context_title_message (str) = \"cyan\" theme.default_title_line (str) = \"gray\" theme.default_title_message (str) = \"cyan\" [...snip...] You can use gef config [setting] [value] to set a setting for the current session (see example below). gef\u27a4 gef config theme.address_stack blue","title":"GEF Config Command"},{"location":"commands/gef/#gef-save-command","text":"The gef save command saves the current settings (set with gef config ) to the user's ~/.gef.rc file (making the changes persistent). gef\u27a4 gef save [+] Configuration saved to '/home/michael/.gef.rc'","title":"GEF Save Command"},{"location":"commands/gef/#gef-restore-command","text":"Using gef restore loads and applies settings from the ~/.gef.rc file to the current session. This is useful if you are modifying your GEF configuration file and want to see the changes without completely reloading GEF. gef\u27a4 gef restore [+] Configuration from '/home/michael/.gef.rc' restored","title":"GEF Restore Command"},{"location":"commands/gef/#gef-set-command","text":"The GEF set command allows the user to use GEF context within GDB set commands. This is useful when you want to make a convenient variable which can be set and referenced later. gef\u27a4 gef set $a=1","title":"GEF Set Command"},{"location":"commands/gef/#gef-run-command","text":"The GEF run command is a wrapper around GDB's run command, allowing the user to use GEF context within the command. gef\u27a4 gef run ./binary","title":"GEF Run Command"},{"location":"commands/gef/#gef-install-command","text":"gef install allows to install one (or more) specific script(s) from gef-extras . The new scripts will be downloaded and sourced to be used immediately after by GEF. The syntax is straight forward: gef\u27a4 gef install SCRIPTNAME1 [SCRIPTNAME2...] Where SCRIPTNAME1 ... are the names of script from the gef-extras repository . gef\u27a4 gef install remote windbg stack [+] Searching for 'remote.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/remote.py', new command(s) available: `rpyc-remote` [+] Searching for 'windbg.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/windbg.py', new command(s) available: `pt`, `hh`, `tt`, `ptc`, `sxe`, `u`, `xs`, `tc`, `pc`, `g`, `r` [+] Searching for 'stack.py' in `gef-extras@main`... [+] Installed file '/tmp/gef/stack.py', new command(s) available: `current-stack-frame` gef\u27a4 This makes it easier to deploy new functionalities in limited environment. By default, the command looks up for script names in the main branch of gef-extras . However you can change specify a different branch through the gef.default_branch configuration setting: gef\u27a4 gef config gef.default_branch dev The files will be dowloaded in the path configured in the gef.extra_plugins_dir setting, allowing to reload it easily without having to re-download.","title":"GEF Install Command"},{"location":"commands/got/","text":"Command got Display the current state of GOT table of the running process. The got command optionally takes function names and filters the output displaying only the matching functions. gef\u27a4 got The applied filter partially matches the name of the functions, so you can do something like this. gef\u27a4 got str gef\u27a4 got print gef\u27a4 got read Example of multiple partial filters: gef\u27a4 got str get","title":"got"},{"location":"commands/got/#command-got","text":"Display the current state of GOT table of the running process. The got command optionally takes function names and filters the output displaying only the matching functions. gef\u27a4 got The applied filter partially matches the name of the functions, so you can do something like this. gef\u27a4 got str gef\u27a4 got print gef\u27a4 got read Example of multiple partial filters: gef\u27a4 got str get","title":"Command got"},{"location":"commands/heap-analysis-helper/","text":"Command heap-analysis-helper Please note: This feature is still under development, expect bugs and unstability. heap-analysis-helper command aims to help the process of idenfitying Glibc heap inconsistencies by tracking and analyzing allocations and deallocations of chunks of memory. Currently, the following issues can be tracked: NULL free Use-after-Free Double Free Heap overlap The helper can simply be activated by running the command heap-analysis-helper . gef\u27a4 heap-analysis [+] Tracking malloc() [+] Tracking free() [+] Disabling hardware watchpoints (this may increase the latency) [+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found. [+] To disable, clear the malloc/free breakpoints (`delete breakpoints`) and restore hardware breakpoints (`set can-use-hw-watchpoints 1`) The helper will create specifically crafted breakoints to keep tracks of allocation, which allows to discover potential vulnerabilities. Once activated, one can disable the heap analysis breakpoints simply by clearing the __GI___libc_free() et __GI___libc_malloc() . It is also possible to enable/disable manually punctual checks via the gef config command. The following settings are accepted: check_null_free : to break execution when a free(NULL) is encountered (disabled by default); check_double_free : to break execution when a double free is encountered; check_weird_free : to execution when free() is called against a non-tracked pointer; check_uaf : to break execution when a possible Use-after-Free condition is found. Just like the format string vulnerability helper, the heap-analysis-helper can fail to detect complex heap scenarios and/or provide some false positive alerts. Each finding must of course be ascertained manually. The heap-analysis-helper can also be used to simply track allocation and liberation of chunks of memory. One can simply enable the tracking by setting all the configurations stated above to False: gef\u27a4 gef config heap-analysis-helper.check_double_free False gef\u27a4 gef config heap-analysis-helper.check_free_null False gef\u27a4 gef config heap-analysis-helper.check_weird_free False gef\u27a4 gef config heap-analysis-helper.check_uaf False Then gef will not notify you of any inconsistency detected, but simply display a clear message when a chunk is allocated/freed. To get information regarding the currently tracked chunks, use the show subcommand: gef\u27a4 heap-analysis-helper show","title":"heap-analysis-helper"},{"location":"commands/heap-analysis-helper/#command-heap-analysis-helper","text":"Please note: This feature is still under development, expect bugs and unstability. heap-analysis-helper command aims to help the process of idenfitying Glibc heap inconsistencies by tracking and analyzing allocations and deallocations of chunks of memory. Currently, the following issues can be tracked: NULL free Use-after-Free Double Free Heap overlap The helper can simply be activated by running the command heap-analysis-helper . gef\u27a4 heap-analysis [+] Tracking malloc() [+] Tracking free() [+] Disabling hardware watchpoints (this may increase the latency) [+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found. [+] To disable, clear the malloc/free breakpoints (`delete breakpoints`) and restore hardware breakpoints (`set can-use-hw-watchpoints 1`) The helper will create specifically crafted breakoints to keep tracks of allocation, which allows to discover potential vulnerabilities. Once activated, one can disable the heap analysis breakpoints simply by clearing the __GI___libc_free() et __GI___libc_malloc() . It is also possible to enable/disable manually punctual checks via the gef config command. The following settings are accepted: check_null_free : to break execution when a free(NULL) is encountered (disabled by default); check_double_free : to break execution when a double free is encountered; check_weird_free : to execution when free() is called against a non-tracked pointer; check_uaf : to break execution when a possible Use-after-Free condition is found. Just like the format string vulnerability helper, the heap-analysis-helper can fail to detect complex heap scenarios and/or provide some false positive alerts. Each finding must of course be ascertained manually. The heap-analysis-helper can also be used to simply track allocation and liberation of chunks of memory. One can simply enable the tracking by setting all the configurations stated above to False: gef\u27a4 gef config heap-analysis-helper.check_double_free False gef\u27a4 gef config heap-analysis-helper.check_free_null False gef\u27a4 gef config heap-analysis-helper.check_weird_free False gef\u27a4 gef config heap-analysis-helper.check_uaf False Then gef will not notify you of any inconsistency detected, but simply display a clear message when a chunk is allocated/freed. To get information regarding the currently tracked chunks, use the show subcommand: gef\u27a4 heap-analysis-helper show","title":"Command heap-analysis-helper"},{"location":"commands/heap/","text":"Command heap The heap command provides information on the heap chunk specified as argument. For the moment, it only supports GlibC heap format (see this link for malloc structure information). Syntax to the subcommands is straight forward: gef\u27a4 heap <sub_commands> heap chunks command Displays all the chunks from the heap section of the current arena. gef\u27a4 heap chunks To select from which arena to display chunks either use the heap set-arena command or provide the base address of the other arena like this: gef\u27a4 heap chunks [arena_address] In order to display the chunks of all the available arenas at once use gef\u27a4 heap chunks -a Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the --allow-unaligned flag. Note that this might result in incorrect output. heap chunk command This command gives visual information of a Glibc malloc-ed chunked. Simply provide the address to the user memory pointer of the chunk to show the information related to a specific chunk: gef\u27a4 heap chunk [address] Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the --allow-unaligned flag. Note that this might result in incorrect output. There is an optional number argument, to specify the number of chunks printed by this command. To do so, simply provide the --number argument: gef\u27a4 heap chunk --number 6 0x4e5400 Chunk(addr=0x4e5400, size=0xd0, flags=PREV_INUSE) Chunk(addr=0x4e54d0, size=0x1a0, flags=PREV_INUSE) Chunk(addr=0x4e5670, size=0x200, flags=PREV_INUSE) Chunk(addr=0x4e5870, size=0xbc0, flags=PREV_INUSE) Chunk(addr=0x4e6430, size=0x330, flags=PREV_INUSE) Chunk(addr=0x4e6760, size=0x4c0, flags=PREV_INUSE) heap arenas command Multi-threaded programs have different arenas, and the knowledge of the main_arena is not enough. gef therefore provides the arena sub-commands to help you list all the arenas allocated in your program at the moment you call the command . heap set-arena command In cases where the debug symbol are not present (e.g. statically stripped binary), it is possible to instruct GEF to find the main_arena at a different location with the command: gef\u27a4 heap set-arena [address] If the arena address is correct, all heap commands will be functional, and use the specified address for main_arena . heap bins command Glibc uses bins for keeping tracks of free d chunks. This is because making allocations through sbrk (requiring a syscall) is costly. Glibc uses those bins to remember formerly allocated chunks. Because bins are structured in single or doubly linked list, I found that quite painful to always interrogate gdb to get a pointer address, dereference it, get the value chunk, etc... So I decided to implement the heap bins sub-command, which allows to get info on: fastbins bins unsorted small bins large bins tcachebins heap bins fast command When exploiting heap corruption vulnerabilities, it is sometimes convenient to know the state of the fastbinsY array. The fast sub-command helps by displaying the list of fast chunks in this array. Without any other argument, it will display the info of the main_arena arena. It accepts an optional argument, the address of another arena (which you can easily find using heap arenas ). gef\u27a4 heap bins fast \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins for arena 0x7ffff7fb8b80 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x20] \u2190 Chunk(addr=0x555555559380, size=0x20, flags=PREV_INUSE) Fastbins[idx=1, size=0x30] 0x00 Fastbins[idx=2, size=0x40] 0x00 Fastbins[idx=3, size=0x50] 0x00 Fastbins[idx=4, size=0x60] 0x00 Fastbins[idx=5, size=0x70] 0x00 Fastbins[idx=6, size=0x80] 0x00 Other heap bins X command All the other subcommands (with the exception of tcache ) for the heap bins work the same way as fast . If no argument is provided, gef will fall back to main_arena . Otherwise, it will use the address pointed as the base of the malloc_state structure and print out information accordingly. heap bins tcache command Modern versions of glibc use tcache bins to speed up multithreaded programs. Unlike other bins, tcache bins are allocated on a per-thread basis, so there is one set of tcache bins for each thread. gef\u27a4 heap bins tcache [all] [thread_ids...] Without any arguments, heap bins tcache will display the tcache for the current thread. heap bins tcache all will show the tcache s for every thread, or you can specify any number of thread ids to see the tcache for each of them. For example, use the following command to show the tcache bins for threads 1 and 2. gef\u27a4 heap bins tcache 1 2","title":"heap"},{"location":"commands/heap/#command-heap","text":"The heap command provides information on the heap chunk specified as argument. For the moment, it only supports GlibC heap format (see this link for malloc structure information). Syntax to the subcommands is straight forward: gef\u27a4 heap <sub_commands>","title":"Command heap"},{"location":"commands/heap/#heap-chunks-command","text":"Displays all the chunks from the heap section of the current arena. gef\u27a4 heap chunks To select from which arena to display chunks either use the heap set-arena command or provide the base address of the other arena like this: gef\u27a4 heap chunks [arena_address] In order to display the chunks of all the available arenas at once use gef\u27a4 heap chunks -a Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the --allow-unaligned flag. Note that this might result in incorrect output.","title":"heap chunks command"},{"location":"commands/heap/#heap-chunk-command","text":"This command gives visual information of a Glibc malloc-ed chunked. Simply provide the address to the user memory pointer of the chunk to show the information related to a specific chunk: gef\u27a4 heap chunk [address] Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the --allow-unaligned flag. Note that this might result in incorrect output. There is an optional number argument, to specify the number of chunks printed by this command. To do so, simply provide the --number argument: gef\u27a4 heap chunk --number 6 0x4e5400 Chunk(addr=0x4e5400, size=0xd0, flags=PREV_INUSE) Chunk(addr=0x4e54d0, size=0x1a0, flags=PREV_INUSE) Chunk(addr=0x4e5670, size=0x200, flags=PREV_INUSE) Chunk(addr=0x4e5870, size=0xbc0, flags=PREV_INUSE) Chunk(addr=0x4e6430, size=0x330, flags=PREV_INUSE) Chunk(addr=0x4e6760, size=0x4c0, flags=PREV_INUSE)","title":"heap chunk command"},{"location":"commands/heap/#heap-arenas-command","text":"Multi-threaded programs have different arenas, and the knowledge of the main_arena is not enough. gef therefore provides the arena sub-commands to help you list all the arenas allocated in your program at the moment you call the command .","title":"heap arenas command"},{"location":"commands/heap/#heap-set-arena-command","text":"In cases where the debug symbol are not present (e.g. statically stripped binary), it is possible to instruct GEF to find the main_arena at a different location with the command: gef\u27a4 heap set-arena [address] If the arena address is correct, all heap commands will be functional, and use the specified address for main_arena .","title":"heap set-arena command"},{"location":"commands/heap/#heap-bins-command","text":"Glibc uses bins for keeping tracks of free d chunks. This is because making allocations through sbrk (requiring a syscall) is costly. Glibc uses those bins to remember formerly allocated chunks. Because bins are structured in single or doubly linked list, I found that quite painful to always interrogate gdb to get a pointer address, dereference it, get the value chunk, etc... So I decided to implement the heap bins sub-command, which allows to get info on: fastbins bins unsorted small bins large bins tcachebins","title":"heap bins command"},{"location":"commands/heap/#heap-bins-fast-command","text":"When exploiting heap corruption vulnerabilities, it is sometimes convenient to know the state of the fastbinsY array. The fast sub-command helps by displaying the list of fast chunks in this array. Without any other argument, it will display the info of the main_arena arena. It accepts an optional argument, the address of another arena (which you can easily find using heap arenas ). gef\u27a4 heap bins fast \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins for arena 0x7ffff7fb8b80 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x20] \u2190 Chunk(addr=0x555555559380, size=0x20, flags=PREV_INUSE) Fastbins[idx=1, size=0x30] 0x00 Fastbins[idx=2, size=0x40] 0x00 Fastbins[idx=3, size=0x50] 0x00 Fastbins[idx=4, size=0x60] 0x00 Fastbins[idx=5, size=0x70] 0x00 Fastbins[idx=6, size=0x80] 0x00","title":"heap bins fast command"},{"location":"commands/heap/#other-heap-bins-x-command","text":"All the other subcommands (with the exception of tcache ) for the heap bins work the same way as fast . If no argument is provided, gef will fall back to main_arena . Otherwise, it will use the address pointed as the base of the malloc_state structure and print out information accordingly.","title":"Other heap bins X command"},{"location":"commands/heap/#heap-bins-tcache-command","text":"Modern versions of glibc use tcache bins to speed up multithreaded programs. Unlike other bins, tcache bins are allocated on a per-thread basis, so there is one set of tcache bins for each thread. gef\u27a4 heap bins tcache [all] [thread_ids...] Without any arguments, heap bins tcache will display the tcache for the current thread. heap bins tcache all will show the tcache s for every thread, or you can specify any number of thread ids to see the tcache for each of them. For example, use the following command to show the tcache bins for threads 1 and 2. gef\u27a4 heap bins tcache 1 2","title":"heap bins tcache command"},{"location":"commands/help/","text":"Command gef help Displays the help menu for the loaded GEF commands. gef\u27a4 gef help","title":"help"},{"location":"commands/help/#command-gef-help","text":"Displays the help menu for the loaded GEF commands. gef\u27a4 gef help","title":"Command gef help"},{"location":"commands/hexdump/","text":"Command hexdump Imitation of the WinDBG command. This command takes 4 optional arguments: The format for representing the data (by default, byte) A value/address/symbol used as the location to print the hexdump from (by default, $sp) The number of qword/dword/word/bytes to display (by default, 64 if the format is byte, 16 otherwise) The direction of output lines (by default, from low to high addresses) hexdump byte will also try to display the ASCII character values if the byte is printable (similarly to the hexdump -C command on Linux). The syntax is as following: hexdump (qword|dword|word|byte) [-h] [--reverse] [--size SIZE] [address] Examples: Display 4 QWORDs from $pc : gef\u27a4 hexdump qword $pc --size 4 0x7ffff7a5c1c0+0000 \u2502 0x4855544155415641 0x7ffff7a5c1c0+0008 \u2502 0x0090ec814853cd89 0x7ffff7a5c1c0+0010 \u2502 0x377d6f058b480000 0x7ffff7a5c1c0+0018 \u2502 0x748918247c894800 Display 32 bytes from a location in the stack: gef\u27a4 hexdump byte 0x00007fffffffe5e5 --size 32 0x00007fffffffe5e5 2f 68 6f 6d 65 2f 68 75 67 73 79 2f 63 6f 64 65 /home/hugsy/code 0x00007fffffffe5f5 2f 67 65 66 2f 74 65 73 74 73 2f 77 69 6e 00 41 /gef/tests/win.A Display 8 WORDs from $sp in reverse order: gef\u27a4 hexdump word 8 --reverse 0x00007fffffffe0ee\u2502+0x000e 0x0000 0x00007fffffffe0ec\u2502+0x000c 0x7fff 0x00007fffffffe0ea\u2502+0x000a 0xffff 0x00007fffffffe0e8\u2502+0x0008 0xe3f5 0x00007fffffffe0e6\u2502+0x0006 0x0000 0x00007fffffffe0e4\u2502+0x0004 0x0000 0x00007fffffffe0e2\u2502+0x0002 0x0000 0x00007fffffffe0e0\u2502+0x0000 0x0001","title":"hexdump"},{"location":"commands/hexdump/#command-hexdump","text":"Imitation of the WinDBG command. This command takes 4 optional arguments: The format for representing the data (by default, byte) A value/address/symbol used as the location to print the hexdump from (by default, $sp) The number of qword/dword/word/bytes to display (by default, 64 if the format is byte, 16 otherwise) The direction of output lines (by default, from low to high addresses) hexdump byte will also try to display the ASCII character values if the byte is printable (similarly to the hexdump -C command on Linux). The syntax is as following: hexdump (qword|dword|word|byte) [-h] [--reverse] [--size SIZE] [address] Examples: Display 4 QWORDs from $pc : gef\u27a4 hexdump qword $pc --size 4 0x7ffff7a5c1c0+0000 \u2502 0x4855544155415641 0x7ffff7a5c1c0+0008 \u2502 0x0090ec814853cd89 0x7ffff7a5c1c0+0010 \u2502 0x377d6f058b480000 0x7ffff7a5c1c0+0018 \u2502 0x748918247c894800 Display 32 bytes from a location in the stack: gef\u27a4 hexdump byte 0x00007fffffffe5e5 --size 32 0x00007fffffffe5e5 2f 68 6f 6d 65 2f 68 75 67 73 79 2f 63 6f 64 65 /home/hugsy/code 0x00007fffffffe5f5 2f 67 65 66 2f 74 65 73 74 73 2f 77 69 6e 00 41 /gef/tests/win.A Display 8 WORDs from $sp in reverse order: gef\u27a4 hexdump word 8 --reverse 0x00007fffffffe0ee\u2502+0x000e 0x0000 0x00007fffffffe0ec\u2502+0x000c 0x7fff 0x00007fffffffe0ea\u2502+0x000a 0xffff 0x00007fffffffe0e8\u2502+0x0008 0xe3f5 0x00007fffffffe0e6\u2502+0x0006 0x0000 0x00007fffffffe0e4\u2502+0x0004 0x0000 0x00007fffffffe0e2\u2502+0x0002 0x0000 0x00007fffffffe0e0\u2502+0x0000 0x0001","title":"Command hexdump"},{"location":"commands/highlight/","text":"Command highlight This command sets up custom highlighting for user set strings. Syntax: highlight (add|remove|list|clear) Alias: hl Adding matches The following will add 41414141 / 'AAAA' as yellow, and 42424242 / 'BBBB' as blue: gef\u27a4 hl add 41414141 yellow gef\u27a4 hl add 42424242 blue gef\u27a4 hl add AAAA yellow gef\u27a4 hl add BBBB blue Removing matches To remove a match, target it by the original string used, ex.: gef\u27a4 hl rm 41414141 Listing matches To list all matches with their colors: gef\u27a4 hl list 41414141 | yellow 42424242 | blue AAAA | yellow BBBB | blue Clearing all matches To clear all matches currently setup: gef\u27a4 hl clear RegEx support RegEx support is disabled by default, this is done for performance reasons. To enable regular expressions on text matches: gef\u27a4 gef config highlight.regex True To check the current status: gef\u27a4 gef config highlight.regex highlight.regex (bool) = True Performance NOTE: Adding many matches may slow down debugging while using GEF. This includes enabling RegEx support. Colors To find a list of supported colors, check the theme documentation.","title":"highlight"},{"location":"commands/highlight/#command-highlight","text":"This command sets up custom highlighting for user set strings. Syntax: highlight (add|remove|list|clear) Alias: hl","title":"Command highlight"},{"location":"commands/highlight/#adding-matches","text":"The following will add 41414141 / 'AAAA' as yellow, and 42424242 / 'BBBB' as blue: gef\u27a4 hl add 41414141 yellow gef\u27a4 hl add 42424242 blue gef\u27a4 hl add AAAA yellow gef\u27a4 hl add BBBB blue","title":"Adding matches"},{"location":"commands/highlight/#removing-matches","text":"To remove a match, target it by the original string used, ex.: gef\u27a4 hl rm 41414141","title":"Removing matches"},{"location":"commands/highlight/#listing-matches","text":"To list all matches with their colors: gef\u27a4 hl list 41414141 | yellow 42424242 | blue AAAA | yellow BBBB | blue","title":"Listing matches"},{"location":"commands/highlight/#clearing-all-matches","text":"To clear all matches currently setup: gef\u27a4 hl clear","title":"Clearing all matches"},{"location":"commands/highlight/#regex-support","text":"RegEx support is disabled by default, this is done for performance reasons. To enable regular expressions on text matches: gef\u27a4 gef config highlight.regex True To check the current status: gef\u27a4 gef config highlight.regex highlight.regex (bool) = True","title":"RegEx support"},{"location":"commands/highlight/#performance","text":"NOTE: Adding many matches may slow down debugging while using GEF. This includes enabling RegEx support.","title":"Performance"},{"location":"commands/highlight/#colors","text":"To find a list of supported colors, check the theme documentation.","title":"Colors"},{"location":"commands/hijack-fd/","text":"Command hijack-fd gef can be used to modify file descriptors of the debugged process. The new file descriptor can point to a file, a pipe, a socket, a device etc. To use it, simply run gef\u27a4 hijack-fd FDNUM NEWFILE For instance, gef\u27a4 hijack-fd 1 /dev/null Will modify the current process file descriptors to redirect STDOUT to /dev/null . This command also supports connecting to an ip:port if it is provided as an argument. For example gef\u27a4 hijack-fd 0 localhost:8888 Will redirect STDIN to localhost:8888 Check out the tutorial on GEF's YouTube channel:","title":"hijack-fd"},{"location":"commands/hijack-fd/#command-hijack-fd","text":"gef can be used to modify file descriptors of the debugged process. The new file descriptor can point to a file, a pipe, a socket, a device etc. To use it, simply run gef\u27a4 hijack-fd FDNUM NEWFILE For instance, gef\u27a4 hijack-fd 1 /dev/null Will modify the current process file descriptors to redirect STDOUT to /dev/null . This command also supports connecting to an ip:port if it is provided as an argument. For example gef\u27a4 hijack-fd 0 localhost:8888 Will redirect STDIN to localhost:8888 Check out the tutorial on GEF's YouTube channel:","title":"Command hijack-fd"},{"location":"commands/ksymaddr/","text":"Command ksymaddr ksymaddr helps locate a kernel symbol by its name. The syntax is straight forward: ksymaddr <PATTERN> For example, gef\u27a4 ksymaddr commit_creds [+] Found matching symbol for 'commit_creds' at 0xffffffff8f495740 (type=T) [*] Found partial match for 'commit_creds' at 0xffffffff8f495740 (type=T): commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc71ee0 (type=R): __ksymtab_commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc8d008 (type=r): __kcrctab_commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc9bfcd (type=r): __kstrtab_commit_creds Note that the debugging process needs to have the correct permissions for this command to show kernel addresses. For more information see also this stackoverflow post .","title":"ksymaddr"},{"location":"commands/ksymaddr/#command-ksymaddr","text":"ksymaddr helps locate a kernel symbol by its name. The syntax is straight forward: ksymaddr <PATTERN> For example, gef\u27a4 ksymaddr commit_creds [+] Found matching symbol for 'commit_creds' at 0xffffffff8f495740 (type=T) [*] Found partial match for 'commit_creds' at 0xffffffff8f495740 (type=T): commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc71ee0 (type=R): __ksymtab_commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc8d008 (type=r): __kcrctab_commit_creds [*] Found partial match for 'commit_creds' at 0xffffffff8fc9bfcd (type=r): __kstrtab_commit_creds Note that the debugging process needs to have the correct permissions for this command to show kernel addresses. For more information see also this stackoverflow post .","title":"Command ksymaddr"},{"location":"commands/memory/","text":"Command memory As long as the 'memory' section is enabled in your context layout (which it is by default), you can register addresses, lengths, and grouping size. Note : this command shoud NOT be mistaken with the GDB watch command meant to set breakpoints on memory access (read,write,exec). Adding a watch Specify a location to watch and display with the context, along with their optional size and format: Syntax: memory watch <ADDRESS> [SIZE] [(qword|dword|word|byte|pointers)] If the format specified is pointers , then the output will be similar to executing the command dereference $address . For all other format, the output will be an hexdump of the designated location. Note that the address format is a GDB therefore a symbol can be passed to it. It also supports GEF functions format allowing to easily track commonly used addresses: For example, to watch the first 5 entries of the GOT as pointers: gef \u27a4 memory watch $_got()+0x18 5 [+] Adding memwatch to 0x555555773c50 Which, when the context is displayed, will show something like: Removing a watch Remove a watched address. To list all the addresses being watched, use memory list . Syntax: memory unwatch <ADDRESS> Listing watches Enumerate all the addresses currently watched by the memory command. Syntax: memory list The command will output a list of all the addresses watched, along with the size and format to display them as. Resetting watches Empties the list of addresses to watch. Syntax: memory reset","title":"memory"},{"location":"commands/memory/#command-memory","text":"As long as the 'memory' section is enabled in your context layout (which it is by default), you can register addresses, lengths, and grouping size. Note : this command shoud NOT be mistaken with the GDB watch command meant to set breakpoints on memory access (read,write,exec).","title":"Command memory"},{"location":"commands/memory/#adding-a-watch","text":"Specify a location to watch and display with the context, along with their optional size and format: Syntax: memory watch <ADDRESS> [SIZE] [(qword|dword|word|byte|pointers)] If the format specified is pointers , then the output will be similar to executing the command dereference $address . For all other format, the output will be an hexdump of the designated location. Note that the address format is a GDB therefore a symbol can be passed to it. It also supports GEF functions format allowing to easily track commonly used addresses: For example, to watch the first 5 entries of the GOT as pointers: gef \u27a4 memory watch $_got()+0x18 5 [+] Adding memwatch to 0x555555773c50 Which, when the context is displayed, will show something like:","title":"Adding a watch"},{"location":"commands/memory/#removing-a-watch","text":"Remove a watched address. To list all the addresses being watched, use memory list . Syntax: memory unwatch <ADDRESS>","title":"Removing a watch"},{"location":"commands/memory/#listing-watches","text":"Enumerate all the addresses currently watched by the memory command. Syntax: memory list The command will output a list of all the addresses watched, along with the size and format to display them as.","title":"Listing watches"},{"location":"commands/memory/#resetting-watches","text":"Empties the list of addresses to watch. Syntax: memory reset","title":"Resetting watches"},{"location":"commands/name-break/","text":"Command name-break The command name-break (alias nb ) can be used to set a breakpoint on a location with a name assigned to it. Every time this breakpoint is hit, the specified name will also be shown in the extra section to make it easier to keep an overview when using multiple breakpoints in a stripped binary. name-break name [address] address may be a linespec, address, or explicit location, same as specified for break . If address isn't specified, it will create the breakpoint at the current instruction pointer address. Examples: nb first *0x400ec0 nb \"main func\" main nb read_secret *main+149 nb check_heap Example output: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x400e04 add eax, 0xfffbe6e8 0x400e09 dec ecx 0x400e0b ret \u2192 0x400e0c push rbp 0x400e0d mov rbp, rsp 0x400e10 sub rsp, 0x50 0x400e14 mov QWORD PTR [rbp-0x48], rdi 0x400e18 mov QWORD PTR [rbp-0x50], rsi 0x400e1c mov rax, QWORD PTR fs:0x28 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe288\u2502+0x0000: 0x0000000000401117 \u2192 movzx ecx, al \u2190 $rsp 0x00007fffffffe290\u2502+0x0008: 0x00007fffffffe4b8 \u2192 0x00007fffffffe71d \u2192 \"/ctf/t19/srv_copy\" 0x00007fffffffe298\u2502+0x0010: 0x0000000100000000 0x00007fffffffe2a0\u2502+0x0018: 0x0000000000000000 0x00007fffffffe2a8\u2502+0x0020: 0x0000000000000004 0x00007fffffffe2b0\u2502+0x0028: 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 extra \u2500\u2500\u2500\u2500 [+] Hit breakpoint *0x400e0c (check_entry) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4","title":"name-break"},{"location":"commands/name-break/#command-name-break","text":"The command name-break (alias nb ) can be used to set a breakpoint on a location with a name assigned to it. Every time this breakpoint is hit, the specified name will also be shown in the extra section to make it easier to keep an overview when using multiple breakpoints in a stripped binary. name-break name [address] address may be a linespec, address, or explicit location, same as specified for break . If address isn't specified, it will create the breakpoint at the current instruction pointer address. Examples: nb first *0x400ec0 nb \"main func\" main nb read_secret *main+149 nb check_heap Example output: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x400e04 add eax, 0xfffbe6e8 0x400e09 dec ecx 0x400e0b ret \u2192 0x400e0c push rbp 0x400e0d mov rbp, rsp 0x400e10 sub rsp, 0x50 0x400e14 mov QWORD PTR [rbp-0x48], rdi 0x400e18 mov QWORD PTR [rbp-0x50], rsi 0x400e1c mov rax, QWORD PTR fs:0x28 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe288\u2502+0x0000: 0x0000000000401117 \u2192 movzx ecx, al \u2190 $rsp 0x00007fffffffe290\u2502+0x0008: 0x00007fffffffe4b8 \u2192 0x00007fffffffe71d \u2192 \"/ctf/t19/srv_copy\" 0x00007fffffffe298\u2502+0x0010: 0x0000000100000000 0x00007fffffffe2a0\u2502+0x0018: 0x0000000000000000 0x00007fffffffe2a8\u2502+0x0020: 0x0000000000000004 0x00007fffffffe2b0\u2502+0x0028: 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 extra \u2500\u2500\u2500\u2500 [+] Hit breakpoint *0x400e0c (check_entry) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4","title":"Command name-break"},{"location":"commands/nop/","text":"Command nop The nop command allows you to easily skip instructions. gef \u27a4 help nop Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture aware. Syntax: nop [LOCATION] [--nb NUM_BYTES] LOCATION address/symbol to patch --nb NUM_BYTES Instead of writing one instruction, patch the specified number of bytes LOCATION indicates the address of the instruction to bypass. If not specified, it will use the current value of the program counter. If --nb <bytes> is entered, gef will explicitly patch the specified number of bytes. Otherwise it will patch the whole instruction at the target location.","title":"nop"},{"location":"commands/nop/#command-nop","text":"The nop command allows you to easily skip instructions. gef \u27a4 help nop Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture aware. Syntax: nop [LOCATION] [--nb NUM_BYTES] LOCATION address/symbol to patch --nb NUM_BYTES Instead of writing one instruction, patch the specified number of bytes LOCATION indicates the address of the instruction to bypass. If not specified, it will use the current value of the program counter. If --nb <bytes> is entered, gef will explicitly patch the specified number of bytes. Otherwise it will patch the whole instruction at the target location.","title":"Command nop"},{"location":"commands/patch/","text":"Command patch patch lets you easily patch the specified values to the specified address. gef\u27a4 patch byte $eip 0x90 gef\u27a4 patch string $eip \"cool!\" These commands copy the first 10 bytes of $rsp+8 to $rip: gef\u27a4 print-format --lang bytearray -l 10 $rsp+8 Saved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0' gef\u27a4 patch byte $rip $_gef0 Very handy to copy-paste-execute shellcodes/data from different memory regions.","title":"patch"},{"location":"commands/patch/#command-patch","text":"patch lets you easily patch the specified values to the specified address. gef\u27a4 patch byte $eip 0x90 gef\u27a4 patch string $eip \"cool!\" These commands copy the first 10 bytes of $rsp+8 to $rip: gef\u27a4 print-format --lang bytearray -l 10 $rsp+8 Saved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0' gef\u27a4 patch byte $rip $_gef0 Very handy to copy-paste-execute shellcodes/data from different memory regions.","title":"Command patch"},{"location":"commands/pattern/","text":"Command pattern This command will create or search a De Bruijn cyclic pattern to facilitate determining offsets in memory. The sequence consists of a number of unique substrings of a chosen length. It should be noted that for better compatibility, the algorithm implemented in GEF is the same as the one in pwntools , and can therefore be used in conjunction. pattern create pattern create [-h] [-n N] [length] The sub-command create allows one create a new De Bruijn sequence. The optional argument n determines the length of unique subsequences. Its default value matches the currently loaded architecture. The length argument sets the total length of the whole sequence. gef\u27a4 pattern create -n 4 128 [+] Generating a pattern of 128 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab [+] Saved as '$_gef0' The equivalent command with pwntools is from pwn import * p = cyclic(128, n=8) pattern search pattern search [-h] [-n N] [--max-length MAX_LENGTH] [pattern] The search sub-command seeks the pattern given as argument, trying to find its offset in the De Bruijn sequence. The optional argument n determines the length of unique subsequences, and it should usually match the length of pattern . Using MAX_LENGTH the maximum length of the sequence to search in can be adjusted. Note that the pattern can be passed as a GDB symbol (such as a register name), a string or a hexadecimal value gef\u27a4 pattern search 0x6161616161616167 [+] Searching '0x6161616161616167' [+] Found at offset 48 (little-endian search) likely [+] Found at offset 41 (big-endian search) gef\u27a4 pattern search $rbp [+] Searching '$rbp' [+] Found at offset 32 (little-endian search) likely [+] Found at offset 25 (big-endian search) gef\u27a4 pattern search aaaaaaac [+] Searching for 'aaaaaaac' [+] Found at offset 16 (little-endian search) likely [+] Found at offset 9 (big-endian search)","title":"pattern"},{"location":"commands/pattern/#command-pattern","text":"This command will create or search a De Bruijn cyclic pattern to facilitate determining offsets in memory. The sequence consists of a number of unique substrings of a chosen length. It should be noted that for better compatibility, the algorithm implemented in GEF is the same as the one in pwntools , and can therefore be used in conjunction.","title":"Command pattern"},{"location":"commands/pattern/#pattern-create","text":"pattern create [-h] [-n N] [length] The sub-command create allows one create a new De Bruijn sequence. The optional argument n determines the length of unique subsequences. Its default value matches the currently loaded architecture. The length argument sets the total length of the whole sequence. gef\u27a4 pattern create -n 4 128 [+] Generating a pattern of 128 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab [+] Saved as '$_gef0' The equivalent command with pwntools is from pwn import * p = cyclic(128, n=8)","title":"pattern create"},{"location":"commands/pattern/#pattern-search","text":"pattern search [-h] [-n N] [--max-length MAX_LENGTH] [pattern] The search sub-command seeks the pattern given as argument, trying to find its offset in the De Bruijn sequence. The optional argument n determines the length of unique subsequences, and it should usually match the length of pattern . Using MAX_LENGTH the maximum length of the sequence to search in can be adjusted. Note that the pattern can be passed as a GDB symbol (such as a register name), a string or a hexadecimal value gef\u27a4 pattern search 0x6161616161616167 [+] Searching '0x6161616161616167' [+] Found at offset 48 (little-endian search) likely [+] Found at offset 41 (big-endian search) gef\u27a4 pattern search $rbp [+] Searching '$rbp' [+] Found at offset 32 (little-endian search) likely [+] Found at offset 25 (big-endian search) gef\u27a4 pattern search aaaaaaac [+] Searching for 'aaaaaaac' [+] Found at offset 16 (little-endian search) likely [+] Found at offset 9 (big-endian search)","title":"pattern search"},{"location":"commands/pcustom/","text":"Command pcustom gef provides a way to create and apply to the currently debugged environment, any new structure (in the C-struct way). On top of simply displaying known and user-defined structures, it also allows to apply those structures to the current context. It intends to mimic the very useful WinDBG dt command. This is achieved via the command pcustom (for print custom ), or you can use its alias, dt (in reference to the WinDBG command) as provided by the WinDbg compatibility extension Configuration New structures can be stored in the location given by the configuration setting: gef\u27a4 gef config pcustom.struct_path By default, this location is in $TEMP/gef/structs (e.g. /tmp/user/1000/gef/structs ). The structure can be created as a simple ctypes structure, in a file called <struct_name>.py . You can naturally set this path to a new location gef\u27a4 gef config pcustom.struct_path /my/new/location And save this change so you can re-use it directly next time you use gdb gef\u27a4 gef save [+] Configuration saved to '~/.gef.rc' Using user-defined structures You can list existing custom structures via gef\u27a4 pcustom list [+] Listing custom structures from '/tmp/structs' \u2192 /tmp/structs/A.py (A, B) \u2192 /tmp/structs/elf32_t.py (elf32_t) \u2192 /tmp/structs/elf64_t.py (elf64_t) [...] To create or edit a structure, use pcustom edit <struct_name> to spawn your EDITOR with the targeted structure. If the file does not exist, gef will nicely create the tree and file, and fill it with a ctypes template that you can use straight away! gef\u27a4 pcustom new mystruct_t [+] Creating '/tmp/gef/structs/mystruct_t.py' from template If the structure already exists, GEF will open the text editor to edit the known structure. This is equivalent to: gef\u27a4 pcustom edit elf32_t [+] Editing '/home/hugsy/code/gef-extras/structs/elf32_t.py' Static ctypes.Structure -like classes The code can be defined just as any Python (using ctypes ) code. from ctypes import * ''' typedef struct { int age; char name[256]; int id; } person_t; ''' class person_t(Structure): _fields_ = [ (\"age\", c_int), (\"name\", c_char * 256), (\"id\", c_int), ] _values_ = [ # You can define a function to substitute the value (\"age\", lambda age: \"Old\" if age > 40 else \"Young\"), # Or alternatively a list of 2-tuples (\"id\", [ (0, \"root\"), (1, \"normal user\"), (None, \"Invalid person\") ]) ] pcustom requires at least one argument, which is the name of the structure. With only one argument, pcustom will dump all the fields of this structure. gef\u27a4 dt person_t +0000 age c_int /* size=0x4 */ +0004 name c_char_Array_256 /* size=0x100 */ +0104 id c_int /* size=0x4 */ By providing an address or a GDB symbol, gef will apply this user-defined structure to the specified address: This means that we can now create very easily new user-defined structures For a full demo, watch the following tutorial: Additionally, if you have successfully configured your IDA settings, you can also directly import the structure(s) that was(were) reverse-engineered in IDA directly in your GDB session: - (see gef-extras/ida-rpyc , which is the new improved version of ida-interact ) Dynamic ctypes.Structure -like classes pcustom also supports the use of class factories to create a ctypes.Structure class whose structure will be adjusted based on the runtime information we provide (information about the currently debugged binary, the architecture, the size of a pointer and more). The syntax is relatively close to the way we use to create static classes (see above), but instead we define a function that will generate the class. The requirements for this class factory are: - take a single Gef positional argument - End the function name with _t To continue the person_t function we defined in the example above, we could modify the static class as a dynamic one very easily: import ctypes from typing import Optional def person_t(gef: Optional[\"Gef\"]=None): fields = [ (\"age\", ctypes.c_int), (\"name\", ctypes.c_char * 256), (\"id\", ctypes.c_int), ] class person_cls(ctypes.Structure): _fields_ = fields return person_cls Thanks to the gef parameter, the structure can be transparently adjusted so that GEF will parse it differently with its runtime information. For example, we can add constraints to the example above: import ctypes from typing import Optional def person_t(gef: Optional[\"Gef\"]==None): fields = [ (\"age\", ctypes.c_uint8), (\"name\", ctypes.c_char * 256), (\"id\", ctypes.c_uint8), ] # constraint on the libc version if gef.libc.version > (2, 27): # or on the pointer size pointer_type = ctypes.c_uint64 if gef.arch.ptrsize == 8 else ctypes.c_uint32 fields += [ (\"new_field\", pointer_size) ] class person_cls(ctypes.Structure): _fields_ = fields return person_cls Public repository of structures A community contributed repository of structures can be found in gef-extras . To deploy it: In bash: $ git clone https://github.com/hugsy/gef-extras In GEF: gef\u27a4 gef config pcustom.struct_path /path/to/gef-extras/structs gef\u27a4 gef save Then either close GDB or gef reload . You can confirm the structures were correctly loaded in GEF's prompt: gef\u27a4 pcustom list Should return several entries. And remember this is collaborative repository, so feel free to contribute too!","title":"pcustom"},{"location":"commands/pcustom/#command-pcustom","text":"gef provides a way to create and apply to the currently debugged environment, any new structure (in the C-struct way). On top of simply displaying known and user-defined structures, it also allows to apply those structures to the current context. It intends to mimic the very useful WinDBG dt command. This is achieved via the command pcustom (for print custom ), or you can use its alias, dt (in reference to the WinDBG command) as provided by the WinDbg compatibility extension","title":"Command pcustom"},{"location":"commands/pcustom/#configuration","text":"New structures can be stored in the location given by the configuration setting: gef\u27a4 gef config pcustom.struct_path By default, this location is in $TEMP/gef/structs (e.g. /tmp/user/1000/gef/structs ). The structure can be created as a simple ctypes structure, in a file called <struct_name>.py . You can naturally set this path to a new location gef\u27a4 gef config pcustom.struct_path /my/new/location And save this change so you can re-use it directly next time you use gdb gef\u27a4 gef save [+] Configuration saved to '~/.gef.rc'","title":"Configuration"},{"location":"commands/pcustom/#using-user-defined-structures","text":"You can list existing custom structures via gef\u27a4 pcustom list [+] Listing custom structures from '/tmp/structs' \u2192 /tmp/structs/A.py (A, B) \u2192 /tmp/structs/elf32_t.py (elf32_t) \u2192 /tmp/structs/elf64_t.py (elf64_t) [...] To create or edit a structure, use pcustom edit <struct_name> to spawn your EDITOR with the targeted structure. If the file does not exist, gef will nicely create the tree and file, and fill it with a ctypes template that you can use straight away! gef\u27a4 pcustom new mystruct_t [+] Creating '/tmp/gef/structs/mystruct_t.py' from template If the structure already exists, GEF will open the text editor to edit the known structure. This is equivalent to: gef\u27a4 pcustom edit elf32_t [+] Editing '/home/hugsy/code/gef-extras/structs/elf32_t.py'","title":"Using user-defined structures"},{"location":"commands/pcustom/#static-ctypesstructure-like-classes","text":"The code can be defined just as any Python (using ctypes ) code. from ctypes import * ''' typedef struct { int age; char name[256]; int id; } person_t; ''' class person_t(Structure): _fields_ = [ (\"age\", c_int), (\"name\", c_char * 256), (\"id\", c_int), ] _values_ = [ # You can define a function to substitute the value (\"age\", lambda age: \"Old\" if age > 40 else \"Young\"), # Or alternatively a list of 2-tuples (\"id\", [ (0, \"root\"), (1, \"normal user\"), (None, \"Invalid person\") ]) ] pcustom requires at least one argument, which is the name of the structure. With only one argument, pcustom will dump all the fields of this structure. gef\u27a4 dt person_t +0000 age c_int /* size=0x4 */ +0004 name c_char_Array_256 /* size=0x100 */ +0104 id c_int /* size=0x4 */ By providing an address or a GDB symbol, gef will apply this user-defined structure to the specified address: This means that we can now create very easily new user-defined structures For a full demo, watch the following tutorial: Additionally, if you have successfully configured your IDA settings, you can also directly import the structure(s) that was(were) reverse-engineered in IDA directly in your GDB session: - (see gef-extras/ida-rpyc , which is the new improved version of ida-interact )","title":"Static ctypes.Structure-like classes"},{"location":"commands/pcustom/#dynamic-ctypesstructure-like-classes","text":"pcustom also supports the use of class factories to create a ctypes.Structure class whose structure will be adjusted based on the runtime information we provide (information about the currently debugged binary, the architecture, the size of a pointer and more). The syntax is relatively close to the way we use to create static classes (see above), but instead we define a function that will generate the class. The requirements for this class factory are: - take a single Gef positional argument - End the function name with _t To continue the person_t function we defined in the example above, we could modify the static class as a dynamic one very easily: import ctypes from typing import Optional def person_t(gef: Optional[\"Gef\"]=None): fields = [ (\"age\", ctypes.c_int), (\"name\", ctypes.c_char * 256), (\"id\", ctypes.c_int), ] class person_cls(ctypes.Structure): _fields_ = fields return person_cls Thanks to the gef parameter, the structure can be transparently adjusted so that GEF will parse it differently with its runtime information. For example, we can add constraints to the example above: import ctypes from typing import Optional def person_t(gef: Optional[\"Gef\"]==None): fields = [ (\"age\", ctypes.c_uint8), (\"name\", ctypes.c_char * 256), (\"id\", ctypes.c_uint8), ] # constraint on the libc version if gef.libc.version > (2, 27): # or on the pointer size pointer_type = ctypes.c_uint64 if gef.arch.ptrsize == 8 else ctypes.c_uint32 fields += [ (\"new_field\", pointer_size) ] class person_cls(ctypes.Structure): _fields_ = fields return person_cls","title":"Dynamic ctypes.Structure-like classes"},{"location":"commands/pcustom/#public-repository-of-structures","text":"A community contributed repository of structures can be found in gef-extras . To deploy it: In bash: $ git clone https://github.com/hugsy/gef-extras In GEF: gef\u27a4 gef config pcustom.struct_path /path/to/gef-extras/structs gef\u27a4 gef save Then either close GDB or gef reload . You can confirm the structures were correctly loaded in GEF's prompt: gef\u27a4 pcustom list Should return several entries. And remember this is collaborative repository, so feel free to contribute too!","title":"Public repository of structures"},{"location":"commands/pie/","text":"Command pie The pie command is handy when working with position-independent executables. At runtime, it can automatically resolve addresses for breakpoints that are not static. Note that you need to use the entire pie command series to support PIE breakpoints, especially the \" pie run commands\", like pie attach , pie run , etc. pie breakpoint command This command sets a new PIE breakpoint. It can be used like the normal breakpoint command in gdb. The argument for the command is the offset from the base address or a symbol. The breakpoints will not be set immediately after this command. Instead, it will be set when you use pie attach , pie run or pie remote to actually attach to a process, so it can resolve the right base address. Usage: gef\u27a4 pie breakpoint OFFSET pie info command Since a PIE breakpoint is not a real breakpoint, this command provides a way to observe the state of all PIE breakpoints. This works just like info breakpoint in gdb. gef\u27a4 pie info VNum Num Addr 1 N/A 0xdeadbeef VNum stands for virtual number and is used to enumerate the PIE breakpoints. Num is the number of the associated real breakpoints at runtime in GDB. You can omit the VNum argument to get info on all PIE breakpoints. Usage: gef\u27a4 pie info [VNum] pie delete command This command deletes a PIE breakpoint given its VNum. Usage: gef\u27a4 pie delete [VNum] pie attach command This command behaves like GDB's attach command. Always use this command instead of attach if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as attach . pie remote command This command behaves like GDB's remote command. Always use this command instead of remote if you have PIE breakpoints. Behind the scenes this will connect to the remote target using gef remote and then convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as remote . pie run command This command behaves like GDB's run command. Always use this command instead of run if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as run .","title":"pie"},{"location":"commands/pie/#command-pie","text":"The pie command is handy when working with position-independent executables. At runtime, it can automatically resolve addresses for breakpoints that are not static. Note that you need to use the entire pie command series to support PIE breakpoints, especially the \" pie run commands\", like pie attach , pie run , etc.","title":"Command pie"},{"location":"commands/pie/#pie-breakpoint-command","text":"This command sets a new PIE breakpoint. It can be used like the normal breakpoint command in gdb. The argument for the command is the offset from the base address or a symbol. The breakpoints will not be set immediately after this command. Instead, it will be set when you use pie attach , pie run or pie remote to actually attach to a process, so it can resolve the right base address. Usage: gef\u27a4 pie breakpoint OFFSET","title":"pie breakpoint command"},{"location":"commands/pie/#pie-info-command","text":"Since a PIE breakpoint is not a real breakpoint, this command provides a way to observe the state of all PIE breakpoints. This works just like info breakpoint in gdb. gef\u27a4 pie info VNum Num Addr 1 N/A 0xdeadbeef VNum stands for virtual number and is used to enumerate the PIE breakpoints. Num is the number of the associated real breakpoints at runtime in GDB. You can omit the VNum argument to get info on all PIE breakpoints. Usage: gef\u27a4 pie info [VNum]","title":"pie info command"},{"location":"commands/pie/#pie-delete-command","text":"This command deletes a PIE breakpoint given its VNum. Usage: gef\u27a4 pie delete [VNum]","title":"pie delete command"},{"location":"commands/pie/#pie-attach-command","text":"This command behaves like GDB's attach command. Always use this command instead of attach if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as attach .","title":"pie attach command"},{"location":"commands/pie/#pie-remote-command","text":"This command behaves like GDB's remote command. Always use this command instead of remote if you have PIE breakpoints. Behind the scenes this will connect to the remote target using gef remote and then convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as remote .","title":"pie remote command"},{"location":"commands/pie/#pie-run-command","text":"This command behaves like GDB's run command. Always use this command instead of run if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime. The usage is just the same as run .","title":"pie run command"},{"location":"commands/print-format/","text":"Command print-format The command print-format (alias pf ) will dump an arbitrary location as an array of bytes following the format specified. Currently, the output formats supported are Python ( py - default) C ( c ) Assembly ( asm ) Javascript ( js ) Hex string ( hex ) For patch byte command or GDB $_gef[N] byte access ( bytearray ) gef\u27a4 print-format -h [+] print-format [--lang LANG] [--bitlen SIZE] [(--length,-l) LENGTH] [--clip] LOCATION --lang LANG specifies the output format for programming language (available: ['py', 'c', 'js', 'asm', 'hex'], default 'py'). --bitlen SIZE specifies size of bit (possible values: [8, 16, 32, 64], default is 8). --length LENGTH specifies length of array (default is 256). --clip The output data will be copied to clipboard LOCATION specifies where the address of bytes is stored. For example this command will dump 10 bytes from $rsp and copy the result to the clipboard. gef\u27a4 print-format --lang py --bitlen 8 -l 10 --clip $rsp [+] Copied to clipboard buf = [0x87, 0xfa, 0xa3, 0xf7, 0xff, 0x7f, 0x0, 0x0, 0x30, 0xe6] These commands copy the first 10 bytes of $rsp+8 to $rip: gef\u27a4 print-format --lang bytearray -l 10 $rsp+8 Saved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0' gef\u27a4 display/x $_gef0[5] 4: /x $_gef0[5] = 0x7f gef\u27a4 patch byte $rip $_gef0 Very handy to copy-paste-execute shellcodes/data from different memory regions.","title":"print-format"},{"location":"commands/print-format/#command-print-format","text":"The command print-format (alias pf ) will dump an arbitrary location as an array of bytes following the format specified. Currently, the output formats supported are Python ( py - default) C ( c ) Assembly ( asm ) Javascript ( js ) Hex string ( hex ) For patch byte command or GDB $_gef[N] byte access ( bytearray ) gef\u27a4 print-format -h [+] print-format [--lang LANG] [--bitlen SIZE] [(--length,-l) LENGTH] [--clip] LOCATION --lang LANG specifies the output format for programming language (available: ['py', 'c', 'js', 'asm', 'hex'], default 'py'). --bitlen SIZE specifies size of bit (possible values: [8, 16, 32, 64], default is 8). --length LENGTH specifies length of array (default is 256). --clip The output data will be copied to clipboard LOCATION specifies where the address of bytes is stored. For example this command will dump 10 bytes from $rsp and copy the result to the clipboard. gef\u27a4 print-format --lang py --bitlen 8 -l 10 --clip $rsp [+] Copied to clipboard buf = [0x87, 0xfa, 0xa3, 0xf7, 0xff, 0x7f, 0x0, 0x0, 0x30, 0xe6] These commands copy the first 10 bytes of $rsp+8 to $rip: gef\u27a4 print-format --lang bytearray -l 10 $rsp+8 Saved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0' gef\u27a4 display/x $_gef0[5] 4: /x $_gef0[5] = 0x7f gef\u27a4 patch byte $rip $_gef0 Very handy to copy-paste-execute shellcodes/data from different memory regions.","title":"Command print-format"},{"location":"commands/process-search/","text":"Command process-search process-search (aka ps ) is a convenience command to list and filter process on the host. It is aimed at making the debugging process a little easier when targeting forking process (such as tcp/listening daemon that would fork upon accept() ). Without argument, it will return all processes reachable by user: gef\u27a4 ps 1 root 0.0 0.4 ? /sbin/init 2 root 0.0 0.0 ? [kthreadd] 3 root 0.0 0.0 ? [ksoftirqd/0] 4 root 0.0 0.0 ? [kworker/0:0] 5 root 0.0 0.0 ? [kworker/0:0H] 6 root 0.0 0.0 ? [kworker/u2:0] 7 root 0.0 0.0 ? [rcu_sched] 8 root 0.0 0.0 ? [rcuos/0] 9 root 0.0 0.0 ? [rcu_bh] 10 root 0.0 0.0 ? [rcuob/0] 11 root 0.0 0.0 ? [migration/0] [...] Or to filter with pattern: gef\u27a4 ps bash 22590 vagrant 0.0 0.8 pts/0 -bash Note: Use \"\\\" for escaping and \"\\\\\" for a literal backslash\" in the pattern. ps also accepts options: --smart-scan will filter out probably less relevant processes (belonging to different users, pattern matched to arguments instead of the commands themselves, etc.) --attach will automatically attach to the first process found So, for example, if your targeted process is called /home/foobar/plop , but the existing instance is used through socat , like $ socat tcp-l:1234,fork,reuseaddr exec:/home/foobar/plop Then every time a new connection is opened to tcp/1234, plop will be forked, and GEF can easily attach to it with the command gef\u27a4 ps --attach --smart-scan plop","title":"process-search"},{"location":"commands/process-search/#command-process-search","text":"process-search (aka ps ) is a convenience command to list and filter process on the host. It is aimed at making the debugging process a little easier when targeting forking process (such as tcp/listening daemon that would fork upon accept() ). Without argument, it will return all processes reachable by user: gef\u27a4 ps 1 root 0.0 0.4 ? /sbin/init 2 root 0.0 0.0 ? [kthreadd] 3 root 0.0 0.0 ? [ksoftirqd/0] 4 root 0.0 0.0 ? [kworker/0:0] 5 root 0.0 0.0 ? [kworker/0:0H] 6 root 0.0 0.0 ? [kworker/u2:0] 7 root 0.0 0.0 ? [rcu_sched] 8 root 0.0 0.0 ? [rcuos/0] 9 root 0.0 0.0 ? [rcu_bh] 10 root 0.0 0.0 ? [rcuob/0] 11 root 0.0 0.0 ? [migration/0] [...] Or to filter with pattern: gef\u27a4 ps bash 22590 vagrant 0.0 0.8 pts/0 -bash Note: Use \"\\\" for escaping and \"\\\\\" for a literal backslash\" in the pattern. ps also accepts options: --smart-scan will filter out probably less relevant processes (belonging to different users, pattern matched to arguments instead of the commands themselves, etc.) --attach will automatically attach to the first process found So, for example, if your targeted process is called /home/foobar/plop , but the existing instance is used through socat , like $ socat tcp-l:1234,fork,reuseaddr exec:/home/foobar/plop Then every time a new connection is opened to tcp/1234, plop will be forked, and GEF can easily attach to it with the command gef\u27a4 ps --attach --smart-scan plop","title":"Command process-search"},{"location":"commands/process-status/","text":"Command process-status This command replaces the old commands pid and fd . process-status provides an exhaustive description of the current running process, by extending the information provided by GDB info proc command, with all the information from the procfs structure. gef\u27a4 ps --smart-scan zsh 22879 gef\u27a4 attach 22879 [...] gef\u27a4 status [+] Process Information PID \u2192 22879 Executable \u2192 /bin/zsh Command line \u2192 '-zsh' [+] Parent Process Information Parent PID \u2192 4475 Command line \u2192 'tmux new -s cool vibe [+] Children Process Information PID \u2192 26190 (Name: '/bin/sleep', CmdLine: 'sleep 100000') [+] File Descriptors: /proc/22879/fd/0 \u2192 /dev/pts/4 /proc/22879/fd/1 \u2192 /dev/pts/4 /proc/22879/fd/2 \u2192 /dev/pts/4 /proc/22879/fd/10 \u2192 /dev/pts/4 [+] File Descriptors: No TCP connections","title":"process-status"},{"location":"commands/process-status/#command-process-status","text":"This command replaces the old commands pid and fd . process-status provides an exhaustive description of the current running process, by extending the information provided by GDB info proc command, with all the information from the procfs structure. gef\u27a4 ps --smart-scan zsh 22879 gef\u27a4 attach 22879 [...] gef\u27a4 status [+] Process Information PID \u2192 22879 Executable \u2192 /bin/zsh Command line \u2192 '-zsh' [+] Parent Process Information Parent PID \u2192 4475 Command line \u2192 'tmux new -s cool vibe [+] Children Process Information PID \u2192 26190 (Name: '/bin/sleep', CmdLine: 'sleep 100000') [+] File Descriptors: /proc/22879/fd/0 \u2192 /dev/pts/4 /proc/22879/fd/1 \u2192 /dev/pts/4 /proc/22879/fd/2 \u2192 /dev/pts/4 /proc/22879/fd/10 \u2192 /dev/pts/4 [+] File Descriptors: No TCP connections","title":"Command process-status"},{"location":"commands/registers/","text":"Command registers The registers command will print all the registers and dereference any pointers. Example on a MIPS host: gef\u27a4 reg $zero : 0x00000000 $at : 0x00000001 $v0 : 0x7fff6cd8 -> 0x77e5e7f8 -> <__libc_start_main+200>: bnez v0,0x77e5e8a8 $v1 : 0x77ff4490 $a0 : 0x00000001 $a1 : 0x7fff6d94 -> 0x7fff6e85 -> \"/root/demo-mips\" $a2 : 0x7fff6d9c -> 0x7fff6e91 -> \"SHELL=/bin/bash\" $a3 : 0x00000000 $t0 : 0x77fc26a0 -> 0x0 $t1 : 0x77fc26a0 -> 0x0 $t2 : 0x77fe5000 -> \"_dl_fini\" $t3 : 0x77fe5000 -> \"_dl_fini\" $t4 : 0xf0000000 $t5 : 0x00000070 $t6 : 0x00000020 $t7 : 0x7fff6bc8 -> 0x0 $s0 : 0x00000000 $s1 : 0x00000000 $s2 : 0x00000000 $s3 : 0x00500000 $s4 : 0x00522f48 $s5 : 0x00522608 $s6 : 0x00000000 $s7 : 0x00000000 $t8 : 0x0000000b $t9 : 0x004008b0 -> <main>: addiu sp,sp,-32 $k0 : 0x00000000 $k1 : 0x00000000 $s8 : 0x00000000 $status : 0x0000a413 $badvaddr : 0x77e7a874 -> <__cxa_atexit>: lui gp,0x15 $cause : 0x10800024 $pc : 0x004008c4 -> <main+20>: li v0,2 $sp : 0x7fff6ca0 -> 0x77e4a834 -> 0x29bd $hi : 0x000001a5 $lo : 0x00005e17 $fir : 0x00739300 $fcsr : 0x00000000 $ra : 0x77e5e834 -> <__libc_start_main+260>: lw gp,16(sp) $gp : 0x00418b20 Filtering registers If one or more register names are passed to the registers command as optional arguments, then only those will be shown: gef\u27a4 reg $rax $rip $rsp $rax : 0x0000555555555169 \u2192 <main+0> endbr64 $rsp : 0x00007fffffffe3e8 \u2192 0x00007ffff7df40b3 \u2192 <__libc_start_main+243> mov edi, eax $rip : 0x0000555555555169 \u2192 <main+0> endbr64","title":"registers"},{"location":"commands/registers/#command-registers","text":"The registers command will print all the registers and dereference any pointers. Example on a MIPS host: gef\u27a4 reg $zero : 0x00000000 $at : 0x00000001 $v0 : 0x7fff6cd8 -> 0x77e5e7f8 -> <__libc_start_main+200>: bnez v0,0x77e5e8a8 $v1 : 0x77ff4490 $a0 : 0x00000001 $a1 : 0x7fff6d94 -> 0x7fff6e85 -> \"/root/demo-mips\" $a2 : 0x7fff6d9c -> 0x7fff6e91 -> \"SHELL=/bin/bash\" $a3 : 0x00000000 $t0 : 0x77fc26a0 -> 0x0 $t1 : 0x77fc26a0 -> 0x0 $t2 : 0x77fe5000 -> \"_dl_fini\" $t3 : 0x77fe5000 -> \"_dl_fini\" $t4 : 0xf0000000 $t5 : 0x00000070 $t6 : 0x00000020 $t7 : 0x7fff6bc8 -> 0x0 $s0 : 0x00000000 $s1 : 0x00000000 $s2 : 0x00000000 $s3 : 0x00500000 $s4 : 0x00522f48 $s5 : 0x00522608 $s6 : 0x00000000 $s7 : 0x00000000 $t8 : 0x0000000b $t9 : 0x004008b0 -> <main>: addiu sp,sp,-32 $k0 : 0x00000000 $k1 : 0x00000000 $s8 : 0x00000000 $status : 0x0000a413 $badvaddr : 0x77e7a874 -> <__cxa_atexit>: lui gp,0x15 $cause : 0x10800024 $pc : 0x004008c4 -> <main+20>: li v0,2 $sp : 0x7fff6ca0 -> 0x77e4a834 -> 0x29bd $hi : 0x000001a5 $lo : 0x00005e17 $fir : 0x00739300 $fcsr : 0x00000000 $ra : 0x77e5e834 -> <__libc_start_main+260>: lw gp,16(sp) $gp : 0x00418b20","title":"Command registers"},{"location":"commands/registers/#filtering-registers","text":"If one or more register names are passed to the registers command as optional arguments, then only those will be shown: gef\u27a4 reg $rax $rip $rsp $rax : 0x0000555555555169 \u2192 <main+0> endbr64 $rsp : 0x00007fffffffe3e8 \u2192 0x00007ffff7df40b3 \u2192 <__libc_start_main+243> mov edi, eax $rip : 0x0000555555555169 \u2192 <main+0> endbr64","title":"Filtering registers"},{"location":"commands/reset-cache/","text":"Command reset-cache This command is only useful for debugging GEF itself.","title":"reset-cache"},{"location":"commands/reset-cache/#command-reset-cache","text":"This command is only useful for debugging GEF itself.","title":"Command reset-cache"},{"location":"commands/scan/","text":"Command scan scan searches for addresses of one memory region (needle) inside another region (haystack) and lists all results. Usage: gef\u27a4 scan NEEDLE HAYSTACK scan requires two arguments, the first is the memory section that will be searched and the second is what will be searched for. The arguments are grepped against the process's memory mappings (just like vmmap ) to determine the memory ranges to search. gef\u27a4 scan stack libc [+] Searching for addresses in 'stack' that point to 'libc' [stack]: 0x00007fffffffd6a8\u2502+0x1f6a8: 0x00007ffff77cf482 \u2192 \"__tunable_get_val\" [stack]: 0x00007fffffffd6b0\u2502+0x1f6b0: 0x00007ffff77bff78 \u2192 0x0000001200001ab2 [stack]: 0x00007fffffffd758\u2502+0x1f758: 0x00007ffff77cd9d0 \u2192 0x6c5f755f72647800 [stack]: 0x00007fffffffd778\u2502+0x1f778: 0x00007ffff77bda6c \u2192 0x0000090900000907 [stack]: 0x00007fffffffd7d8\u2502+0x1f7d8: 0x00007ffff77cd9d0 \u2192 0x6c5f755f72647800 [...] Advanced Needle/Haystack syntax To check mappings without a path associated, an address range (start-end) can be used. Note that ranges don't include whitespaces.","title":"scan"},{"location":"commands/scan/#command-scan","text":"scan searches for addresses of one memory region (needle) inside another region (haystack) and lists all results. Usage: gef\u27a4 scan NEEDLE HAYSTACK scan requires two arguments, the first is the memory section that will be searched and the second is what will be searched for. The arguments are grepped against the process's memory mappings (just like vmmap ) to determine the memory ranges to search. gef\u27a4 scan stack libc [+] Searching for addresses in 'stack' that point to 'libc' [stack]: 0x00007fffffffd6a8\u2502+0x1f6a8: 0x00007ffff77cf482 \u2192 \"__tunable_get_val\" [stack]: 0x00007fffffffd6b0\u2502+0x1f6b0: 0x00007ffff77bff78 \u2192 0x0000001200001ab2 [stack]: 0x00007fffffffd758\u2502+0x1f758: 0x00007ffff77cd9d0 \u2192 0x6c5f755f72647800 [stack]: 0x00007fffffffd778\u2502+0x1f778: 0x00007ffff77bda6c \u2192 0x0000090900000907 [stack]: 0x00007fffffffd7d8\u2502+0x1f7d8: 0x00007ffff77cd9d0 \u2192 0x6c5f755f72647800 [...]","title":"Command scan"},{"location":"commands/scan/#advanced-needlehaystack-syntax","text":"To check mappings without a path associated, an address range (start-end) can be used. Note that ranges don't include whitespaces.","title":"Advanced Needle/Haystack syntax"},{"location":"commands/search-pattern/","text":"Command search-pattern gef allows you to search for a specific pattern at runtime in all the segments of your process memory layout. The command search-pattern , alias grep , aims to be straight-forward to use: gef\u27a4 search-pattern MyPattern It will provide an easily understandable to spot occurrences of the specified pattern, including the section it/they was/were found, and the permission associated to that section. search-pattern can also be used to search for addresses. To do so, simply ensure that your pattern starts with 0x and is a valid hex address. For example: gef\u27a4 search-pattern 0x4005f6 The search-pattern command can also be used as a way to search for cross-references to an address. For this reason, the alias xref also points to the command search-pattern . Therefore the command above is equivalent to xref 0x4005f6 which makes it more intuitive to use. Searching in a specific range Sometimes, you may need to search for a very common pattern. To limit the search space, you can also specify an address range or the section to be checked. gef\u27a4 search-pattern 0x4005f6 little libc gef\u27a4 search-pattern 0x4005f6 little 0x603100-0x603200 Searching in a specific range using regex Sometimes, you may need an advanced search using regex. Just use --regex arg. Example: how to find null-end-printable(from x20-x7e) C strings (min size >=2 bytes) with a regex: gef\u27a4 search-pattern --regex 0x401000 0x401500 ([\\\\x20-\\\\x7E]{2,})(?=\\\\x00)","title":"search-pattern"},{"location":"commands/search-pattern/#command-search-pattern","text":"gef allows you to search for a specific pattern at runtime in all the segments of your process memory layout. The command search-pattern , alias grep , aims to be straight-forward to use: gef\u27a4 search-pattern MyPattern It will provide an easily understandable to spot occurrences of the specified pattern, including the section it/they was/were found, and the permission associated to that section. search-pattern can also be used to search for addresses. To do so, simply ensure that your pattern starts with 0x and is a valid hex address. For example: gef\u27a4 search-pattern 0x4005f6 The search-pattern command can also be used as a way to search for cross-references to an address. For this reason, the alias xref also points to the command search-pattern . Therefore the command above is equivalent to xref 0x4005f6 which makes it more intuitive to use.","title":"Command search-pattern"},{"location":"commands/search-pattern/#searching-in-a-specific-range","text":"Sometimes, you may need to search for a very common pattern. To limit the search space, you can also specify an address range or the section to be checked. gef\u27a4 search-pattern 0x4005f6 little libc gef\u27a4 search-pattern 0x4005f6 little 0x603100-0x603200","title":"Searching in a specific range"},{"location":"commands/search-pattern/#searching-in-a-specific-range-using-regex","text":"Sometimes, you may need an advanced search using regex. Just use --regex arg. Example: how to find null-end-printable(from x20-x7e) C strings (min size >=2 bytes) with a regex: gef\u27a4 search-pattern --regex 0x401000 0x401500 ([\\\\x20-\\\\x7E]{2,})(?=\\\\x00)","title":"Searching in a specific range using regex"},{"location":"commands/shellcode/","text":"Command shellcode shellcode is a command line client for @JonathanSalwan shellcodes database. It can be used to search and download directly via GEF the shellcode you're looking for. Two primitive subcommands are available, search and get gef\u27a4 shellcode search arm [+] Showing matching shellcodes 901 Linux/ARM Add map in /etc/hosts file - 79 bytes 853 Linux/ARM chmod(\"/etc/passwd\", 0777) - 39 bytes 854 Linux/ARM creat(\"/root/pwned\", 0777) - 39 bytes 855 Linux/ARM execve(\"/bin/sh\", [], [0 vars]) - 35 bytes 729 Linux/ARM Bind Connect UDP Port 68 730 Linux/ARM Bindshell port 0x1337 [...] gef\u27a4 shellcode get 698 [+] Downloading shellcode id=698 [+] Shellcode written as '/tmp/sc-EfcWtM.txt' gef\u27a4 system cat /tmp/sc-EfcWtM.txt /* Title: Linux/ARM - execve(\"/bin/sh\", [0], [0 vars]) - 27 bytes Date: 2010-09-05 Tested on: ARM926EJ-S rev 5 (v5l) Author: Jonathan Salwan - twitter: @jonathansalwan shell-storm.org Shellcode ARM without 0x20, 0x0a and 0x00 [...]","title":"shellcode"},{"location":"commands/shellcode/#command-shellcode","text":"shellcode is a command line client for @JonathanSalwan shellcodes database. It can be used to search and download directly via GEF the shellcode you're looking for. Two primitive subcommands are available, search and get gef\u27a4 shellcode search arm [+] Showing matching shellcodes 901 Linux/ARM Add map in /etc/hosts file - 79 bytes 853 Linux/ARM chmod(\"/etc/passwd\", 0777) - 39 bytes 854 Linux/ARM creat(\"/root/pwned\", 0777) - 39 bytes 855 Linux/ARM execve(\"/bin/sh\", [], [0 vars]) - 35 bytes 729 Linux/ARM Bind Connect UDP Port 68 730 Linux/ARM Bindshell port 0x1337 [...] gef\u27a4 shellcode get 698 [+] Downloading shellcode id=698 [+] Shellcode written as '/tmp/sc-EfcWtM.txt' gef\u27a4 system cat /tmp/sc-EfcWtM.txt /* Title: Linux/ARM - execve(\"/bin/sh\", [0], [0 vars]) - 27 bytes Date: 2010-09-05 Tested on: ARM926EJ-S rev 5 (v5l) Author: Jonathan Salwan - twitter: @jonathansalwan shell-storm.org Shellcode ARM without 0x20, 0x0a and 0x00 [...]","title":"Command shellcode"},{"location":"commands/stub/","text":"Command stub The stub command allows you stub out functions, optionally specifying the return value. gef\u27a4 stub [-h] [--retval RETVAL] [address] address indicates the address of the function to bypass. If not specified, GEF will consider the instruction at the program counter to be the start of the function. If --retval RETVAL is provided, GEF will set the return value to the provided value. Otherwise, it will set the return value to 0. For example, it is trivial to bypass fork() calls. Since the return value is set to 0, it will in fact drop us into the \"child\" process. It must be noted that this is a different behaviour from the classic set follow-fork-mode child since here we do not spawn a new process, we only trick the parent process into thinking it has become the child. Example Patching fork() calls: Without stub: With stub:","title":"stub"},{"location":"commands/stub/#command-stub","text":"The stub command allows you stub out functions, optionally specifying the return value. gef\u27a4 stub [-h] [--retval RETVAL] [address] address indicates the address of the function to bypass. If not specified, GEF will consider the instruction at the program counter to be the start of the function. If --retval RETVAL is provided, GEF will set the return value to the provided value. Otherwise, it will set the return value to 0. For example, it is trivial to bypass fork() calls. Since the return value is set to 0, it will in fact drop us into the \"child\" process. It must be noted that this is a different behaviour from the classic set follow-fork-mode child since here we do not spawn a new process, we only trick the parent process into thinking it has become the child.","title":"Command stub"},{"location":"commands/stub/#example","text":"Patching fork() calls: Without stub: With stub:","title":"Example"},{"location":"commands/theme/","text":"Command theme Customize GEF by changing its color scheme. gef\u27a4 theme context_title_message : red bold default_title_message : red bold default_title_line : green bold context_title_line : green bold disable_color : 0 xinfo_title_message : blue bold Changing colors You have the possibility to change the coloring properties of GEF display with the theme command. The command accepts 2 arguments, the name of the property to update, and its new coloring value. Colors can be one of the following: red green blue yellow gray pink Color also accepts the following attributes: bold underline highlight blink Any other will value simply be ignored. gef\u27a4 theme context_title_message blue bold foobar gef\u27a4 theme context_title_message : blue bold default_title_message : red bold default_title_line : green bold context_title_line : green bold disable_color : 0 xinfo_title_message : blue bold","title":"theme"},{"location":"commands/theme/#command-theme","text":"Customize GEF by changing its color scheme. gef\u27a4 theme context_title_message : red bold default_title_message : red bold default_title_line : green bold context_title_line : green bold disable_color : 0 xinfo_title_message : blue bold","title":"Command theme"},{"location":"commands/theme/#changing-colors","text":"You have the possibility to change the coloring properties of GEF display with the theme command. The command accepts 2 arguments, the name of the property to update, and its new coloring value. Colors can be one of the following: red green blue yellow gray pink Color also accepts the following attributes: bold underline highlight blink Any other will value simply be ignored. gef\u27a4 theme context_title_message blue bold foobar gef\u27a4 theme context_title_message : blue bold default_title_message : red bold default_title_line : green bold context_title_line : green bold disable_color : 0 xinfo_title_message : blue bold","title":"Changing colors"},{"location":"commands/tmux-setup/","text":"Command tmux-setup In the purpose of always making debugging sessions easier while being more effective, GEF integrates two commands: tmux-setup screen-setup Those commands will check whether GDB is being spawn from inside a tmux (resp. screen ) session, and if so, will split the pane vertically, and configure the context to be redirected to the new pane, looking something like: To set it up, simply enter gef\u27a4 tmux-setup Note : Although screen-setup provides a similar setup, the structure of screen does not allow a very clean way to do this. Therefore, if possible, it would be recommended to use the tmux-setup command instead. Possible color issues with tmux On Linux tmux only supports 8 colors with some terminal capabilities ( $TERM environment variable). This can mess up your color themes when using GEF with tmux. To remedy this if your terminal supports more colors you can either set the variable to something like TERM=screen-256color or if you don't want or can't change that variable you can start tmux with the -2 flag to force tmux to use 256 colors.","title":"tmux-setup"},{"location":"commands/tmux-setup/#command-tmux-setup","text":"In the purpose of always making debugging sessions easier while being more effective, GEF integrates two commands: tmux-setup screen-setup Those commands will check whether GDB is being spawn from inside a tmux (resp. screen ) session, and if so, will split the pane vertically, and configure the context to be redirected to the new pane, looking something like: To set it up, simply enter gef\u27a4 tmux-setup Note : Although screen-setup provides a similar setup, the structure of screen does not allow a very clean way to do this. Therefore, if possible, it would be recommended to use the tmux-setup command instead.","title":"Command tmux-setup"},{"location":"commands/tmux-setup/#possible-color-issues-with-tmux","text":"On Linux tmux only supports 8 colors with some terminal capabilities ( $TERM environment variable). This can mess up your color themes when using GEF with tmux. To remedy this if your terminal supports more colors you can either set the variable to something like TERM=screen-256color or if you don't want or can't change that variable you can start tmux with the -2 flag to force tmux to use 256 colors.","title":"Possible color issues with tmux"},{"location":"commands/trace-run/","text":"Command trace-run The trace-run command is meant to be provide a visual appreciation directly in IDA disassembler of the path taken by a specific execution. It should be used with the IDA script ida_color_gdb_trace.py It will trace and store all values taken by $pc during the execution flow, from its current value, until the value provided as argument. gef> trace-run <address_of_last_instruction_to_trace> By using the script ida_color_gdb_trace.py on the text file generated, it will color the path taken:","title":"trace-run"},{"location":"commands/trace-run/#command-trace-run","text":"The trace-run command is meant to be provide a visual appreciation directly in IDA disassembler of the path taken by a specific execution. It should be used with the IDA script ida_color_gdb_trace.py It will trace and store all values taken by $pc during the execution flow, from its current value, until the value provided as argument. gef> trace-run <address_of_last_instruction_to_trace> By using the script ida_color_gdb_trace.py on the text file generated, it will color the path taken:","title":"Command trace-run"},{"location":"commands/version/","text":"Command version Print out version information about your current gdb environment. Usage Examples When GEF is located in a directory tracked with git: gef\u27a4 version GEF: rev:48a9fd74dd39db524fb395e7db528f85cc49d081 (Git - clean) SHA1(/gef/rules/gef.py): 848cdc87ba7c3e99e8129ad820c9fcc0973b1e99 GDB: 9.2 GDB-Python: 3.8 Otherwise the command shows the standalone information: gef\u27a4 version GEF: (Standalone) Blob Hash(/gef/rules/gef.py): f0aef0f481e8157006b26690bd121585d3befee0 SHA1(/gef/rules/gef.py): 4b26a1175abcd8314d4816f97fdf908b3837c779 GDB: 9.2 GDB-Python: 3.8 The Blob Hash can be used to easily find the git commit(s) matching this file revision. git log --oneline --find-object <BLOB_HASH> If this command does not return anything then the file was most likely modified and cannot be matched to a specific git commit.","title":"version"},{"location":"commands/version/#command-version","text":"Print out version information about your current gdb environment.","title":"Command version"},{"location":"commands/version/#usage-examples","text":"When GEF is located in a directory tracked with git: gef\u27a4 version GEF: rev:48a9fd74dd39db524fb395e7db528f85cc49d081 (Git - clean) SHA1(/gef/rules/gef.py): 848cdc87ba7c3e99e8129ad820c9fcc0973b1e99 GDB: 9.2 GDB-Python: 3.8 Otherwise the command shows the standalone information: gef\u27a4 version GEF: (Standalone) Blob Hash(/gef/rules/gef.py): f0aef0f481e8157006b26690bd121585d3befee0 SHA1(/gef/rules/gef.py): 4b26a1175abcd8314d4816f97fdf908b3837c779 GDB: 9.2 GDB-Python: 3.8 The Blob Hash can be used to easily find the git commit(s) matching this file revision. git log --oneline --find-object <BLOB_HASH> If this command does not return anything then the file was most likely modified and cannot be matched to a specific git commit.","title":"Usage Examples"},{"location":"commands/vmmap/","text":"Command vmmap vmmap displays the target process's entire memory space mapping. Interestingly, it helps finding secret gems: as an aware reader might have seen, memory mapping differs from one architecture to another (this is one of the main reasons I started GEF in a first place). For example, you can learn that ELF running on SPARC architectures always have their .data and heap sections set as Read/Write/Execute. vmmap accepts one argument, either a pattern to match again mapping names, or an address to determine which section it belongs to.","title":"vmmap"},{"location":"commands/vmmap/#command-vmmap","text":"vmmap displays the target process's entire memory space mapping. Interestingly, it helps finding secret gems: as an aware reader might have seen, memory mapping differs from one architecture to another (this is one of the main reasons I started GEF in a first place). For example, you can learn that ELF running on SPARC architectures always have their .data and heap sections set as Read/Write/Execute. vmmap accepts one argument, either a pattern to match again mapping names, or an address to determine which section it belongs to.","title":"Command vmmap"},{"location":"commands/xfiles/","text":"Command xfiles xfiles is a more convenient representation of the GDB native command, info files allowing you to filter by pattern given in argument. For example, if you only want to show the code sections (i.e. .text ):","title":"xfiles"},{"location":"commands/xfiles/#command-xfiles","text":"xfiles is a more convenient representation of the GDB native command, info files allowing you to filter by pattern given in argument. For example, if you only want to show the code sections (i.e. .text ):","title":"Command xfiles"},{"location":"commands/xinfo/","text":"Command xinfo xinfo displays all the information known to gef about the specific address given as argument: Important note : For performance reasons, gef caches certain results. gef will try to automatically refresh its own cache to avoid relying on obsolete information of the debugged process. However, in some dodgy scenario, gef might fail detecting some new events making its cache partially obsolete. If you notice an inconsistency on your memory mapping, you might want to force gef flushing its cache and fetching brand new data, by running the command reset-cache .","title":"xinfo"},{"location":"commands/xinfo/#command-xinfo","text":"xinfo displays all the information known to gef about the specific address given as argument: Important note : For performance reasons, gef caches certain results. gef will try to automatically refresh its own cache to avoid relying on obsolete information of the debugged process. However, in some dodgy scenario, gef might fail detecting some new events making its cache partially obsolete. If you notice an inconsistency on your memory mapping, you might want to force gef flushing its cache and fetching brand new data, by running the command reset-cache .","title":"Command xinfo"},{"location":"commands/xor-memory/","text":"Command xor-memory This command is used to XOR a block of memory. Its syntax is: xor-memory <display|patch> <address> <size_to_read> <xor_key> The first argument ( display or patch ) is the action to perform: display will only show an hexdump of the result of the XOR-ed memory block, without writing the debuggee's memory. gef\u27a4 xor display $rsp 16 1337 [+] Displaying XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337' \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Original block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x00007fff589b67f8 46 4e 40 00 00 00 00 00 00 00 00 00 00 00 00 00 FN@............. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ XOR-ed block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x00007fff589b67f8 55 79 53 37 13 37 13 37 13 37 13 37 13 37 13 37 UyS7.7.7.7.7.7.7 patch will overwrite the memory with the xor-ed content. gef\u27a4 xor patch $rsp 16 1337 [+] Patching XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337' gef\u27a4 hexdump byte $rsp 16 0x00007fff589b67f8 55 79 53 37 13 37 13 37 13 37 UyS7.7.7.7","title":"xor-memory"},{"location":"commands/xor-memory/#command-xor-memory","text":"This command is used to XOR a block of memory. Its syntax is: xor-memory <display|patch> <address> <size_to_read> <xor_key> The first argument ( display or patch ) is the action to perform: display will only show an hexdump of the result of the XOR-ed memory block, without writing the debuggee's memory. gef\u27a4 xor display $rsp 16 1337 [+] Displaying XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337' \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Original block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x00007fff589b67f8 46 4e 40 00 00 00 00 00 00 00 00 00 00 00 00 00 FN@............. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ XOR-ed block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x00007fff589b67f8 55 79 53 37 13 37 13 37 13 37 13 37 13 37 13 37 UyS7.7.7.7.7.7.7 patch will overwrite the memory with the xor-ed content. gef\u27a4 xor patch $rsp 16 1337 [+] Patching XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337' gef\u27a4 hexdump byte $rsp 16 0x00007fff589b67f8 55 79 53 37 13 37 13 37 13 37 UyS7.7.7.7","title":"Command xor-memory"},{"location":"functions/base/","text":"Function $_base() Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped. Note : a debugging session must be active $_base([filepath]) Example: gef\u27a4 p $_base(\\\"/usr/lib/ld-2.33.so\\\")","title":"base"},{"location":"functions/base/#function-_base","text":"Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped. Note : a debugging session must be active $_base([filepath]) Example: gef\u27a4 p $_base(\\\"/usr/lib/ld-2.33.so\\\")","title":"Function $_base()"},{"location":"functions/bss/","text":"Function $_bss() Return the current BSS base address plus the given offset. Note : a debugging session must be active $_bss([offset]) Example: gef\u27a4 p $_bss(0x20)","title":"bss"},{"location":"functions/bss/#function-_bss","text":"Return the current BSS base address plus the given offset. Note : a debugging session must be active $_bss([offset]) Example: gef\u27a4 p $_bss(0x20)","title":"Function $_bss()"},{"location":"functions/got/","text":"Function $_got() Return the current GOT base address plus the given offset. Note : a debugging session must be active $_got([offset]) Example: gef\u27a4 p $_got(0x20)","title":"got"},{"location":"functions/got/#function-_got","text":"Return the current GOT base address plus the given offset. Note : a debugging session must be active $_got([offset]) Example: gef\u27a4 p $_got(0x20)","title":"Function $_got()"},{"location":"functions/heap/","text":"Function $_heap() Return the current heap base address plus the given offset. Note : a debugging session must be active $_heap([offset]) Example: gef\u27a4 p $_heap(0x20)","title":"heap"},{"location":"functions/heap/#function-_heap","text":"Return the current heap base address plus the given offset. Note : a debugging session must be active $_heap([offset]) Example: gef\u27a4 p $_heap(0x20)","title":"Function $_heap()"},{"location":"functions/stack/","text":"Function $_stack() Return the current stack base address plus the given offset. Note : a debugging session must be active $_stack([offset]) Example: gef\u27a4 p $_stack(0x20)","title":"stack"},{"location":"functions/stack/#function-_stack","text":"Return the current stack base address plus the given offset. Note : a debugging session must be active $_stack([offset]) Example: gef\u27a4 p $_stack(0x20)","title":"Function $_stack()"},{"location":"obsolete/docs/","text":"The latest version of the documentation is hosted on hugsy.github.io/gef","title":"Index"},{"location":"obsolete/docs/#the-latest-version-of-the-documentation-is-hosted-on-hugsygithubiogef","text":"","title":"The latest version of the documentation is hosted on hugsy.github.io/gef"}]}